<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fen Qian Web</title>
  
  <subtitle>HELLO,YOU</subtitle>
  <link href="https://fenqian.xyz/atom.xml" rel="self"/>
  
  <link href="https://fenqian.xyz/"/>
  <updated>2023-04-19T11:59:26.395Z</updated>
  <id>https://fenqian.xyz/</id>
  
  <author>
    <name>GAVIN HUANG</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NEW JOBS</title>
    <link href="https://fenqian.xyz/posts/200e1d4e/"/>
    <id>https://fenqian.xyz/posts/200e1d4e/</id>
    <published>2023-04-19T11:57:00.000Z</published>
    <updated>2023-04-19T11:59:26.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p><code>    通过二个月的冲刺，达到准高级工程师水准，进入大厂（BAT/TMDJKXB)；预期岗位是大厂的中级测开岗，或者广告/音乐/金融类的高级业务测试岗；大厂有包就行，小厂的核心产出岗；</code><br><code>    测开岗方向，主要集中在流程（devops）/服务（稳定性，性能）/自动化（ui/接口/单测）/脚本工具类（打杂，项目需要啥，开发啥）/可视化（也是流程类，不过主要集中在数据和工作流程方面），最具有发展前途的是devops和服务岗，这是真正能有产出的岗位；自动化也就是平台工具化和可视化工具，基本是一体的，小公司认为的自动化一般是这种，就业面广；脚本侠，和业务测试其实区别不大；</code></p><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">目标企业</span><br><span class="line">企业要求</span><br><span class="line">完成规划</span><br><span class="line">模拟训练</span><br><span class="line">过往归纳</span><br><span class="line">反思总结</span><br></pre></td></tr></table></figure><span id="more"></span><p><em><strong>目标企业</strong></em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">百度</span><br><span class="line">阿里</span><br><span class="line">lazada</span><br><span class="line"> 网商银行  </span><br><span class="line">腾讯</span><br><span class="line">腾讯音乐</span><br><span class="line">微众银行</span><br><span class="line">头条</span><br><span class="line">滴滴</span><br><span class="line">美团</span><br><span class="line">京东</span><br><span class="line">拼多多</span><br><span class="line">小红书</span><br><span class="line">快手</span><br><span class="line">网易</span><br><span class="line">携程</span><br><span class="line">满帮</span><br><span class="line">货拉拉</span><br><span class="line">手机厂</span><br><span class="line">华为</span><br><span class="line">荣耀</span><br><span class="line">oppo</span><br><span class="line">vivo</span><br><span class="line">小米</span><br><span class="line">魅族</span><br><span class="line">传音    </span><br><span class="line">汽车厂</span><br><span class="line">比亚迪</span><br><span class="line">小鹏</span><br><span class="line">蔚来</span><br><span class="line">理想</span><br><span class="line">其他车企    </span><br><span class="line">其他制造业</span><br><span class="line">大疆</span><br><span class="line">顺丰    </span><br><span class="line">金融+银行+券商    </span><br><span class="line">外企 </span><br><span class="line">海外</span><br><span class="line">虾皮</span><br><span class="line">shenin</span><br><span class="line">    </span><br><span class="line">其他</span><br><span class="line">b站</span><br><span class="line">贝壳</span><br><span class="line">用友</span><br><span class="line">boss直聘</span><br><span class="line">360</span><br><span class="line">微博 </span><br><span class="line">唯品会</span><br><span class="line">爱奇艺    </span><br><span class="line">   阅文</span><br><span class="line">   达达</span><br><span class="line">知乎</span><br><span class="line">金山</span><br><span class="line">喜马拉雅</span><br><span class="line">同城艺龙</span><br><span class="line">汽车之家</span><br><span class="line">欢聚时代</span><br><span class="line">微盟</span><br><span class="line">陌陌</span><br><span class="line">有赞</span><br><span class="line">斗鱼</span><br><span class="line">虎牙</span><br><span class="line">哈罗</span><br><span class="line">得物</span><br><span class="line">soul</span><br><span class="line">keep</span><br><span class="line">涂鸦    </span><br><span class="line">浪潮</span><br><span class="line">商汤</span><br><span class="line">云从</span><br><span class="line">旷视</span><br><span class="line">依图</span><br><span class="line">猎豹</span><br><span class="line">大宇</span><br><span class="line">美图</span><br><span class="line">奇安信</span><br><span class="line">华润    </span><br><span class="line">国企   </span><br><span class="line">人工智能</span><br><span class="line">chatgpt</span><br><span class="line">币圈</span><br></pre></td></tr></table></figure><p><em><strong>企业要求</strong></em></p><p><em>大厂用人着重点</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">招聘岗位需要什么样的人，匹配最重要，此岗位那些技能是重点，会着重考量；</span><br><span class="line">会着重问简历重的问题，而且会扩展，主要考量深度，还有诚信；</span><br><span class="line">会问面试者印象深刻的工作，主要考虑是否会在工作中思考，以及解决复杂问题的思路；</span><br><span class="line">味道&#x2F;风格和公司以及团队是否匹配；</span><br><span class="line">性格是不是积极向上的。主动、乐观、皮实；</span><br><span class="line">技能方面，考虑一个问题：应聘的同学能够提升团队平均技能的水位线么？如果不是，招聘对你团队的整体收益就会打折。除非应急，否则还是尽量招聘能够提升团队水位线的人，这很重要；</span><br><span class="line">应聘的人有潜力么？成长性怎么样，也就是说，后入者的要求只会越来越高；</span><br><span class="line">如何看潜力？准则就是：工作年限是否与工作能力相匹配。锚点就是你身边的同事，一个个去比，心里就会有数。 回想一下，你在他这个年龄的时候，是比他好，还是比他差？对于工作年限比较长的应聘者，一定要看应聘者是不是在一个方向已经钻了足够的深度。如果没有，大概率不具备潜力。</span><br><span class="line">    </span><br><span class="line">应聘者的意愿，与岗位能够提供的匹配么？</span><br><span class="line">来公司的动机？</span><br><span class="line">诚信一票否决。如果发现明显的不诚信，一定一票否决？</span><br><span class="line">可能会问一些逻辑思维题，考察思维的灵活性，人是否聪明。</span><br><span class="line"></span><br><span class="line">技术：</span><br><span class="line">项目经验：是否有正规的项目组工作经验：理解敏捷的工作模式，有良好的开发习惯，有和项目组良好的协作、沟通能力；是否对原有参与建设的业务系统的业务有一个完整的理解；</span><br><span class="line">技术根底：对应的技术栈是否有与工作年龄匹配的深度。举例：一个做 Java 业务开发 3~5 年的程序员应该对 Java 的基础知识（Core Java 书里的所有知识点），在设计模式，业务建模， 性能调优等一个或者几个点，有比较深的理解；有很强的故障定位及排除能力；能够熟练使用 Java 常见的框架，如 Spring 等；读过部分流行框架源码等。</span><br><span class="line">系统思考的能力，是否有模块化，体系化的思考能力。</span><br><span class="line"></span><br><span class="line">项目需要体现复杂性，拼配度，需要在项目中体现自己的价值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">其他：重点</span><br><span class="line">https:&#x2F;&#x2F;testerhome.com&#x2F;topics&#x2F;16354(p8)</span><br><span class="line">https:&#x2F;&#x2F;testerhome.com&#x2F;topics&#x2F;30722#reply9</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>腾讯</em></p><p><strong>测开岗</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">本科及以上学历，计算机或相关专业，具备扎实的计算机和软件技术基础</span><br><span class="line">2 年及以上开发 或者 测试开发 工作经验，技术栈至少满足以下技术项中的一项或者多项：</span><br><span class="line">①、 熟悉 Android&#x2F;iOS 移动操作系统，具备终端的自动化测试工具或性能测试等项目开发经验；熟悉 Java&#x2F;OC&#x2F;Swift 等至少一门编程语言；</span><br><span class="line">②、 熟悉 go&#x2F;C++&#x2F;java 等至少一种后台主流编程语言，熟悉至少一门脚本开发语言（如 shell、python）； 熟悉 linux 平台下服务器调试开发；对缓存、存储、并发等场景有一定的测试开发经验；熟悉微服务架构并能独立开发后台服务，熟悉大数据开发及应用</span><br><span class="line">③、熟悉前端开发基础知识，熟练掌握 CSS，JS，HTML 语言，至少熟练掌握一个前端 MVVM 框架（React、Vue最佳），具备丰富的前端项目开发经验</span><br><span class="line">三年以上软件开发经验，能熟悉掌握和运用 C&#x2F;C++&#x2F;Python 等任何一门主流编程语言；</span><br><span class="line">在测试自动化、平台研发、web 自动化、报表分析、静态分析、开发调试工具、框架设计和分布式系统等领域中，有涉及到一项或多项相关的实践经验；</span><br><span class="line">具有发现问题的灵敏嗅觉，具备针对复杂问题的分析和解决的能力；</span><br><span class="line">熟悉 JS ES6 Webpack Vue 有加分；</span><br><span class="line">业务项目中，应用行业前沿的优秀的工程实践经验，提升研发和工程生产力和效率；</span><br><span class="line">设计、构建和落地自动化构建、测试和发布的工程基础设施；</span><br><span class="line">驱动研发团队落实优秀的代码规范、代码设计原则和高质量的测试；</span><br><span class="line">分析和定位复杂系统耦合关系，梳理跨团队分工协作，以提升系统可测试性；</span><br><span class="line"></span><br><span class="line">个人特质</span><br><span class="line">①、具备良好的学习能力、复杂问题定位和分析能力；具备创新性思维、较强的抗压能力和技术钻研能力</span><br><span class="line">②、具备扎实的编程基本功，具备一定的项目架构设计能力</span><br><span class="line">③、对 devops 工程效能实践有深入理解和实践经验者优先</span><br><span class="line"></span><br><span class="line">【腾讯会议测试开发工程师（深圳&#x2F;广州&#x2F;北京）】</span><br><span class="line">工作职责</span><br><span class="line"></span><br><span class="line">参与腾讯会议及相关音视频产品进行专项测试工具能力建设设计及开发工作；</span><br><span class="line">参与产品研发效能工具的开发工作；</span><br><span class="line">建设产品自动化测试体系，提升团队的工作效率；</span><br><span class="line">评估引入外部先进工作方法或技术，服务团队； 工作要求</span><br><span class="line">计算机、通信相关专业本科及以上学历， 2 年以上社会工作经验；</span><br><span class="line">熟悉软件开发的流程、工具及相关技能；</span><br><span class="line">掌握数据结构，数据库，操作系统，网络等基础知识；</span><br><span class="line">熟练掌握至少一门开发语言，编译或者脚本语言均可；</span><br><span class="line">有自动化测试系统开发经验者优先；</span><br><span class="line">了解音频、视频相关知识，熟悉音质、画质、时延、卡顿等测试内容者优先考虑</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>业务岗</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">对云服务、分布式计算、大数据处理等有深刻架构理解和测试经验；</span><br><span class="line">对 Linux&#x2F;Unix 操作系统、TCP&#x2F;IP 网络协议、NoSQL 等都有比较深入的理解和实践经验；</span><br><span class="line">具备自动化测试经验，深刻理解自动化平台和持续集成体系建设者优先；</span><br><span class="line">有丰富性能、协议或白盒测试经验者优先；</span><br><span class="line"></span><br><span class="line">【腾讯会议高级测试工程师（深圳&#x2F;广州&#x2F;北京）】</span><br><span class="line">工作职责：</span><br><span class="line">1.负责腾讯会议产品的质量保障工作，以及专项测试技术、效能工具和平台等相关工作；</span><br><span class="line">2.推进各端自动化体系、专项测试体系、工具平台的建设和优化，持续提升测试效率；</span><br><span class="line">3.推动整个研发团队的质量意识，在保障高质量的同时通过 devops 提升研发效能。</span><br><span class="line">工作要求：</span><br><span class="line">1.计算机相关专业本科以上学历，有两年及以上测试开发工作经验；</span><br><span class="line">2.能通过最新的技术手段来保障和改进产品质量 ，有音视频或会议相关大型项目测试开发实践者优先考虑；</span><br><span class="line">3.深入掌握测试体系、测试流程和测试技术，能通过测试技术提升效率；</span><br><span class="line">4.对质量体系、流程、测试风险把握，测试范畴的定义有很好的理解和应用，独立承担过大型项目测试负责人，能够通过有效的手段、流程和方法推进产品测试开展，把控产品质量；</span><br><span class="line">5.熟悉功能测试方法和设计，掌握分层测试， CICD 等测试建设手段；</span><br><span class="line">6.良好的沟通能力和团队协作能力。能从整个研发的角度出发，对研发流程和研发效率的改善提出落地方案。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>百度</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line">_阿里_</span><br></pre></td></tr></table></figure><p>至少 3 年以上工作经验<br>本科及以上学历，硕士生，研究生，博士生更佳<br>精通C、C++、Java、Python 等至少一种编程语言<br>熟悉软件研发流程，掌握软件测试理论和方法，有设计和开发测试工具和自动化测试框架能力更佳<br>喜欢钻研技术，对质量捍卫有热情，不断追求产品用户体验的完善<br>善于沟通，善于团队合作</p><p>[杭州] 阿里巴巴 CBU 技术部 招聘 高级测试开发工程师 / 测试开发专家<br>职位要求：</p><p>两年以上互联网及传统行业的测试开发经验，对软件质量保障有体系化的思考和经验。能够面对复杂情况建立体系化的软件质量控制的策略和模型，并且有大型项目成功实践的经验；<br>具备业务或测试技术（自动化、性能、安全、用户体验、稳定性等）某方面的专长，具有一定的业务建模能力或测试技术预研、选型、设计开发、统一规划的能力。<br>具备抽像提炼测试技术的共性问题，主导业务线相关领域的测试系统建设，持续发现和解决重大系统、业务问题<br>优秀的代码实现能力，精通 C/C++, JAVA, Python 等编程语言之一，并有实际项目代码经验;<br>逻辑能力强、思维活跃，接受新事物能力强；责任心强，积极主动，善于沟通，良好的团队合作能力；良好英文沟通能力；<br>大型互联网名企经验优先，数据和算法测试经验优先。</p><p>[北京][杭州] 阿里云存储测试开发 P6~P8 核心团队内推</p><p>传播测试理念，设计 CI/CD 流程，指导研发工程师持续快速地交付产品特性；<br>根据业务需求，设计和开发测试工具，包括自动化测试框架、持续回归平台、性能测试工具、资源管理工具等；<br>参与某个存储产品的测试工作，制定和实施测试计划，保障被测系统高质量发布上线；<br>针对测试和发布流程提出改进意见，提升研发工程师的幸福感。<br>职位要求</p><p>计算机本科以上相关专业，三年以上工作经验；<br>有互联网后端 、存储或网络产品自动化测试经验，有系统化的测试分析和设计能力；<br>熟悉 Linux 操作系统、熟练使用 shell 和 python 编程语言；<br>具备很强的逻辑思维能力和较高的分析、处理问题的能力，熟练的文档、沟通表达和辅导技巧；<br>善于团队合作，理解和适应变化，以结果和行动为准则，努力追求成功。​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_字节_</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_京东_</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_拼多多_</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_美团_</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_小红书_</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_快手_</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_网易_</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">### 完成规划</span><br><span class="line"></span><br><span class="line">___补全基础知识___</span><br><span class="line"></span><br><span class="line">+ [高级软件测试分析师](https:&#x2F;&#x2F;blog.51cto.com&#x2F;u_15127510&#x2F;4549327)</span><br><span class="line">+ 高级软件测试管理</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">___面试话题___</span><br><span class="line">&#96;&#96;&#96;bash</span><br><span class="line">DevOps一体化研发体系：需结合自己公司的CICDCT体系进行说明,深化出他的理解</span><br><span class="line">工作中的技巧：时间不足场景&#x2F;线上问题场景&#x2F;绩效汇报&#x2F;工作汇报的场景</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h1&gt;&lt;p&gt;&lt;code&gt;    通过二个月的冲刺，达到准高级工程师水准，进入大厂（BAT/TMDJKXB)；预期岗位是大厂的中级测开岗，或者广告/音乐/金融类的高级业务测试岗；大厂有包就行，小厂的核心产出岗；&lt;/code&gt;&lt;br&gt;&lt;code&gt;    测开岗方向，主要集中在流程（devops）/服务（稳定性，性能）/自动化（ui/接口/单测）/脚本工具类（打杂，项目需要啥，开发啥）/可视化（也是流程类，不过主要集中在数据和工作流程方面），最具有发展前途的是devops和服务岗，这是真正能有产出的岗位；自动化也就是平台工具化和可视化工具，基本是一体的，小公司认为的自动化一般是这种，就业面广；脚本侠，和业务测试其实区别不大；&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;h2 id=&quot;大纲&quot;&gt;&lt;a href=&quot;#大纲&quot; class=&quot;headerlink&quot; title=&quot;大纲&quot;&gt;&lt;/a&gt;大纲&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;目标企业&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;企业要求&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;完成规划&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;模拟训练&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;过往归纳&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;反思总结&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="职业" scheme="https://fenqian.xyz/categories/%E8%81%8C%E4%B8%9A/"/>
    
    
    <category term="职业" scheme="https://fenqian.xyz/tags/%E8%81%8C%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>搭建hexo博客</title>
    <link href="https://fenqian.xyz/posts/8e88d59c/"/>
    <id>https://fenqian.xyz/posts/8e88d59c/</id>
    <published>2022-12-29T07:21:34.621Z</published>
    <updated>2021-05-07T09:18:05.330Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><span id="more"></span><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1、建立github代码库</span><br><span class="line">2、下载hexo文件</span><br><span class="line">3、下载主题，更改配置使主题生效</span><br><span class="line">4、部署配置git</span><br><span class="line">5、下载git同步工具</span><br><span class="line">6、清洗旧数据，生成新的静态文件，同步静态文件至代码库（需更改hexo部署配置）</span><br><span class="line">7、域名解析，并给github代码库配置域名</span><br></pre></td></tr></table></figure><p>More info: <a href="https://zhuanlan.zhihu.com/p/26625249">参考</a></p><ul><li>related_posts: true</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>数据库性能测试</title>
    <link href="https://fenqian.xyz/posts/ab3091af/"/>
    <id>https://fenqian.xyz/posts/ab3091af/</id>
    <published>2022-11-22T02:40:47.000Z</published>
    <updated>2022-11-22T02:41:26.741Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/klb561/p/10513620.html">sysbench对mysql数据库的性能测试</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/klb561/p/10513620.html&quot;&gt;sysbench对mysql数据库的性能测试&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ui自动化分布式并行运算</title>
    <link href="https://fenqian.xyz/posts/2be91958/"/>
    <id>https://fenqian.xyz/posts/2be91958/</id>
    <published>2022-07-28T05:38:00.000Z</published>
    <updated>2022-07-28T05:39:34.160Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://cloud.tencent.com/developer/article/1974105">Gird</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1974105&quot;&gt;Gird&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="UI" scheme="https://fenqian.xyz/tags/UI/"/>
    
    <category term="gird" scheme="https://fenqian.xyz/tags/gird/"/>
    
  </entry>
  
  <entry>
    <title>优秀博客</title>
    <link href="https://fenqian.xyz/posts/bb158cde/"/>
    <id>https://fenqian.xyz/posts/bb158cde/</id>
    <published>2022-07-28T03:42:00.000Z</published>
    <updated>2022-12-29T07:30:32.131Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><ul><li><a href="https://cloud.tencent.com/developer/article/1974105">自动化专家</a></li><li><a href="https://cloud.tencent.com/developer/user/3335805/activities">性能</a></li><li><a href="https://cloud.tencent.com/developer/user/1011618/activities">腾讯性能优化</a></li><li><a href="https://cloud.tencent.com/developer/user/1016462">腾讯测开</a></li><li><a href="https://cloud.tencent.com/developer/user/2059614">测开</a></li></ul><span id="more"></span><h1 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h1><ul><li><a href="https://cloud.tencent.com/developer/user/2398817/inventories">python</a></li><li><a href="https://www.cnblogs.com/vamei/tag/Python/">行业大佬python教程</a></li></ul><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li><a href="https://cloud.tencent.com/developer/user/1642192">K8S腾讯专家</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1974105&quot;&gt;自动化专家&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/user/3335805/activities&quot;&gt;性能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/user/1011618/activities&quot;&gt;腾讯性能优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/user/1016462&quot;&gt;腾讯测开&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/user/2059614&quot;&gt;测开&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="博客" scheme="https://fenqian.xyz/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>UI自动化基础--微软</title>
    <link href="https://fenqian.xyz/posts/d1646a55/"/>
    <id>https://fenqian.xyz/posts/d1646a55/</id>
    <published>2022-07-28T03:09:00.000Z</published>
    <updated>2022-07-28T03:10:38.256Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://docs.microsoft.com/en-us/dotnet/framework/ui-automation/">微软ui自动化基础</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/ui-automation/&quot;&gt;微软ui自动化基础&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="UI" scheme="https://fenqian.xyz/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>UI自动化元素定位</title>
    <link href="https://fenqian.xyz/posts/2e4c0062/"/>
    <id>https://fenqian.xyz/posts/2e4c0062/</id>
    <published>2022-07-20T05:38:00.000Z</published>
    <updated>2022-12-29T07:30:56.324Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">APPIUM元素定位原理</span><br><span class="line">常见的元素定位方式</span><br><span class="line">元素定位技巧/辅助工具</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="APPIUM元素定位原理"><a href="#APPIUM元素定位原理" class="headerlink" title="APPIUM元素定位原理"></a>APPIUM元素定位原理</h2><p><code>目前的UI自动化测试，使用Appium进行页面元素的定位和操作。如下图所示，AppiumServer和UiAutomator2的手机端进行通信后完成元素的操作。</code></p><p><img src="/text_image/appium%E6%B5%81%E7%A8%8B.png" alt="alt text"></p><p><code>底层实现过程</code><br><img src="/text_image/appium%E5%BA%95%E5%B1%82.png" alt="alt text"></p><ul><li>首先，Appium通过调用findElement的方式进行元素定位。</li><li>然后，调用Android提供UIDevice对象的findObject方法。</li><li>最终，通过PartialMatch.accept完成元素的查找。</li></ul><p>接下来我们看一下，这个PartialMatch.accept到底是如何完成元素定位的。通过对于<a href="https://android.googlesource.com/platform/frameworks/uiautomator/+/android-support-test/src/main/java/android/support/test/uiautomator/ByMatcher.java">源码</a>的研究，我们发现元素的信息都是存储在一个叫做AccessibilityNodeInfo的对象里面。源码中使用大量node.getXXX方法中的信息，大家是否眼熟呢？这些信息其实就是我们日常自动化测试中可以获取UI元素的属性。从这我们知道了appium元素定位的工作过程；<br><img src="/text_image/meitun%E5%85%83%E7%B4%A0.png" alt="alt_text"></p><h2 id="常见元素定位方式"><a href="#常见元素定位方式" class="headerlink" title="常见元素定位方式"></a>常见元素定位方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">id定位</span><br><span class="line">xpath定位</span><br><span class="line">classname定位</span><br><span class="line">text定位</span><br><span class="line">坐标定位</span><br><span class="line">accessibility_id定位</span><br></pre></td></tr></table></figure><p><em><strong>1、id定位</strong></em></p><p><code>id定位是最常用的定位方式，在选择ID时需要验证ID唯一，此方法仅可用于Android，ios不可用</code></p><p><code>id定位示例：driver.find_element_by_id(&quot;id属性值&quot;)</code></p><ul><li>查找ID方式：①为使用uiautomatorviewer②为使用Appium Inspector</li></ul><p><img src="/text_image/id.png" alt="alt_text"><br><img src="/text_image/appium_id.png" alt="alt_text"></p><ul><li>ID查找性能</li></ul><p><code>由上方的appium定位原理可知，查找页面元素位置，是在AccessibilityNodeInfo对象里查找的，这个对象维护的各属性值是字典，因此通过ID查询的性能是较快的</code></p><ul><li>boomplay UI自动化框架的使用<br><img src="/text_image/b_id.png" alt="alt_text"></li></ul><p><em><strong>2、xpath定位</strong></em></p><p><code>xpath定位也是最常用的定位方式之一，xpath是根据页面层级来定位元素位置，此方法仅可用于Android和iOS</code></p><p><code>xpath定位示例：driver.find_element_by_xpath(&quot;xpath表达式&quot;)</code></p><ul><li>查找xpath方式：①为使用uiautomatorviewer②为使用Appium Inspector</li></ul><p><img src="/text_image/id.png" alt="alt_text"><br><img src="/text_image/appium_id.png" alt="alt_text"></p><ul><li>xpath查找性能</li></ul><p><code>由于xpath是根据元素位置来查找的，从头开始查找，因此xpath查找的性能一般较差，且不同写法查找范围不同，性能差异很大，一般通过id/name属性值来定位；参考</code><a href="https://www.runoob.com/xpath/xpath-syntax.html">xpath语法</a></p><ul><li>boomplay UI自动化框架的使用<br><img src="/text_image/b_id.png" alt="alt_text"></li></ul><p><em><strong>3、classname定位</strong></em></p><p><code>classname是基于classname值来定位元素，由于classname一般不唯一，一般不使用此值定位，使用的话也是结合xpath来使用,ios和Android均支持</code></p><p><code>class_name定位示例：driver.find_element_by_class_name(&quot;class_name属性值&quot;)</code></p><ul><li>查找classname方式：①为使用uiautomatorviewer②为使用Appium Inspector</li></ul><p><img src="/text_image/id.png" alt="alt_text"><br><img src="/text_image/appium_id.png" alt="alt_text"></p><ul><li>classname查找性能</li></ul><p><code>classname是页面的classname属性值，用它来定位元素时，由于classname值一般不唯一，因此一般不直接用其定位，一般和xpath一起使用，将classname作为xpath的属性值，性能由于xpath和ID定位性能接近</code></p><ul><li>boomplay UI自动化框架的使用<br><img src="/text_image/b_id.png" alt="alt_text"></li></ul><p><em><strong>4、name定位</strong></em></p><p><code>name定位是使用页面text值来进行定位的，Android从5.5开始不支持name定位，iOS支持name定位</code></p><p><code>name定位示例：driver.find_element_by_name(&quot;text值&quot;)</code></p><ul><li>查找name方式：ios使用Appium Inspector</li></ul><p><img src="/text_image/appium_id.png" alt="alt_text"></p><ul><li>name查找性能</li></ul><p><code>name查找性能较快，和id查找接近</code></p><ul><li>boomplay UI自动化框架的使用<br>不支持</li></ul><p><em><strong>5、accessibility_id定位</strong></em></p><p><code>accessibility_id定位是使用页面content-desc属性值来进行定位的，android和ios均支持</code></p><p><code>accessibility_id定位示例：driver.find_element_by_accessibility_id(&quot;content-desc值&quot;)</code></p><ul><li>查找content-desc方式：①为使用uiautomatorviewer②为使用Appium Inspector</li></ul><p><img src="/text_image/id.png" alt="alt_text"><br><img src="/text_image/appium_id.png" alt="alt_text"></p><ul><li>accessibility_id查找性能</li></ul><p><code>accessibility_id查找性能较快，和id查找接近</code></p><ul><li>boomplay UI自动化框架的使用<br><img src="/text_image/b_id.png" alt="alt_text"></li></ul><p><em><strong>6、指定uiautomator工具定位</strong></em></p><p><code>uiautomator定位方式是直接指定uiautomator工具来进行定位，可利用工具对象的属性来进行定位（支持ID/xpath/class_name等属性值来进行定位），仅支持Android，在Android环境下和driver.find_element_by_是完全一样的</code></p><p><code>accessibility_id定位示例：driver.find_element_by_android_uiautomator(&quot;UiSelector工具属性值来进行定位&quot;)</code></p><ul><li>查找属性值方式：①为使用uiautomatorviewer②为使用Appium Inspector</li></ul><p><img src="/text_image/id.png" alt="alt_text"><br><img src="/text_image/appium_id.png" alt="alt_text"></p><ul><li>uiautomator工具查找性能</li></ul><p><code>Android环境下根据定位的属性值来区分，性能和driver.find_element_by_是完全一样的</code></p><ul><li>boomplay UI自动化框架的使用<br>不支持，可扩展</li></ul><p><em><strong>7、css_selector定位</strong></em></p><p><code>css属性定位，支持通过页面的各类css属性来进行定位元素，支持单个属性和多个属性值组合定位，仅支持web</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 1.用 标签名 定位查找</span><br><span class="line">driver.find_element_by_css_selector(&quot;input&quot;)</span><br><span class="line"></span><br><span class="line"># 2.用 id 属性定位查找 </span><br><span class="line">driver.find_element_by_css_selector(&quot;kw&quot;)</span><br><span class="line"></span><br><span class="line"># 3.用 class 属性定位查找</span><br><span class="line">driver.find_element_by_css_selector(&quot;s_ipt&quot;)</span><br><span class="line"></span><br><span class="line"># 4.其他属性定位</span><br><span class="line">driver.find_element_by_css_selector(&quot;[name&#x3D;&quot;wd&quot;]&quot;)</span><br><span class="line"></span><br><span class="line"># 5.标签名及id属性值组合定位</span><br><span class="line">driver.find_element_by_css_selector(&quot;input#kw&quot;)</span><br></pre></td></tr></table></figure><ul><li>查找属性值方式：①为使用uiautomatorviewer②为使用Appium Inspector</li></ul><p><img src="/text_image/id.png" alt="alt_text"><br><img src="/text_image/appium_id.png" alt="alt_text"></p><ul><li>uiautomator工具查找性能</li></ul><p><code>性能根据定位的属性值来区分，性能和driver.find_element_by_是完全一样的</code></p><ul><li>boomplay UI自动化框架的使用<br><img src="/text_image/b_id.png" alt="alt_text"></li></ul><p><em><strong>8、单数定位和复数定位</strong></em></p><p><code>单数定位示例：driver.find_element_by_(&quot;值&quot;)</code></p><p><code>复数定位示例：driver.find_elements_by_(&quot;值&quot;).get(6)</code></p><p><strong>单数定位时定位到第一个元素即返回，返回单个对象；复数定位会定位到页面的所有对象，返回一个数组;现在支持id和xpath的单复数定位；复数定位主要用于某些位置无唯一元素的场景，可通过第几个来进行定位</strong><br><img src="/text_image/%E5%8D%95%E5%A4%8D.png" alt="alt_text"></p><p><em><strong>9、坐标定位</strong></em></p><p><code>APPIUM提供tap方法支持通过元素坐标进行点击，提供了一个adb_tap方法给大家获取元素坐标</code></p><ul><li>boomplay UI自动化框架的使用<br><img src="/text_image/%E5%9D%90%E6%A0%87.png" alt="alt_text"></li></ul><p><em><strong>10、图像识别</strong></em></p><p><code>APPIUM从1.9.0版本开始支持识别图像来进行查找对象，暂未调研。后续补充</code></p><ul><li>boomplay UI自动化框架的使用<br><img src="/text_image/%E5%9D%90%E6%A0%87.png" alt="alt_text"></li></ul><h2 id="元素定位工具和技巧"><a href="#元素定位工具和技巧" class="headerlink" title="元素定位工具和技巧"></a>元素定位工具和技巧</h2><ul><li>辅助工具<ul><li>Android：uiautomatorviewer/Appium Inspector</li><li>iOS：Appium Inspector</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;大纲&quot;&gt;&lt;a href=&quot;#大纲&quot; class=&quot;headerlink&quot; title=&quot;大纲&quot;&gt;&lt;/a&gt;大纲&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;APPIUM元素定位原理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;常见的元素定位方式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;元素定位技巧/辅助工具&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="ui元素定位" scheme="https://fenqian.xyz/tags/ui%E5%85%83%E7%B4%A0%E5%AE%9A%E4%BD%8D/"/>
    
    <category term="UI自动化" scheme="https://fenqian.xyz/tags/UI%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>稳定性治理--智能遍历</title>
    <link href="https://fenqian.xyz/posts/e80d13a0/"/>
    <id>https://fenqian.xyz/posts/e80d13a0/</id>
    <published>2022-04-13T02:52:00.000Z</published>
    <updated>2022-12-29T07:31:33.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p><code>智能遍历，即通智能化的规则来访问APP的UI页面；之所以要考虑这种方式，主要是monkey随机测试，随机性太强，覆盖率不好衡量；不方便进行版本之间的对比，因此考虑其他智能遍历方案，备选的有三种方案“UI自动化实现/appcrawler自动遍历/fastbot智能遍历”</code></p><span id="more"></span><h1 id="方案对比"><a href="#方案对比" class="headerlink" title="方案对比"></a>方案对比</h1><ul><li><p><strong>UI自动化实现</strong></p><ul><li><em>优点</em><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">定制化程度高，可控</span><br><span class="line">可进行持续集成</span><br></pre></td></tr></table></figure></li><li><em>缺点</em><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">工作量大，稳定性差，实现难度高</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>appcrawler自动遍历</strong></p><ul><li><em>优点</em><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">覆盖率高，利用类爬虫机制能进行深度遍历，基本覆盖所有的页面</span><br><span class="line">可进行策略定制，灵活性较高，使用成本较低</span><br><span class="line">执行有HTML结果，支持Android和iOS渠道</span><br><span class="line">支持持续集成；</span><br></pre></td></tr></table></figure></li><li><em>缺点</em><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">执行策略和版本数据相关性不大,无法利用历史策略数据</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>fastbot智能遍历</strong></p><ul><li><em>优点</em><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">覆盖率高，且有覆盖率指标，进行智能遍历，遍历策略较智能（每次遍历都会建模，利用深度学习会持续优化模型，作为驱动策略），现实意义较强；</span><br><span class="line">可进行定制，灵活度较高，使用成本较低；</span><br><span class="line">支持iOS和Android渠道；</span><br><span class="line">可利用数据驱动，方便进行版本间的迭代，方便优化驱动策略；</span><br><span class="line">支持持续集成；</span><br><span class="line">利用monkey来遍历，执行较快，效率高；</span><br><span class="line">支持非标准化控件，可以利用图像识别来进行断言；</span><br><span class="line">每次的模型可复用，模型文件会自动存储在 /sdcard/fastbot_[包名].fbm，换设备或者版本可复用原有模型，保证策略完全一致；只需要放在相同的位置即可；</span><br><span class="line">支持多设备</span><br></pre></td></tr></table></figure></li><li><em>缺点</em><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">需要第三方工具，进行性能监控，本身不支持；</span><br><span class="line">无结果报告，只有打印的覆盖率指标，同时只有异常日志；</span><br><span class="line">后期可能会收费，一旦收费，建议转solopi或者自研；</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>综合考虑，最终决定采用fastbot，其中很大一个原因是其支持数据驱动，方便持续优化策略，同时据同事说shein也在使用；</p><h2 id="fastBOT使用"><a href="#fastBOT使用" class="headerlink" title="fastBOT使用"></a><em><strong>fastBOT使用</strong></em></h2><h3 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">安装/部署</span><br><span class="line">使用指令</span><br><span class="line">定制策略</span><br><span class="line">优化策略</span><br><span class="line">结果分析</span><br><span class="line">性能采集</span><br></pre></td></tr></table></figure><ul><li><p><strong>安装/部署</strong></p><ul><li><em>部署Java环境</em><ul><li><a href="https://www.oracle.com/java/technologies/downloads/#jdk18-windows">下载java jdk</a></li><li>配置Java环境变量：在系统变量中对JAVA_HOME、PATH、CLASSPATH进行配置：<ul><li>JAVA_HOME:C:\Program Files (x86)\Java\jdk1.8.0_91</li><li>PATH:%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin</li><li>CLASSPATH:.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</li></ul></li></ul></li><li><em>部署Android环境</em><ul><li>先部署Java环境</li><li><a href="https://developer.android.google.cn/studio">安装Android studio</a></li><li>通过Android studio 安装对应版本的Android sdk</li><li>添加Android环境变量：系统变量中添加ANDROID_HOME，PATH：<ul><li>ANDROID_HOME:C:\Users\gavin\AppData\Local\Android\Sdk</li><li>PATH:%ANDROID_HOME%\platform-tools;%ANDROID_HOME%\tools;C:\Users\gavin\AppData\Local\Android\Sdk\build-tools\32.0.0（aapt命令的环境变量，其是apk解析程序）        </li></ul></li></ul></li><li><em>将jdk包，pull到手机</em><ul><li>adb push * .jar /sdcard</li><li>adb push libs/ * /data/local/tmp/</li></ul></li></ul></li><li><p><strong>使用指令</strong></p><ul><li><em>举例：</em></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IOS:tidevice xctest -B bytedance.FastbotRunner112.xctrunner -e BUNDLEID:com.TranssnetMusic.Boomplay -e duration:120 -e throttle:300 --debug</span><br><span class="line"></span><br><span class="line">ANDROID:adb -s 037952588D000392 0442233974160287 shell CLASSPATH&#x3D;&#x2F;sdcard&#x2F;monkeyq.jar:&#x2F;sdcard&#x2F;framework.jar:&#x2F;sdcard&#x2F;fastbot-thirdpart.jar exec app_process &#x2F;system&#x2F;bin com.android.commands.monkey.Monkey -p com.afmobi.boomplayer --agent reuseq --running-minutes 240 --throttle 500 -v -v --output-directory &#x2F;sdcard&#x2F;fast_data</span><br></pre></td></tr></table></figure><ul><li><em>参数说明</em></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">必填参数：</span><br><span class="line">-s imei imei2:支持多设备</span><br><span class="line">-p package_name:str；“adb shell pm list package”可获取APP包名</span><br><span class="line">--agent reuseq：遍历模式，无需更改</span><br><span class="line">--running-minutes 120：遍历时长，单位是min</span><br><span class="line">--throttle 500：和monkey中的--throttle相同，为事件频率，建议500-800</span><br><span class="line">选填参数：</span><br><span class="line">--bugreport ：<span class="comment">#发生崩溃时打印的日志</span></span><br><span class="line">--output-directory ： /sdcard/xxx <span class="comment">#输出目录的文件夹</span></span><br></pre></td></tr></table></figure></li><li><p><strong>定制策略</strong></p><ul><li><em>限定词</em><br><code>限定自动化定位到的文本只能是apk字符串池中出现的文本，否则抛出异常</code>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作：</span><br><span class="line">aapt2 dump strings apk路径 &gt; max.valid.strings :将apk中所有的字符创，加入到限定词文档</span><br><span class="line">adb push max.valid.strings &#x2F;sdcard:配置文件需要push到sdk卡才能生效</span><br></pre></td></tr></table></figure></li><li><em>自定义事件执行顺序</em><br><code>应用于需要自定义执行顺序的场景（如登录），或者要保证一定要覆盖到的核心场景,实现方式如下：</code></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">在pc端新建 max.xpath.actions 文件</span><br><span class="line">编写事件序列的<span class="keyword">case</span>，参考我提供的max.xpath.actions文件，文件编写好之后push到/sdcard的根目录；举例说明：</span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;prob&quot;</span>:1,//事件发生概率，实际使用注释文件要删掉</span><br><span class="line"><span class="string">&quot;activity&quot;</span>:<span class="string">&quot;com.boomplay.ui.main.MainActivity&quot;</span>,//作用的页面</span><br><span class="line"><span class="string">&quot;times&quot;</span>:1,//重复次数</span><br><span class="line"><span class="string">&quot;actions&quot;</span>:[//具体步骤的执行,同时支持多个操作</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;xpath&quot;</span>:<span class="string">&quot;//*[@text=&#x27;Charts&#x27;]&quot;</span>,//尽量使用resource-id作为xpath路径，也可以组合使用比如<span class="string">&quot;xpath&quot;</span>: <span class="string">&quot;//*[@resource-id=&#x27;xxx&#x27;and @text=&#x27;xx&#x27;]&quot;</span></span><br><span class="line"><span class="string">&quot;action&quot;</span>:<span class="string">&quot;CLICK&quot;</span>,//动作支持的操作，必须大写（CLICK，LONG_CLICK，BACK，SCROLL_TOP_DOWN，SCROLL_BOTTOM_UP，SCROLL_LEFT_RIGHT，SCROLL_RIGHT_LEFT）</span><br><span class="line"><span class="string">&quot;text&quot;</span>: <span class="string">&quot;打开页面成功&quot;</span>,</span><br><span class="line"><span class="string">&quot;clearText&quot;</span>:<span class="literal">false</span>,//明文，可不带</span><br><span class="line"><span class="string">&quot;throttle&quot;</span>:5000//action间隔事件（ms）</span><br><span class="line">&#125;,</span><br><span class="line">&#123;<span class="string">&quot;xpath&quot;</span>:<span class="string">&quot;//*[@text=&#x27;Artists&#x27;]&quot;</span>,</span><br><span class="line"><span class="string">&quot;action&quot;</span>:<span class="string">&quot;CLICK&quot;</span>,</span><br><span class="line"><span class="string">&quot;throttle&quot;</span>:5000&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,//到不同的activity操作，需要新起一个对象</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;prob&quot;</span>:1,</span><br><span class="line"><span class="string">&quot;activity&quot;</span>:<span class="string">&quot;com.boomplay.ui.guide.GuideDialogSearchActivity&quot;</span>,</span><br><span class="line"><span class="string">&quot;times&quot;</span>:1,</span><br><span class="line"><span class="string">&quot;actions&quot;</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;xpath&quot;</span>:<span class="string">&quot;//*[@text=&#x27;Charts&#x27;]&quot;</span>,</span><br><span class="line"><span class="string">&quot;action&quot;</span>:<span class="string">&quot;CLICK&quot;</span>,</span><br><span class="line"><span class="string">&quot;text&quot;</span>: <span class="string">&quot;打开页面成功&quot;</span>,</span><br><span class="line"><span class="string">&quot;clearText&quot;</span>:<span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;throttle&quot;</span>:5000</span><br><span class="line">&#125;,</span><br><span class="line">&#123;<span class="string">&quot;xpath&quot;</span>:<span class="string">&quot;//*[@text=&#x27;Artists&#x27;]&quot;</span>,</span><br><span class="line"><span class="string">&quot;action&quot;</span>:<span class="string">&quot;CLICK&quot;</span>,</span><br><span class="line"><span class="string">&quot;throttle&quot;</span>:5000&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">]</span><br><span class="line">    </span><br></pre></td></tr></table></figure><ul><li><p><em>配置白名单</em><br><code>作用：定制策略只在白名单页面内进行操作</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">操作：</span><br><span class="line">新建 awl.strings文件</span><br><span class="line">在文件中写入Activity的名称，如：com.boomplay.ui.main.MainActivity</span><br><span class="line">将文件push到手机&#x2F;sdcard路径下，使用时，在执行命令尾部添加：</span><br><span class="line">--act-whitelist-file &#x2F;sdcard&#x2F;awl.strings</span><br></pre></td></tr></table></figure></li><li><p><em>配置黑名单</em><br><code>作用：定制策略不允许访问黑名单页面</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">操作：</span><br><span class="line">新建 abl.strings文件</span><br><span class="line">在文件中写入Activity的名称，如：com.boomplay.ui.main.MainActivity</span><br><span class="line">将文件push到手机&#x2F;sdcard路径下，使用时，在执行命令尾部添加：</span><br><span class="line">--act-blacklist-file &#x2F;sdcard&#x2F;abl.strings</span><br></pre></td></tr></table></figure><p><em><strong>黑白名单不能同时配置，非黑即白</strong></em></p></li><li><p><em>定制需要屏蔽的按钮/区域</em><br><code>作用：如登防止登录后，中途退出</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    新建max.widget.black文件，文件配置后，push到&#x2F;sdcard路径下</span><br><span class="line">    [</span><br><span class="line">&#123;</span><br><span class="line">    &quot;activity&quot;:&quot;com.ss.android.xxx.MainActivity&quot;,</span><br><span class="line">    &quot;xpath&quot;: &quot;&#x2F;&#x2F;*[@resource-id&#x3D;&#39;com.xxx.go:id&#x2F;aaa&#39;]&quot;&#x2F;&#x2F;通过元素控制不让访问</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    &quot;activity&quot;:&quot;com.ss.android.xxx.MainActivity&quot;,</span><br><span class="line">    &quot;bounds&quot;: 0.5&#x2F;&#x2F;activity区域内50%区域不被点击，值为0-1</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><em>通过tree屏蔽</em><br><code>原理配置xpath：查找匹配的控件，改变控件属性，从而使控件屏蔽</code></p></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">新建max.tree.pruning文件，文件配置完后，push到&#x2F;sdcard路径下</span><br><span class="line">配置实例：建github提供的文件参考配置</span><br></pre></td></tr></table></figure><ul><li><em>定制事件中模糊事件/突发性事件的占比</em><br><code>所谓的模糊事件，是指执行某个操作后（定制的action事件），模型会根据这个操作生成5-10个相关的操作的策略</code></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">在max.config文件中增加模糊性事件，在总的事件中的占比，配置完成后，push到&#x2F;sdcard路径</span><br><span class="line">max.fuzzingRate &#x3D; 0.01D &#x2F;&#x2F;0.01为Fuzz事件的总概率</span><br><span class="line">模糊事件，包含以下事件，（数字为配置事件在模糊性事件中的概率，以下数值为默认值，可定制）： </span><br><span class="line">max.doRotateFuzzing &#x3D; 0.15</span><br><span class="line">max.doAppSwitchFuzzing &#x3D; 0.15</span><br><span class="line">max.doTrackballFuzzing &#x3D; 0.15</span><br><span class="line">max.doNavKeyFuzzing &#x3D; 0.15</span><br><span class="line">max.doKeyCodeFuzzing &#x3D; 0.15</span><br><span class="line">max.doSystemKeyFuzzing &#x3D; 0.15</span><br><span class="line">max.doDragFuzzing &#x3D; 0.5</span><br><span class="line">max.doPinchZoomFuzzing &#x3D; 0.15 </span><br><span class="line">max.doClickFuzzing &#x3D; 0.7</span><br><span class="line">在max.config文件中增加随机性事件（monkey随机性事件），在总的事件中的占比，配置完成后push到&#x2F;sdcard路径下</span><br><span class="line">max.startMutation &#x3D; 0.3D &#x2F;&#x2F;启动Fastbot立刻设置mutation的几率，默认30%</span><br><span class="line">随机性事件，包含以下事件，(数字为默认概率，此概率为事件总概率，可定制)：</span><br><span class="line">max.doMutationAirplaneFuzzing &#x3D; 0.001</span><br><span class="line">max.doMutationMutationAlwaysFinishActivitysFuzzing &#x3D; 0.1</span><br><span class="line">max.doMutationWifiFuzzing &#x3D; 0.001</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>优化策略</strong></p><ul><li><em>输入内容优化</em><br><code>输入是用户主观意愿很强的行为，为保证输入的内容是有价值的，更添近真实场景，在覆盖输入场景做一些策略优化，以屏蔽乱输入内容</code></li><li><em>操作</em></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">使用ADBKeyBoard在输入栏自动输入内容，屏蔽UI输入法：UI输入法，不同终端使用不同的输入法，不稳定（安装部署adbkeyboard见下方内容，基本所有的开源的自动化工具在输入这块都会封装输入法，为了方便复用和稳定，不建议调用手机的输入法）；</span><br><span class="line">输入随机字符串：pc建一个max.config文件；配置 max.config 中 max.randomPickFromStringList &#x3D; false，最后将文件push到手机的&#x2F;sdcard目录下；</span><br><span class="line">从文件中随机读取字符串来输入：pc建一个max.config文件；配置 max.config 中 max.randomPickFromStringList &#x3D; true，然后在建一个max.strings文件，里面放用来输入的字符串（每一行为一个对象）；最后将max.config和max.strings文件push到手机的&#x2F;sdcard目录下；</span><br><span class="line">模糊输入：模糊输入和随机输入有点类似，不过有限定范围，fastbot模糊输入的限定规则如下：</span><br><span class="line">50% 概率输入fuzzing.strings中某个string</span><br><span class="line">35% 概率输入被测试 App 历史页面中text&#x2F;desc文本内容（不存在max.fuzzing.strings文件时概率提高到85%）</span><br><span class="line">15% 概率不输入</span><br><span class="line">使用文件限定的模糊输入：将git项目中的test&#x2F;max.fuzzing.strings文件push到手机&#x2F;sdcard下，此文件存在模糊搜索策略及生效，文件里放想输入的字符串；</span><br><span class="line">    </span><br></pre></td></tr></table></figure><ul><li><p>部署adbkeyboard</p><ul><li>[下载开源包]（<a href="https://github.com/senzhk/ADBKeyBoard/archive/refs/heads/master.zip%EF%BC%89">https://github.com/senzhk/ADBKeyBoard/archive/refs/heads/master.zip）</a></li><li>进入项目目录cd ADBKeyBoard</li><li>设置环境变量 export ANDROID_HOME=$HOME/Android/Sdk</li><li>在保证手机连接电脑，且赋予debug权限情况下，执行安装命令./gradlew installDebug</li><li>如果以上方式无法安装，请安装apk包：<a href="https://github.com/senzhk/ADBKeyBoard/raw/master/ADBKeyboard.apk">地址</a></li></ul></li><li><p><em>apk反混淆</em><br><code>是什么：混淆指的是Java混淆编译，用以防止对源码的反编译破解；反混淆，类似于解密;使得配置在 不同版本的App中可以通用 </code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">配置混淆映射文件max.mapping，push到手机&#x2F;sdcard中，以建立混淆前后ID映射关系：</span><br><span class="line">adb push resguard_mapping_NewsArticle_beta_version_v7.2.x_?????.txt &#x2F;sdcard&#x2F;max.mapping</span><br><span class="line">配置反混淆文件，以自定义事件为例，在 max.xpath.actions 中配置混淆前的 resource-id，参考示例文件</span><br></pre></td></tr></table></figure></li><li><p><em>测试过程中自动截图</em><br><code>场景：当--throttle 事件频率&gt;200时，配置了截图，会对测试过程中页面进行截图</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">新建max.config配置文件，增加以下属性，配置完成后文件push到&#x2F;sdcard路径下</span><br><span class="line">max.takeScreenshot &#x3D; true</span><br><span class="line">max.takeScreenshotForEveryStep &#x3D; true</span><br><span class="line">max.saveGUITreeToXmlEveryStep &#x3D;true</span><br><span class="line">目录默认保存为手机端sdcard中，如需改变保存位置，在执行命令末尾添加 --output-directory 指定路径</span><br></pre></td></tr></table></figure></li><li><p><em>支持外链跳转</em><br><code>支持第三方的外链跳转，跳转到第三方应用，或者跳转到端内页面</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新建max.schema文件，增加配置如下，文件配置完后，push到&#x2F;sdcard路径下</span><br><span class="line">max.execSchema &#x3D; true</span><br><span class="line">max.execSchemaEveryStartup  &#x3D; true  #每次启动app先执行schema</span><br></pre></td></tr></table></figure></li><li><p><em>应用自动授予权限</em><br><code>如boomplay需要获取通讯录/相机权限，fastbot启动时默认会一次性各所有权限，如需每次动态给权限，需要更改配置</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在max.config中增加以下配置，则不会自动给所有权限；文件配置完之后push到&#x2F;sdcard路径下</span><br><span class="line">max.grantAllPermission &#x3D; false</span><br><span class="line">动态给权限的方式是，在执行的adb命令尾部增加对应的android权限授予的指令：</span><br><span class="line">-p com.android.packageinstaller </span><br><span class="line">-p com.android.permissioncontroller</span><br><span class="line">-p com.lbe.security.miui  # for (miui android 10)</span><br><span class="line">-p com.samsung.android.permissioncontroller #  for (samsung android 10)</span><br></pre></td></tr></table></figure></li><li><p><em>fastbot压缩包提供了各类素材，用以在执行选取各类素材的场景中使用，如发带图片的buzz</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb push data&#x2F;fuzzing&#x2F; &#x2F;sdcard</span><br><span class="line">adb shell am broadcast -a android.intent.action.MEDIA_SCANNER_SCAN_FILE -d file:&#x2F;&#x2F;&#x2F;sdcard&#x2F;fuzzing</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>结果分析</strong></p><ul><li>异常数据<br>  crash：Crash会以追加方式写入/sdcard/crash-dump.log文件<br>  anr：写入 /sdcard/oom-traces.log 文件</li><li>覆盖率统计：coverage = testedActivity / totalActivities * 100<br>  testedActivity:本次测试的activity,会打印出来<br>  totalActivities:总的activity，会打印出来<br>  以上的所有activity，是不区分废弃，或者未使用的activity，为APP的所有的activity</li></ul></li><li><p><strong>性能采集</strong><br><code>性能采集，主要是采集内存/CPU的数据，从而来分析APP执行case时的性能</code></p></li></ul><ul><li><p><em>方法一</em></p><p>  通过火山提供的APP性能分析工具进行监控：<a href="https://www.volcengine.com/docs/6431/82895">工具地址</a>（火山引擎开始收费了，工具现在虽然免费，不排除未来收费，有使用风险）</p></li><li><p><em>方法二</em></p><p>  借助其他的性能数据抓取工具,比如 OneApm, NewRelic（付费）；或者支付宝的solopi；使用第三方工具可能会对结果有影响，最好能统一场景，保证结果一致；</p></li></ul><ul><li><strong>常用操作</strong></li></ul><ul><li><p><em>获取APP包名</em></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aapt dump badging apk_path</span><br></pre></td></tr></table></figure></li><li><p><em>使用<a href="https://github.com/zhangzhao4444/Maxim">maxim</a>获取APPactivity</em></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell CLASSPATH&#x3D;&#x2F;sdcard&#x2F;monkey.jar:&#x2F;sdcard&#x2F;framework.jar exec app_process &#x2F;system&#x2F;bin tv.panda.test.monkey.api.CurrentActivity 注意里面的文件需要push到手机对应的位置后才能使用</span><br></pre></td></tr></table></figure></li><li><p><em>使用<a href="https://github.com/zhangzhao4444/Maxim">maxim</a>查看当前页面的TREE结构，来获取配置需要id等。。</em></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell CLASSPATH&#x3D;&#x2F;sdcard&#x2F;monkey.jar:&#x2F;sdcard&#x2F;framework.jar exec app_process &#x2F;system&#x2F;bin tv.panda.test.monkey.api.Dumptree</span><br></pre></td></tr></table></figure></li><li><p><em>常见问题，查看帮助文档</em></p><ul><li><a href="https://github.com/bytedance/Fastbot_Android/blob/main/handbook-cn.md#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">常见问题点这里</a></li><li><a href="https://github.com/bytedance/Fastbot_Android/issues">其他问题可以看下issue里找下</a></li><li><a href="https://github.com/bytedance/Fastbot_Android/blob/main/handbook-cn.md">官方文档点这里</a></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&lt;code&gt;智能遍历，即通智能化的规则来访问APP的UI页面；之所以要考虑这种方式，主要是monkey随机测试，随机性太强，覆盖率不好衡量；不方便进行版本之间的对比，因此考虑其他智能遍历方案，备选的有三种方案“UI自动化实现/appcrawler自动遍历/fastbot智能遍历”&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="稳定性" scheme="https://fenqian.xyz/tags/%E7%A8%B3%E5%AE%9A%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>uwnc</title>
    <link href="https://fenqian.xyz/posts/3de87ac/"/>
    <id>https://fenqian.xyz/posts/3de87ac/</id>
    <published>2022-03-24T05:50:03.000Z</published>
    <updated>2022-03-24T05:50:04.553Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://test.boomplay.com/TestUWNC/?bp_wvt=1&amp;bp_noc=1#/test-uwnc">https://test.boomplay.com/TestUWNC/?bp_wvt=1&amp;bp_noc=1#/test-uwnc</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://test.boomplay.com/TestUWNC/?bp_wvt=1&amp;amp;bp_noc=1#/test-uwnc&quot;&gt;https://test.boomplay.com/TestUWNC/?bp_wvt=1&amp;amp;bp_noc=1#</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>实战--传音预装</title>
    <link href="https://fenqian.xyz/posts/fbd896d0/"/>
    <id>https://fenqian.xyz/posts/fbd896d0/</id>
    <published>2022-02-28T12:00:00.000Z</published>
    <updated>2022-03-20T02:44:53.493Z</updated>
    
    <content type="html"><![CDATA[<h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">确认需要覆盖的场景；</span><br><span class="line">场景的指标监控；</span><br><span class="line">构建脚本；</span><br><span class="line">分析监控数据，采集异常数据定位问题；</span><br></pre></td></tr></table></figure><span id="more"></span><ul><li><strong>确认需要覆盖的场景：</strong></li></ul><p><code>一般需要覆盖功能/性能/兼容/耗电/升级这几块，功能一般覆盖app的主功能</code></p><ul><li><em>方案：</em></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">启动app,点击播放栏播放按钮播放music，在切换到后台，在切换回前台；</span><br><span class="line">treding页上下滑动，在切换到music页上下滑动，在切换回treding页；</span><br><span class="line">music页点击歌单，进入歌单，歌单上下滑动两页，然后返回music页；在点击进入chart页，上下滑动两页，在返回；在点击进入艺人页，上下滑动两页，在返回；在点击进入曲风页，上下滑动，在进入第一个曲风，上下滑动，然后返回music首页；在次进入歌单页，上下滑动，然后在次点击第一个歌单进入歌单详情页，然后返回music首页；点击进入视频页，上下滑动，然后返回music首页；点击进入bbc，上下滑动，然后返回music首页；</span><br><span class="line">treding页播放music，然后返回treding;进入music页，点击歌单上浮按钮，进行全部播放，点击歌单详情页的全部播放按钮进行播放，点击歌单详情页的music播放，返回music后；进入播放列表，点击music播放；在进入播放详情页，切歌播放，在返回music首页，点击进入video页，点击视频进行播放，返回treding页;</span><br><span class="line">treding页进行music下载，music首页歌单全局下载按钮进行下载，点击进入歌单详情页，通过全部下载按钮进行下载，进入播放详情页，下载music；</span><br><span class="line">library页，通过localmusic或者下载music对本地下载的music进行播放，播放和后台循环切换；</span><br><span class="line">后台播放music时，分别同时打开，Facebook，WhatsApp，Twitter，Instagram，chrome；在切换回前台；</span><br><span class="line">music页/library页/buzz页/account页进行循环切换；</span><br><span class="line">buzz页，一二级页面循环切换，且每个页面均进行上下滑动；buzz页，点击评论和点赞按键；</span><br><span class="line">account页，进行登录，退出应用，切换回前台，退出登录；</span><br><span class="line">notification,页面循环切换，且每个页面进行上下滑动；</span><br><span class="line">前台常驻10分钟，切换到后台常驻10分钟，在切换回前台；</span><br></pre></td></tr></table></figure><ul><li><p><strong>场景的指标监控：</strong></p><p>  <code>由于渠道方未提供确切的合规标准，因此选用网易云音乐作为对比范本；在相同场景下，资源消耗超出网易云10%-30%判定为合规，否则判断为异常</code></p><ul><li><em>监控性能工具：</em></li></ul><p>  支付宝：solopi</p><ul><li><em>监控指标：</em></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CPU:cpu_max,cpu_ave;需要区分进程cpu和系统cpu</span><br><span class="line">ROM:需要监控pps&#x2F;privatedirty-main&#x2F;全局内存&#x2F;activity的内存泄露&#x2F;是否有oom问题，同时需要提供hprof文件；</span><br><span class="line">带宽：环境带宽，最大占用的带宽；</span><br><span class="line">响应耗时：前端渲染耗时；</span><br><span class="line">启动耗时：应用启动耗时，activity启动耗时；</span><br><span class="line">电量：前台&#x2F;高频&#x2F;后台常驻电量消耗；</span><br><span class="line">流量：前台&#x2F;高频&#x2F;后台常驻消耗,升级，下载时的资源消耗；</span><br><span class="line">app抛出的异常堆栈：监控adb日志获取；</span><br><span class="line">场景数据：查看工具报告，和工具收集的异常数据；</span><br><span class="line">线程状态：监控app创建的所有线程及状态；</span><br></pre></td></tr></table></figure><ul><li><em>网易指标</em><ul><li><strong>场景1：</strong> 启动app,点击播放栏播放按钮播放music，在切换到后台，在切换回前台；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">进程cpu:31.04&#x2F;20.68&#x2F;22.62&#x2F;28.35&#x2F;35.68(max)&#x3D;27.3311.22&#x2F;10.30&#x2F;10.65&#x2F;9.11&#x2F;13.36(ave)&#x3D;10.72</span><br><span class="line">总cpu:86.08&#x2F;79.02&#x2F;78.69&#x2F;91.11&#x2F;87(max)&#x3D;84.0345.80&#x2F;44.40&#x2F;41.81&#x2F;40.14&#x2F;48.35(ave)&#x3D;44</span><br><span class="line">private-ram:196.40&#x2F;243.39&#x2F;168.5&#x2F;157.63&#x2F;168.03(max)&#x3D;177.64186.76&#x2F;231.17&#x2F;158.1&#x2F;144.2&#x2F;141.02(ave)&#x3D;163.02</span><br><span class="line">pss-ram：267.32&#x2F;177.49&#x2F;234.1&#x2F;221.47&#x2F;235.23(max)&#x3D;230.27256.2&#x2F;163.50&#x2F;219.3&#x2F;211.83&#x2F;206.29(ave)&#x3D;212.47</span><br><span class="line">系统总ram：3453&#x2F;3365&#x2F;3372&#x2F;3457&#x2F;3421(max)&#x3D;3415.333410.91&#x2F;3349.44&#x2F;3335.2&#x2F;3325.13&#x2F;3377.08(ave)&#x3D;3353.91</span><br><span class="line">全局上行流量：449.13&#x2F;383.05&#x2F;423.08&#x2F;629.68&#x2F;4627&#x3D;500.63</span><br><span class="line">全局下行流量：1768.87&#x2F;1732.48&#x2F;1862.45&#x2F;3001.82&#x2F;33997.12&#x3D;2211.05</span><br><span class="line">响应耗时：</span><br></pre></td></tr></table></figure></li><li><strong>场景2：</strong> 启动耗时；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cpu:41.86&#x2F;40&#x2F;54.73&#x2F;41.79&#x2F;43.54</span><br><span class="line">rom:2977&#x2F;3007&#x2F;3028&#x2F;2986&#x2F;2924</span><br><span class="line">上行流量：32.34&#x2F;9.72&#x2F;11.13&#x2F;11.74&#x2F;20.76</span><br><span class="line">下行流量：138.13&#x2F;61.34&#x2F;32.75&#x2F;76.30&#x2F;54.90</span><br><span class="line">启动耗时：771ms&#x2F;2431ms&#x2F;1080ms&#x2F;781&#x2F;748ms</span><br></pre></td></tr></table></figure></li><li><strong>场景3：</strong> treding页上下滑动，在切换到music页上下滑动，在切换回treding页；；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">总cpu:56.28&#x2F;69.59&#x2F;65.96&#x2F;54.79&#x2F;75.57(max)&#x3D;40.32&#x2F;39.65&#x2F;40.95&#x2F;36.15&#x2F;38.25(ave)</span><br><span class="line">进程cpu:21.84&#x2F;23.71&#x2F;22.19&#x2F;20.37&#x2F;24.17(max)&#x3D;&#x3D;22.5811.64&#x2F;11.6&#x2F;12.07&#x2F;9.35&#x2F;10.64(ave)&#x3D;11.29</span><br><span class="line">pss-ram：403.67&#x2F;361.57&#x2F;359.02&#x2F;375.05&#x2F;339.13(max)&#x3D;365.21388.28&#x2F;349&#x2F;340.59&#x2F;359.07&#x2F;320.53(ave)&#x3D;349.55</span><br><span class="line">private-ram:327.68&#x2F;288.42&#x2F;284.15&#x2F;300.31&#x2F;265.09(max)&#x3D;290.96313.29&#x2F;275.5&#x2F;266.61&#x2F;284&#x2F;248.88(ave)&#x3D;275.37</span><br><span class="line">系统总ram：3635&#x2F;3578&#x2F;3587&#x2F;3571&#x2F;3500(max)&#x3D;3578.673623&#x2F;3563.6&#x2F;3570.09&#x2F;3560.56&#x2F;3484.78(ave)&#x3D;3564.75</span><br><span class="line">全局上行流量：281.49&#x2F;351.88&#x2F;342.72&#x2F;256.57&#x2F;320.48&#x3D;341.90</span><br><span class="line">全局下行流量：1406.78&#x2F;1530.86&#x2F;1694.41&#x2F;1208.77&#x2F;1678.10&#x3D;1538.58</span><br><span class="line">响应耗时：</span><br></pre></td></tr></table></figure></li><li><strong>场景4：</strong> music页点击歌单，进入歌单，歌单上下滑动两页，然后返回music页；在点击进入chart页，上下滑动两页，在返回；在点击进入艺人页，上下滑动两页，在返回；在点击进入曲风页，上下滑动，在进入第一个曲风，上下滑动，然后返回music首页；在次进入歌单页，上下滑动，然后在次点击第一个歌单进入歌单详情页，然后返回music首页；点击进入视频页，上下滑动，然后返回music首页；点击进入bbc，上下滑动，然后返回music首页；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">总cpu:75.71&#x2F;80.96&#x2F;89.29&#x2F;87.47&#x2F;91.79(max)&#x3D;85.9139.67&#x2F;40.07&#x2F;44.62&#x2F;43.97&#x2F;39.84(ave)&#x3D;41.29</span><br><span class="line">进程cpu:49.75&#x2F;51.24&#x2F;62.76&#x2F;50.77&#x2F;63.49(max)&#x3D;54.9214.63&#x2F;14.62&#x2F;16.87&#x2F;16.06&#x2F;13.35(ave)&#x3D;15.10</span><br><span class="line">pss-ram：267.17&#x2F;271.73&#x2F;265.97&#x2F;262.30&#x2F;314.29(max)&#x3D;268.29216.92&#x2F;222.82&#x2F;220.84&#x2F;218.53&#x2F;281.03(ave)&#x3D;220.73</span><br><span class="line">private-ram:204.31&#x2F;209.68&#x2F;205.87&#x2F;202&#x2F;240.15(max)&#x3D;206.62157.54&#x2F;163.98&#x2F;161.26&#x2F;159.72&#x2F;206.50(ave)&#x3D;161.65</span><br><span class="line">系统总ram：3415&#x2F;3414&#x2F;3428&#x2F;3394&#x2F;3412(max)&#x3D;3413.673371.28&#x2F;3379.18&#x2F;3383.33&#x2F;3337.13&#x2F;3374.4(ave)&#x3D;3374.95</span><br><span class="line">全局上行流量：809.21&#x2F;896.26&#x2F;810.98&#x2F;858.86&#x2F;827.16&#x3D;832.33</span><br><span class="line">全局下行流量：4067.93&#x2F;4459.75&#x2F;3786.03&#x2F;3666.64&#x2F;5148.2&#x3D;4104.57</span><br><span class="line">响应耗时：</span><br></pre></td></tr></table></figure></li><li><strong>场景5：</strong> treding页播放music，然后返回treding;进入music页，点击歌单上浮按钮，进行全部播放，点击歌单详情页的全部播放按钮进行播放，点击歌单详情页的music播放，返回music后；进入播放列表，点击music播放；在进入播放详情页，切歌播放，在返回music首页，点击进入video页，点击视频进行播放，返回treding页；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">总cpu:82.99&#x2F;73.3&#x2F;79.35(max)&#x3D;78.5545.87&#x2F;45.57&#x2F;44.19(ave)&#x3D;45.21</span><br><span class="line">进程cpu:28.88&#x2F;33.77&#x2F;30.33(max)&#x3D;30.9912.87&#x2F;11.60&#x2F;11.34(ave)&#x3D;11.94</span><br><span class="line">pss-ram：360.44&#x2F;339.74&#x2F;348.03(max)&#x3D;349.4332&#x2F;313.36&#x2F;314.22(ave)&#x3D;319.86</span><br><span class="line">private-ram:262.51&#x2F;250.52&#x2F;259.28(max)&#x3D;257.44233.83&#x2F;224.32&#x2F;228.88(ave)&#x3D;229.01</span><br><span class="line">系统总ram：3449&#x2F;3485&#x2F;3462(max)&#x3D;3465.333407.38&#x2F;3431.68&#x2F;3427.11(ave)&#x3D;3422.06</span><br><span class="line">全局上行流量：14914.79&#x2F;6908.25&#x2F;11193.83&#x3D;11005.62</span><br><span class="line">全局下行流量：35355.44&#x2F;17913.15&#x2F;28217.16&#x3D;27161.92</span><br><span class="line">响应耗时：</span><br></pre></td></tr></table></figure></li><li><strong>场景6：</strong> treding页进行music下载，music首页歌单全局下载按钮进行下载，点击进入歌单详情页，通过全部下载按钮进行下载，进入播放详情页，下载music；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">总cpu:73.77&#x2F;83.13&#x2F;77.37&#x2F;51.35&#x2F;72.18(max)46.94&#x2F;49.59&#x2F;46.94&#x2F;29.66&#x2F;41.61(ave)</span><br><span class="line">进程cpu:20.62&#x2F;21.09&#x2F;21.91&#x2F;15.18&#x2F;10.79(max)11.91&#x2F;13.48&#x2F;10.14&#x2F;7.87&#x2F;10.31(ave)</span><br><span class="line">pss-ram：351.01&#x2F;301.85&#x2F;307.79&#x2F;(max)339.44&#x2F;291.96&#x2F;297.10(ave)</span><br><span class="line">private-ram:269.26&#x2F;222.66&#x2F;228.95(max)259.39&#x2F;212.57&#x2F;217.98(ave)</span><br><span class="line">系统总ram：2765&#x2F;2813&#x2F;2676(max)2738.27&#x2F;2770.88&#x2F;2667.55(ave)</span><br><span class="line">全局上行流量：16531.35&#x2F;21262.26&#x2F;9539.49&#x2F;3160.78&#x2F;4068.34</span><br><span class="line">全局下行流量：32460.28&#x2F;43211.35&#x2F;18512.41&#x2F;6134.98&#x2F;7870.63</span><br><span class="line">响应耗时：</span><br></pre></td></tr></table></figure></li><li><strong>场景7：</strong> library页，通过localmusic或者下载music对本地下载的music进行播放，播放和后台循环切换；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">总cpu:(max)(ave)</span><br><span class="line">进程cpu:(max)(ave)</span><br><span class="line">pss-ram：(max)(ave)</span><br><span class="line">private-ram:(max)(ave)</span><br><span class="line">系统总ram：(max)(ave)</span><br><span class="line">全局上行流量：</span><br><span class="line">全局下行流量：</span><br><span class="line">响应耗时：</span><br></pre></td></tr></table></figure></li><li><strong>场景8：</strong> 后台播放music时，分别同时打开，Facebook，WhatsApp，Twitter，Instagram，chrome；在切换回前台；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">总cpu:(max)(ave)</span><br><span class="line">进程cpu:(max)(ave)</span><br><span class="line">pss-ram：(max)(ave)</span><br><span class="line">private-ram:(max)(ave)</span><br><span class="line">系统总ram：(max)(ave)</span><br><span class="line">全局上行流量：</span><br><span class="line">全局下行流量：</span><br><span class="line">响应耗时：</span><br></pre></td></tr></table></figure></li><li><strong>场景9：</strong> music页/library页/buzz页/account页进行循环切换；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">总cpu:(max)(ave)</span><br><span class="line">进程cpu:(max)(ave)</span><br><span class="line">pss-ram：(max)(ave)</span><br><span class="line">private-ram:(max)(ave)</span><br><span class="line">系统总ram：(max)(ave)</span><br><span class="line">全局上行流量：</span><br><span class="line">全局下行流量：</span><br><span class="line">响应耗时：</span><br></pre></td></tr></table></figure></li><li><strong>场景10：</strong> buzz页，一二级页面循环切换，且每个页面均进行上下滑动；buzz页，点击评论和点赞按键；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">总cpu:(max)(ave)</span><br><span class="line">进程cpu:(max)(ave)</span><br><span class="line">pss-ram：(max)(ave)</span><br><span class="line">private-ram:(max)(ave)</span><br><span class="line">系统总ram：(max)(ave)</span><br><span class="line">全局上行流量：</span><br><span class="line">全局下行流量：</span><br><span class="line">响应耗时：</span><br></pre></td></tr></table></figure></li><li><strong>场景11：</strong> account页，进行登录，退出应用，切换回前台，退出登录(无法登录)；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">总cpu:94.5&#x2F;100&#x2F;82.71&#x2F;92.37(max)&#x3D;93.4437.83&#x2F;45.15&#x2F;39.34&#x2F;32.20(ave)&#x3D;35.02</span><br><span class="line">进程cpu:42.78&#x2F;19.69&#x2F;23.83&#x2F;43.29(max)&#x3D;32.4011.17&#x2F;9.02&#x2F;10.08&#x2F;9.10(ave)&#x3D;9.84</span><br><span class="line">pss-ram：263.71&#x2F;240.92&#x2F;125.89(max)&#x3D;252.315206.20&#x2F;236.28&#x2F;120.34(ave)&#x3D;221.24</span><br><span class="line">private-ram:205&#x2F;184.32&#x2F;75.10(max)&#x3D;194.66150.55&#x2F;179.58&#x2F;68.81(ave)&#x3D;165.07</span><br><span class="line">系统总ram：2753&#x2F;2785&#x2F;2529(max)&#x3D;26892699.31&#x2F;2752.05&#x2F;2483.05(ave)&#x3D;2644.80</span><br><span class="line">全局上行流量：1157.70&#x2F;1290.43&#x2F;730.34&#x2F;1402.62&#x3D;1283.59</span><br><span class="line">全局下行流量：2662.21&#x2F;2518.72&#x2F;556.74&#x2F;6012.13&#x3D;2590.47</span><br><span class="line">响应耗时：</span><br></pre></td></tr></table></figure></li><li><strong>场景12：</strong> notification,页面循环切换，且每个页面进行上下滑动；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">进程cpu:(max)(ave)</span><br><span class="line">总cpu:(max)(ave)</span><br><span class="line">private-ram:(max)(ave)</span><br><span class="line">pss-ram：(max)(ave)</span><br><span class="line">系统总ram：(max)(ave)</span><br><span class="line">全局上行流量：</span><br><span class="line">全局下行流量：</span><br><span class="line">响应耗时：</span><br></pre></td></tr></table></figure></li><li><strong>场景12：</strong> 首次进入页面的资源消耗；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">总cpu:(max)(ave)</span><br><span class="line">进程cpu:(max)(ave)</span><br><span class="line">pss-ram：(max)(ave)</span><br><span class="line">private-ram:(max)(ave)</span><br><span class="line">系统总ram：(max)(ave)</span><br><span class="line">全局上行流量：</span><br><span class="line">全局下行流量：</span><br><span class="line">响应耗时：</span><br></pre></td></tr></table></figure></li><li><strong>场景13：</strong> 前台常驻10分钟，切换到后台常驻10分钟，在切换回前台；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">总cpu:(max)(ave)</span><br><span class="line">进程cpu:(max)(ave)</span><br><span class="line">pss-ram：(max)(ave)</span><br><span class="line">private-ram:(max)(ave)</span><br><span class="line">系统总ram：(max)(ave)</span><br><span class="line">全局上行流量：</span><br><span class="line">全局下行流量：</span><br><span class="line">响应耗时：</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>构建脚本：</strong></p></li></ul><ul><li><p><em>方案：</em></p><p>  <code>使用solopi构建脚本；录制脚本时，需要保证时间尽量长，且需要规避无效操作，需要保证脚本尽量简单；在批量执行前，需要先进行三次循环调试，以保证脚本无异常，可批量回放和单脚本循环执行，短时间执行，建议单脚本，跑全维度稳定性，建议批量执行；   </code><br><strong>注意实际执行时，需要保证覆盖的机型，尽量接近真实场景；且用solopi进行多次重复执行的压测场景时，建议不要选择重复播放选项来重复播放多次，这种会生成多个性能文件，且一次只能执行一个用例，可以使用批量执行，选择多个用例，一个用例要执行几次，就选中几次，具体看我的教学视频</strong></p></li></ul><p>监控指标：见上方监控指标</p><ul><li><p><strong>分析监控数据，采集异常数据定位问题 :</strong></p><p>  <code>本方案，主要是为了实现APP稳定性的评测；因此分析时，主要关注终端性能，消耗资源，是否有异常</code></p></li></ul><ul><li><p><em>资源路径：</em></p><p>  <code>该路径下包含有终端资源数据（CPU/MEN/带宽/响应耗时/fps..）和消耗资源数据(电量/流量)，具体数据按勾选的监控对象来落地；</code></p></li></ul><p><img src="/text_image/solopi_%E8%B5%84%E6%BA%90.jpg" alt="alt_text"></p><ul><li><p><em>工具各路径说明：</em></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  solopi/error:工具的错误日志；</span><br><span class="line">  solopi/logcat:整个工具的logcat;</span><br><span class="line">  solopi/patch:扩展/补丁，可实现对solopi工具的功能扩展；</span><br><span class="line">  solopi/records：最重要的文件夹，测试对象（app）的所有数据放在此路径下；</span><br><span class="line">solopi\records\error：app执行，adb监控到的异常会记录在这个目录下；</span><br><span class="line">solopi\records\<span class="built_in">export</span>：导出的用例，会放在这个路径下，从这里复制出来给其他人用</span><br><span class="line">solopi\records\import：从<span class="built_in">export</span>导出的用例，放在这个路径下，然后在solopi配置里点导入按钮，这样就成功导入了；</span><br><span class="line">solopi\records\replay：存放solopi用例执行的保存结果，必须点保存，才会落地；否则存放在cpu中，退出会话就会清空，以json格式存放，可以解析看下；</span><br><span class="line">solopi\records\logcat：存放app的，所有adb日志，和工具的adb日志差不多；</span><br><span class="line">solopi\records\records\20220217183647_20220218093514：见上图，为资源路径，文件名为时间戳；</span><br><span class="line">solopi\records\screenshot:存放app录屏的路径;</span><br><span class="line">solopi\records\screenshots:脚本执行失败时会截图，此为存放失败截图的路径；</span><br><span class="line">solopi\records\tmp：临时目录，用以存放一些临时文件，如强制结束时，所处页面的截图；</span><br><span class="line">  solopi/ScreenCaptures:存放录屏的目录，通过录屏分帧，可以计算每页的启动耗时；</span><br><span class="line">  solopi/screenshots:脚本故障截图的存放路径，脚本故障时会截图；</span><br><span class="line">  </span><br><span class="line">  </span><br></pre></td></tr></table></figure></li><li><p><em>分析数据：</em></p><p>  执行操作且确认结束后，需要按照以下顺序来进行分析，上一步失败，下一步中断：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> 1、先确认本次脚本，是否执行成功；先查看执行结果，仅当执行成功后，将执行结果导出，归档；</span><br><span class="line"> 2、查看下工具的error路径，查看是否有异常抛出，确认与APP无关，则过滤，否则记录；</span><br><span class="line"> 3、通过工具，查看录制的性能结果，观察有无异常值，主要关注以下几点：</span><br><span class="line">cpu:单独执行app时，cpu峰值是否超过80-90%，且cpu超过75%占比是否过大，对比相同场景下网易云的数据，是否超出网易指标20-30%；</span><br><span class="line">men:查看内存是否存在一直增长，不随场景释放的内存泄露问题；查看内存是否存在oom问题，查看hprof文件，结合内存曲线配合场景，分析内存消耗是否合理；同时需要关注相同场景下网易云音乐的资源消耗对比是否比我们的APP具有明显的优势；</span><br><span class="line">带宽：带宽，主要考虑，下载资源和实际消耗的流量比，是否实际消耗的在一个合理区间内；以及最大占有带宽，和分配带宽比，分析带宽资源能否得到合理的利用；</span><br><span class="line">响应耗时：响应耗时，是用户感知最明显的指标；需要符合业界的规范；</span><br><span class="line">启动耗时：activity启动耗时，通过数帧的方式计算，也是用户能直接感知到的，结合响应耗时，需要符合业界规范；</span><br><span class="line">流量：流量，主要考虑升级场景流量消耗，后台常驻&#x2F;前台常驻的流量消耗，活跃及下载场景下的流量消耗；</span><br><span class="line">电量：电量考虑用户活跃场景&#x2F;后台常驻&#x2F;前台常驻时的电量消耗；</span><br><span class="line">异常日志监控：主要是关注工具solopi\records\error或solopi\error及solopi\records\logcat路径下，查看有无异常抛出；</span><br><span class="line">anr&#x2F;crash收集：关注APP的crash和anr目录下是否有响应的异常收集文件；</span><br></pre></td></tr></table></figure></li></ul><p>扩展：有时开发需要dump文件来分析，内存的消耗，此时就需要下载hprf文件提供给开发，低于win10版本，可使用下图方案：<br><img src="/text_image/low_win10.jpg" alt="alt_text"><br>高于win10版本，可通过,以下方式获取：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、ps -ef|grep com.afmobi.boomplayer--获取pid</span><br><span class="line">2、 <span class="built_in">kill</span> -10 pid</span><br><span class="line">3、adb bugreport</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;大纲&quot;&gt;&lt;a href=&quot;#大纲&quot; class=&quot;headerlink&quot; title=&quot;大纲&quot;&gt;&lt;/a&gt;大纲&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;确认需要覆盖的场景；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;场景的指标监控；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;构建脚本；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;分析监控数据，采集异常数据定位问题；&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="稳定性" scheme="https://fenqian.xyz/tags/%E7%A8%B3%E5%AE%9A%E6%80%A7/"/>
    
    <category term="实战" scheme="https://fenqian.xyz/tags/%E5%AE%9E%E6%88%98/"/>
    
    <category term="预装" scheme="https://fenqian.xyz/tags/%E9%A2%84%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>python-多进程</title>
    <link href="https://fenqian.xyz/posts/a1c10886/"/>
    <id>https://fenqian.xyz/posts/a1c10886/</id>
    <published>2022-02-23T03:08:00.000Z</published>
    <updated>2022-02-23T07:02:54.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python多进程简述</span><br><span class="line">python多进程模块方法介绍</span><br><span class="line">python多进程使用</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><ul><li><p><em><strong>python多进程模块简述：</strong></em></p><p>  <code>python由于GIL机制，多线程，实际仅消耗一个内核资源；因此效率较低，python要实现并发，提高性能，只能使用多进程模块，python的多进程模块为multiprocessing，通过使用Pool类实现多进程；   </code></p></li><li><p><em><strong>python多进程模块方法介绍：</strong></em></p><p>  <code>   python多进程模块为multiprocessing，为python的内置模块；通过该模块封装的Pool()对象实现多进程，Pool类的属性介绍如下：</code></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Pool</span><br><span class="line"></span><br><span class="line">run&#x3D;run()#需要被执行的方法&#x2F;任务</span><br><span class="line">iter&#x3D;iter#迭代对象，list&#x2F;变量值</span><br><span class="line"></span><br><span class="line">pool&#x3D;Pool(3)#创建一个仅容纳3个进程的进程池，一旦工作任务超出进程的数量，则需等待，进程池中的进程被释放，任务才能进入进程池；</span><br><span class="line">__init__(self, group&#x3D;None, target&#x3D;None, name&#x3D;None, args&#x3D;(), kwargs&#x3D;&#123;&#125;)#进程池的构造方法</span><br><span class="line">group：进程池所属的进程组，一旦不需要给值；</span><br><span class="line">target：待处理的任务或方法；</span><br><span class="line">name：进程池的别名，默认不给值；</span><br><span class="line">args：调用对象的位置参数，可给值元组&#x2F;列表等可迭代对象或者参数值；</span><br><span class="line">kwargs：调用对象的字典参数；</span><br><span class="line"></span><br><span class="line">使用：在win环境下，进程池必须在当前模块下执行，即必须在 if __name__&#x3D;&#x3D;main:下执行；</span><br></pre></td></tr></table></figure><ul><li><strong>Pool()类中拥有的属性方法如下：</strong></li></ul><ul><li>pool.map()<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">函数原型：map(func, iterable[, chunksize&#x3D;None])</span><br><span class="line">pool.map(run,iter)#使用进程池中的进程来同步构造任务为run,参数为iter的对象，具体效果等同于map()方法；</span><br><span class="line">pool.close()#通过主进程，关闭进程池，子进程任务未完成时，进程池不能接受新的子进程；</span><br><span class="line">pool.join()$通过执行子进程，并等待所有子进程执行完，才进行下一步操作；</span><br></pre></td></tr></table></figure></li><li>pool.map_async(run,iter)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">函数原型：map_async(func, iterable[, chunksize&#x3D;None])</span><br><span class="line">pool.map_async(run,iter)#使用进程池中的进程来同步构造任务为run,参数为iter的对象，具体效果等同于map()方法；</span><br><span class="line">pool.close()#通过主进程，关闭进程池，子进程任务未完成时，进程池不能接受新的子进程；</span><br><span class="line">pool.join()$通过执行子进程，并等待所有子进程执行完，才进行下一步操作；</span><br><span class="line">---效果和pool.map()不相同，mapasyc效率更高；mapasyc主进程未阻塞进程池，不需要等该批次的进程全执行完，新的任务就能进入进程池执行；常用pool.map()</span><br></pre></td></tr></table></figure></li><li>pool.apply()<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">函数原型：apply(func[, args&#x3D;()[, kwds&#x3D;&#123;&#125;]])</span><br><span class="line">apply,参数需要为具体的变量值，且仅在python2支持；</span><br><span class="line">apply方法的原理是，阻塞进程池，一次仅让一个任务进入进程池，该任务完成后，才能执行下一个任务，实际是串行；</span><br></pre></td></tr></table></figure></li><li>pool.applyasyc()<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   函数原型：apply(func[, args&#x3D;()[, kwds&#x3D;&#123;&#125;]],[, callback&#x3D;None]]])</span><br><span class="line">   applyasyc,参数需要为具体的变量值，在python3上支持；</span><br><span class="line">   applyasyc方法的原理是，进程池非阻塞，一次可以让多个任务进入进程池，且未对该批次任务进行阻塞，只要其中一个进程执行完后，就能释放资源，让新的任务进入进程池，实际是并行的,效率等同于mapasyc()；</span><br><span class="line">回调使用：pool.applyasyc(run,kwargs,callback&#x3D;func2)，run的返回作为func2的参数，执行完返回func2的值；</span><br><span class="line">   ---applyasyc效果等同于mapasyc()，只是他具有回调功能，且入参的变量不能是可迭代对象，必须为具体的变量值；</span><br></pre></td></tr></table></figure></li><li>pool.terminal()<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">作用：结束工作进程，不在处理未完成的任务</span><br><span class="line">pool.map(run,iter)</span><br><span class="line">pool.close()</span><br><span class="line">pool.run()</span><br><span class="line">sleep(2)</span><br><span class="line">pool.terminal()#执行两秒后，哪怕进程未执行完，也结束该主进程</span><br></pre></td></tr></table></figure></li></ul></li><li><p><em><strong>python多进程使用：</strong></em></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Pool</span><br><span class="line"></span><br><span class="line">run&#x3D;run()</span><br><span class="line">iter&#x3D;iter</span><br><span class="line"></span><br><span class="line">pool&#x3D;Pool(multiprocessing.cpu_count())</span><br><span class="line">pool.map(run(),iter)</span><br><span class="line">pool.join()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;大纲&quot;&gt;&lt;a href=&quot;#大纲&quot; class=&quot;headerlink&quot; title=&quot;大纲&quot;&gt;&lt;/a&gt;大纲&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;python多进程简述&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;python多进程模块方法介绍&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;python多进程使用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="python" scheme="https://fenqian.xyz/tags/python/"/>
    
    <category term="多进程" scheme="https://fenqian.xyz/tags/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python语法-unittest</title>
    <link href="https://fenqian.xyz/posts/5b3a24b8/"/>
    <id>https://fenqian.xyz/posts/5b3a24b8/</id>
    <published>2022-02-21T06:11:00.000Z</published>
    <updated>2022-02-28T11:26:29.225Z</updated>
    
    <content type="html"><![CDATA[<h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unittest介绍</span><br><span class="line">unittest使用教程</span><br><span class="line">unittest中的方法说明</span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="unittest介绍"><a href="#unittest介绍" class="headerlink" title="unittest介绍"></a>unittest介绍</h4><p><code>unnittest是Python中使用的单测模块，能实现对模块，类，方法的自动调用执行，断言测试，环境管理，结果输出的功能</code></p><p><strong>原理:</strong></p><p>unittest构成要素，主要由以下几部分组成:</p><ul><li>testcase:待测对象，待测对象必须要以test，类方法必须含test开头命名;</li><li>TestLoader类：unittest中的类，用来获取模块中的待测对象；返回待测对象的列表；</li><li>TestSuit：测试套件，将测试case加到套件，套件会根据加入的顺序来确认执行顺序；<ul><li>该类的addTest方法，可将测试对象加到套件中，但对结构有要求，必须保持addTest(测试类(具体测试方法))，这种实现方案能保证最先加入套件的最先被执行；</li><li>该类的另一个方法addTests,也可将测试对象加到套件中，但其对结构也有要求，必须保持addTests([测试类1(测试方法1)，测试类1（测试方法2）])</li><li>这种方法能保证直接将获取的对象加入测试套件，执行顺序按加入套件的顺序，一般是按test的命名顺序：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">testloader &#x3D; unittest.TestLoader()</span><br><span class="line"># 获取测试类里面case名，以固定顺序数组返回</span><br><span class="line">testnames &#x3D; testloader.loadTestsFromTestCase(t)</span><br><span class="line">print(testnames)</span><br><span class="line">suite &#x3D; unittest.TestSuite()</span><br><span class="line">suite.addTest&#x2F;addTests(testnames)  </span><br><span class="line">runn &#x3D; unittest.TextTestRunner(verbosity&#x3D;2)</span><br><span class="line">runn.run(suite)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">   suite &#x3D; unittest.TestSuite()</span><br><span class="line">   suite.addTest(sui.pa(Test_ap))#支持加入对象是一个套件，以实现二次封装</span><br><span class="line">   runn &#x3D; unittest.TextTestRunner(verbosity&#x3D;2)</span><br><span class="line">   runn.run(suite)</span><br><span class="line">   </span><br></pre></td></tr></table></figure></li></ul></li><li>TextTestRunner()类：unittest中的类；用来执行suit，控制测试case的执行，执行生成的是text的报告；如果是需要生成htmlt报告，则使用htmltestrunner;</li><li>执行顺序：默认按case名称顺序来确认执行顺序，也可手动定制顺序，各suit来确定执行顺序；</li><li>环境/前置/后置处理：使用unittest自带的方法，setUp/setDown,setUpClass setDownClass,其中前两个每个case执行前后都会分别执行前置后置处理；后两个在套件执行前后，分别执行签字和后置处理，且仅执行一次；</li><li>断言：unittest提供了个钟断言方法，如下图:<br> <img src="/text_image/unitest%E6%96%AD%E8%A8%80.png" alt="alt_text"></li><li>跳过某些测试case：可以使用unittest的skip装饰器，其中skip装饰器主要有3种;(@unittest.skip(reason)/@unittest.skipIf(condition,reason)/@unittest.skipUnless(condition,reason)/即在满足condition条件下跳过该用例，reason用于描述跳过的原因)</li></ul><p><a href="https://blog.51cto.com/u_2681882/2123613"><strong>参考：unitest使用详解</strong></a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;大纲&quot;&gt;&lt;a href=&quot;#大纲&quot; class=&quot;headerlink&quot; title=&quot;大纲&quot;&gt;&lt;/a&gt;大纲&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;unittest介绍&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;unittest使用教程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;unittest中的方法说明&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="unittest" scheme="https://fenqian.xyz/tags/unittest/"/>
    
    <category term="参数化" scheme="https://fenqian.xyz/tags/%E5%8F%82%E6%95%B0%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>python语法-super方法</title>
    <link href="https://fenqian.xyz/posts/7b2ded6/"/>
    <id>https://fenqian.xyz/posts/7b2ded6/</id>
    <published>2022-02-18T07:14:45.000Z</published>
    <updated>2022-02-18T07:37:13.112Z</updated>
    
    <content type="html"><![CDATA[<p><code>super方法用来，继承父类，或祖父类；常用的结构为super(C,self)/python3括号内的可缩写（super()）;super方法本身是一个类，和当前所在的类（父类）无关，该类使用了mro的算法（方法查找顺序）来决定继承类的顺序</code></p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class A():</span><br><span class="line"></span><br><span class="line">def __init__(self):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---A---&quot;</span>)</span><br><span class="line"></span><br><span class="line">class B(A):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---B---&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(super.__mro__)</span><br><span class="line">        super(B,self).__init__()</span><br><span class="line"></span><br><span class="line">class C(A):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---C---&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(super.__mro__)</span><br><span class="line">        super(C,self).__init__()</span><br><span class="line"></span><br><span class="line">class D(B,C):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---D---&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(super.__mro__)</span><br><span class="line">        super().__init__()</span><br><span class="line">D()</span><br></pre></td></tr></table></figure><p><strong>方法查找顺序说明:</strong></p><pre><code>super.mro策略；采用的是查找继承类的上一个节点的方式来实现继承，如super(D,self).__init__();实际上继承的是上一个节点类B；Python2和Python3使用super来继承时，使用上存在差异，Python必须使用super(C,self)方式继承，python3则可同时使用super()和super(C,self)来进行继承；同时Python2存在class A:/class A(object):这两种经典类和新式类；Python3只有新式类；经典类和新式类的mro策略不一样，虽然两者都是使用从左到右的广度遍历，经典类在某类已继承时，后续在查找到这个类，也不在继承；新式类，在某类已经继承时，后续在查找到改类，会继承最新查找到的；</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;super方法用来，继承父类，或祖父类；常用的结构为super(C,self)/python3括号内的可缩写（super()）;super方法本身是一个类，和当前所在的类（父类）无关，该类使用了mro的算法（方法查找顺序）来决定继承类的顺序&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>稳定性治理-暴力回放</title>
    <link href="https://fenqian.xyz/posts/81de0e43/"/>
    <id>https://fenqian.xyz/posts/81de0e43/</id>
    <published>2022-02-17T01:52:00.000Z</published>
    <updated>2022-02-17T09:22:49.306Z</updated>
    
    <content type="html"><![CDATA[<p><code>暴力回放，是指重复执行某些操作；这种重复执行主流程操作，能极大程度的覆盖主流程的功能，保证系统核心功能的质量；</code></p><h4 id="覆盖场景"><a href="#覆盖场景" class="headerlink" title="覆盖场景"></a>覆盖场景</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">music首页，点击歌单播放按钮播放，然后息屏进入后台，10s后切换回前台；</span><br><span class="line">music首页，点开播放列表，然后点击music播放音乐，然后关闭播放列表，然后切换到后台，10s后切换回前台；</span><br><span class="line">music首页，进入歌单，点击全部播放，点击全部下载，然后返回首页，上下滑动一屏，然后切换回后台，10s后切换回前台；</span><br><span class="line">music首页，点击头像登录，退出，切换到后台，10s后切换回前台；</span><br><span class="line">treding首页，点击任意music播放，切换到后台，10s后回到前台，关闭播放详情页；</span><br><span class="line">首页，滑动到treding页，上下滑动一屏；然后向左滑动一屏，上下滑动一屏，然后向左滑动一屏，上下滑动一屏,然后向左滑动一屏，上下滑动一屏,然后切换到后台，停留10s;然后点击导航页到library页，然后点击导航页到search页，然后点击导航页到music页；</span><br><span class="line">搜索页，搜索music，搜索结果页左右滚动一屏；点击结果页播放，然后切换到后台休眠10s,在切换回前台;</span><br><span class="line">首页，点击导航页进入library页；点击进入喜欢的music页，点击全部播放；然后切换到后台，停留10s，在切换回前台，退出music页，切换回首页；</span><br><span class="line">首页，切换到buzz页；上下滑动两屏，点击buzz关注按钮，buzz点赞，buzz评论，点击查看buzz详情，然后回退到buzz页，然后在切换到后台，休眠10s，在切换回前台；</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;暴力回放，是指重复执行某些操作；这种重复执行主流程操作，能极大程度的覆盖主流程的功能，保证系统核心功能的质量；&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;覆盖场景&quot;&gt;&lt;a href=&quot;#覆盖场景&quot; class=&quot;headerlink&quot; title=&quot;覆盖场景&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="稳定性" scheme="https://fenqian.xyz/tags/%E7%A8%B3%E5%AE%9A%E6%80%A7/"/>
    
    <category term="暴力回放" scheme="https://fenqian.xyz/tags/%E6%9A%B4%E5%8A%9B%E5%9B%9E%E6%94%BE/"/>
    
  </entry>
  
  <entry>
    <title>传音刷机</title>
    <link href="https://fenqian.xyz/posts/a1b2e86a/"/>
    <id>https://fenqian.xyz/posts/a1b2e86a/</id>
    <published>2022-02-16T09:07:00.000Z</published>
    <updated>2022-02-16T09:13:09.026Z</updated>
    
    <content type="html"><![CDATA[<ol><li>设置 -&gt; 开发者模式打开 oem unlock<br>输入 adb reboot bootloader</li><li>进入fastboot模式输入 fastboot flashing unlock。按住音量上键确认unlock</li><li>fastboot reboot 重启</li><li>开机后,输入 adb root</li><li>执行 adb disable-verity</li><li>执行 adb reboot</li><li>重启后 执行 adb root</li><li>执行 adb remount</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;设置 -&amp;gt; 开发者模式打开 oem unlock&lt;br&gt;输入 adb reboot bootloader&lt;/li&gt;
&lt;li&gt;进入fastboot模式输入 fastboot flashing unlock。按住音量上键确认unlock&lt;/li&gt;
&lt;li&gt;fa</summary>
      
    
    
    
    <category term="工具" scheme="https://fenqian.xyz/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="刷机" scheme="https://fenqian.xyz/tags/%E5%88%B7%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>SOLOPI使用教程</title>
    <link href="https://fenqian.xyz/posts/49e140/"/>
    <id>https://fenqian.xyz/posts/49e140/</id>
    <published>2022-02-16T02:39:00.000Z</published>
    <updated>2022-02-16T08:19:43.789Z</updated>
    
    <content type="html"><![CDATA[<h3 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">介绍</span><br><span class="line">使用指南</span><br><span class="line">和业务结合</span><br><span class="line">下一步</span><br></pre></td></tr></table></figure><span id="more"></span><ul><li><p><em><strong>介绍</strong></em></p><p>  <code>solopi是支付宝团队研发的ui自动化工具;支持UI录制回放，录制脚本的编辑/扩展/转换成appium脚本/录制脚本支持分发到其他的设备执行；同时还支持性能测试和一机多控，执行采集各种性能数据，同时支持通过一台设备控制多台设备的行为；</code></p></li><li><p><em><strong>使用指南</strong></em></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">环境准备</span><br><span class="line">app配置</span><br><span class="line">录制</span><br><span class="line">回放</span><br><span class="line">性能测试</span><br><span class="line">一机多控</span><br></pre></td></tr></table></figure><ul><li><p><strong>环境准备</strong></p><ul><li><p><em>下载配置Androidsdk</em></p><ul><li>地址:<a href="https://developer.android.com/studio/releases/platform-tools#downloads">https://developer.android.com/studio/releases/platform-tools#downloads</a></li><li>操作：下载安装完Android调试工具后，在下载对应系统版本的 SDK Platform Tools，配置好环境变量，注意win10以上系统环境变量配置即生效，低版本需要重启pc才能生效；</li></ul></li><li><p><em>给手机授权</em></p><ul><li>操作：进入开发者模式，并授权usb调试权限；</li></ul></li><li><p><em>检测环境并连接wifi</em></p><ul><li>操作：通过adb devices命令检测，同时要连接wifi;</li></ul></li><li><p><em>建立连接</em></p><ul><li>操作：通过pc的cmd启动服务,输入（adb tcpip 5555）</li></ul></li><li><p><em>下载solopi的apk</em></p><ul><li>地址：<a href="https://github.com/alipay/SoloPi/releases/download/v0.11.2/SoloPi_0.11.2.apk">apk点击下载</a></li><li>操作：下载安装后，通过配置授权</li><li>环境配置：<a href="https://github.com/alipay/SoloPi/wiki/FirstUse">地址跳转参考内容</a></li></ul></li></ul></li><li><p><strong>app配置</strong></p><p>  <code>按需配置，一般不需要进行配置；可参考上方的环境配置</code></p></li><li><p><strong>录制/回放</strong></p><ul><li><a href="https://github.com/alipay/SoloPi/wiki/RecordCase"><em>官方教程</em></a></li><li>录制：录制支持直接对收到操作进行录制，且录制的脚本支持编辑/扩展/保存/导入等操作，支持各类操作和断言，支持图像识别，简单方便；</li><li>回放：回放支持单脚本回放，支持批量回放，支持重复播放；</li><li>优点：操作简单，可扩展编辑定制策略，可同步到其他设备，可重复回放支持暴力遍历；</li><li>缺点：不支持持续集成，需要手动触发；</li></ul></li><li><p><strong>性能测试</strong></p><ul><li><a href="https://github.com/alipay/SoloPi/wiki/Performance"><em>官方教程</em></a></li><li>操作：性能测试时，直接勾选需要监控的性能指标，不进行录制则可以实时查看；进行录制时，点击录制按钮开始录制，录制结束后点击录制结束按钮，录制的性能数据会存储下来，支持图表分析，可同时存储多份性能数据；</li><li>优点：支持实时查看场景的性能，可和业务测试结合方便简单；支持性能录制，可和UI自动化结合，查看各场景的性能变化和差异；</li><li>缺点：不支持续集成，利用脚本进行回放时不支持性能监控；</li></ul></li><li><p><strong>一机多控</strong></p><ul><li>[<em>官方教程</em>]</li><li>操作：多台设备上同时安装solopi和待测APP；做好配置和授权操作，同时主机（控制机）选中一机多控，选中为主机；其他设备点击一机多控，选中为从机；然后用主机扫码录入从机，然后在主机点击建立主从机的连接，然后主机点击录屏按钮，开始进行一机多控操作；原理是利用solopi的录屏回放功能，主机录屏，从机回放；</li><li>优点：可以用一台机器，控制多台设备操作，能有效的覆盖兼容性测试；</li><li>缺点：不支持ios系统；由于是先录制，在回放，因此所有设备都需要有网络，且必须是同一局域网，且存在延时；不支持批量操作时，同时监控性能数据；</li></ul></li></ul><ul><li><p><em><strong>和业务结合</strong></em></p><p>  <code>和业务结合使用前，需要先梳理清楚solopi的优缺点：</code></p><p>  优点：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">支持录制UI自动化，且录制的脚本支持编辑自定义，且无环境依赖；</span><br><span class="line">录制的脚本可以导出在任意设备上回放，或者转换成appium脚本；</span><br><span class="line">支持回放管理，支持批量回放和重复回放；</span><br><span class="line">支持性能测试，实时监控APP性能和录制APP的性能；</span><br><span class="line">支持一机多控，可同时控制多台设备；</span><br></pre></td></tr></table></figure><p>  缺点：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">不支持iOS设备，仅支持Android设备；</span><br><span class="line">工具是一款纯功能测试辅助软件，不支持持续集成；</span><br><span class="line">功能过于离散，几个功能不能结合在一起使用；</span><br></pre></td></tr></table></figure><ul><li><p><strong>和业务结合：</strong></p><ul><li><p><em>rc验收阶段：</em><br><code>建议功能测试完毕且无误后，最后在rc验收一遍，主流程，验收时进行功能&quot;录制&quot;,录制的脚本可定期回放/开发了相关功能时进行回放/也可以通过Jenkins触发回放;</code></p></li><li><p><em>灰度/线上验收阶段：</em><br><code>建议测试进行线上验收时，进行录制，录制的脚本，可通过扩展进行定期回放；</code></p></li><li><p><em>冒烟/功能测试/rc验收阶段：</em><br><code>建议以上阶段，进行测试验收时，打开性能测试监控，观察功能场景有没用性能问题；</code></p></li><li><p><em>冒烟/兼容性测试阶段：</em><br><code>可以使用一机多控功能，进行兼容性测试；但此功能对控制的终端有要求，最好有固定的兼容环境；</code></p></li><li><p><em>稳定性治理/预装版本暴力回放：</em><br><code>使用重复回放功能进行暴力回放；</code></p></li></ul></li></ul></li><li><p><em><strong>下一步：</strong></em></p></li></ul><p><a href="https://github.com/alipay/SoloPi"><em>Solopi github</em>_</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;大纲&quot;&gt;&lt;a href=&quot;#大纲&quot; class=&quot;headerlink&quot; title=&quot;大纲&quot;&gt;&lt;/a&gt;大纲&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;介绍&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;使用指南&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;和业务结合&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;下一步&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="ui自动化" scheme="https://fenqian.xyz/tags/ui%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    <category term="稳定性" scheme="https://fenqian.xyz/tags/%E7%A8%B3%E5%AE%9A%E6%80%A7/"/>
    
    <category term="前端性能" scheme="https://fenqian.xyz/tags/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/"/>
    
    <category term="solopi" scheme="https://fenqian.xyz/tags/solopi/"/>
    
  </entry>
  
  <entry>
    <title>用例管理平台</title>
    <link href="https://fenqian.xyz/posts/c48e9a83/"/>
    <id>https://fenqian.xyz/posts/c48e9a83/</id>
    <published>2022-02-11T08:51:24.000Z</published>
    <updated>2022-02-11T08:52:12.414Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/didi/AgileTC/blob/master/README_zh-CN.md">用例管理平台agiletc</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/didi/AgileTC/blob/master/README_zh-CN.md&quot;&gt;用例管理平台agiletc&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>稳定性治理</title>
    <link href="https://fenqian.xyz/posts/a30df9c8/"/>
    <id>https://fenqian.xyz/posts/a30df9c8/</id>
    <published>2022-01-04T06:47:00.000Z</published>
    <updated>2022-02-16T08:02:54.709Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">概述，目的？</span><br><span class="line">怎么进行稳定性治理，稳定性治理的体系建设？</span><br><span class="line">稳定性治理的过程？</span><br></pre></td></tr></table></figure><span id="more"></span><p><strong>稳定性治理概述，目的？</strong></p><p><code>稳定性是系统最核心的需求；稳定性包含最核心的，系统服务的稳定性和前端的稳定性；稳定性核心有两大快，一是系统稳定，在复杂的环境下能稳定运行；二是抛出异常能及时处理，降低异常带来的风险；本文的稳定性治理，主要考虑的是通过模仿异常环境下系统运行，及时发现问题，解决问题，提升系统的稳定性；</code></p><p><strong>怎么进行稳定性治理，稳定性治理体系的建设？</strong></p><p><code>稳定性治理，首要目标，是要确认稳定性的衡量指标；其次要具有构造仿真环境的能力，在复杂环境下要具有系统监控能力，同时整个体系要能实现自动化运行维护具有平台能力。</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">稳定性衡量指标？</span><br><span class="line">稳定性环境监控？</span><br><span class="line">稳定性测试策略？</span><br><span class="line">自动化稳定性平台建设？</span><br></pre></td></tr></table></figure><ul><li><p><em><strong>稳定性衡量指标?</strong></em><br><code>系统稳定；一般是指系统在定义的状态下稳定运行，且长时间不会出现异常状态,常见的异常如下：</code></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">崩溃率</span><br><span class="line">anr</span><br><span class="line">内存泄露</span><br><span class="line">oom</span><br><span class="line">系统性能</span><br></pre></td></tr></table></figure><ul><li><em>崩溃率</em><br><code>崩溃是稳定性的最大对手；通常关注的崩溃是crash；关注崩溃率，一般关注日崩溃率和崩溃用户率； </code><ul><li>日崩溃率=日崩溃次数/日打开总次数        合规标准：0.2%</li><li>崩溃用户数=去重的崩溃用户数/日活跃用户数    合规标准：0.2%</li></ul></li><li><em>anr</em><br><code>anr即(Application Not Response);常会直接暴露给用户，照成不好影响;</code></li><li><em>内存泄露</em><br><code>系统占用的堆内存未及时释放或无法释放，从而导致占用的内存一直递增，从而导致环境资源不足;</code></li><li><em>oom</em><br><code>app申请的内存超过最大内存的限制，系统不分配内存，导致程序崩溃;</code></li><li><em>系统性能</em><br><code>指在不同场景下对系统或环境的资源消耗进行监控，常监控系统资源和消耗的资源;</code></li></ul></li><li><p><em><strong>系统稳定性监控？</strong></em></p><p>  <code>系统稳定，说明系统在全局环境下，都能长期稳定的运行；揭释了稳定性检测的核心的几个点，异常环境构造，稳定运行指标监控，长期稳定性；</code></p><ul><li><em>稳定性指标</em><br><code>本文的指标监控，仅对前端的相关的指标进行监控；后端服务的监控，有运维在做;</code><ul><li><p>服务及时响应/且响应参数无误</p><ul><li>场景：如接口监控，特指对后端服务进行监控;</li><li>指标：一般监控服务相关指标（如接口响应时间/参数准确性）,资源监控（cpu/内存/带宽/io），消耗资源（流量/电量）;</li><li>方案：可通过仅触发服务的方式，仅对服务进行监控，如接口自动化；可通过前端触发服务来实现监控，如ui自动化实现接口覆盖；系统资源消耗可通过监控系统资源文件获取；系统监控可通过后端方案实现，如prometheus；</li></ul></li><li><p>前端加载时间满足用户体验/呈现无误</p><ul><li>场景：触发前端场景，来实现对产品提供给用户的服务进行监控；</li><li>指标：页面加载时间/页面UI测试/前端资源检测；</li><li>方案：可通过UI自动化，UI遍历等方式实现；数据采集可通过获取activity的响应时间获取；UI测试可通过telescop植入性来实现；</li></ul></li><li><p>前端稳定性</p><ul><li>场景：稳定性是最核心的指标，稳定指服务稳定不崩溃，不抛出异常；</li><li>指标：<ul><li>crash率：通过监控crash文件进行采集；</li><li>anr率：通过监控anr文件进行采集；</li><li>内存泄露：通过LeakCanary监控内存泄露,通过haha来解析hprf文件，来分析Java虚拟机的内存使用清空；</li><li>hprf:hprof最初是由J2SE支持的一种二进制堆转储格式，hprof文件保存了当前java堆上所有的内存使用信息，能够完整的反映虚拟机当前的内存状态；</li><li>oom：通过字节的tailor来进行监控；</li><li><a href="https://mp.weixin.qq.com/s?__biz=MzI1MzYzMjE0MQ==&mid=2247487203&idx=1&sn=182584b69910c843ae95f60e74127249&chksm=e9d0c501dea74c178e16f95a2ffc5007c5dbca89a02d56895ed9b05883cf0562da689ac6146b&scene=178&cur_album_id=1590413073616519171#rd">oom问题监控</a></li><li>方案<ul><li>稳定性在不同的场景下有着不同的表现；可以通过这些方式来实现场景的覆盖；ui遍历/暴力回放/monkey测试/流量回放；</li></ul></li></ul></li></ul></li><li><p>其他监控</p><ul><li>场景：除了上述指标外，我们还会对以下指标进行监控，以评估对系统的影响;</li><li>指标：<ul><li>UI资源监控：图片过大/图片持有/过度绘制/资源泄露/过度布局</li><li>线程阻塞</li><li>文件创建</li><li>线程创建</li><li>主线程io</li><li>启动性能</li></ul></li><li>方案：使用telescop的植入性和监控能力来监控；</li></ul></li></ul></li></ul></li><li><p><em><strong>稳定性测试策略？</strong></em><br><code>稳定性测试时，有几个核心待解决的问题；如何解决真实环境下各种复杂环境的覆盖？如何保证效率，实现低投入高产出？如何保证采集的指标和问题场景结合，快速复现？</code></p><ul><li><p><em>如何保证覆盖率？覆盖率是如何计算的？</em><br><code>稳定性治理，在复杂环境下要保证全覆盖时不可能实现的工作；因此我们考虑实现一种可迭代优化的机制保证覆盖，保障系统的稳定，通常我们考虑系统覆盖时，从页面覆盖和代码逻辑的覆盖来实现;</code></p><ul><li>覆盖率指标：<ul><li>页面场景覆盖：activity覆盖70%；覆盖所有的一级页面和所有的核心二级页面以及所有的主流程相关的三四级页面；覆盖所有的核心业务流程；</li><li>代码行覆盖：可通过白盒走查或者代码检测工具；单测实现代码的覆盖；覆盖所有核心流程和代码的核心处理逻辑；</li></ul></li><li>覆盖率保障策略：<ul><li>终端覆盖：设备信息采集，通过埋点采集线上设备数据；至少要保证top10的设备能实现覆盖；保障top5系统版本能实现覆盖；top5-10的os版本能实现覆盖；</li><li>预装版本：最好能实现需预装的机型的覆盖；否则至少要保证覆盖前一个机型，相同配置的版本的设备不低于10台；</li><li>需要有问题统计/上报机制；能收集线上问题进行统计归纳，方便策略的设计和混度工程的实现；</li><li>覆盖所有的核心链路，及70%的页面（所有一级页面，所有核心二级页面，所有核心三级页面）</li><li>时间：看具体的策略，monkey一般不低于一天，也就是8小时；</li></ul></li></ul></li><li><p><em>测试方式？各种方式的优缺点？</em></p><ul><li><p>UI遍历测试<br>  <code>UI遍历，指利用爬虫和过滤策略，实现从头遍历所有页面；</code></p><ul><li>优点：实现所有流程/页面的覆盖，能保证较高的覆盖率；</li><li>缺点：耗时太久，无法模仿真实的用户操作，对测试版本或者测试环境有要求；很难构造高压力的场景；</li><li>方案：AppCrawler实现；</li></ul></li><li><p>暴力回放<br><code>暴力回放，指通过频繁对某些场景进行循环操作，来实现对核心场景的覆盖，此策略传音要求必须要做;</code></p><ul><li>优点：可对核心场景进行大量覆盖，保证核心链路无误；</li><li>缺点：能覆盖的场景有限，耗时较长；较难覆盖到特殊场景；</li><li>场景：通过UI自动化脚本实现循环遍历；</li></ul></li><li><p>monkey随机遍历<br><code>monkey是Android自带的稳定性治理的工具，也是稳定性治理的核心方式，能模仿用户进行随机性的点击操作；</code></p><ul><li>优点：实现简单，有较强的随机性，能发现一些特殊问题；</li><li>缺点：过于随机，不能保证覆盖率，无法模仿真实用户的操作；</li><li>方案：针对monkey过于随机的缺陷，为保证效率，可对monkey的策略进行定制化，具体实现如下：<ul><li>通过黑名单策略，跳过低频操作（如新手引导、权限类操作、关闭输入法，屏蔽其他应用的activity减少无效操作）；</li><li>通过白名单策略，定制执行的activity和app,减少无效操作；</li><li>定制事件比例，提高测试效率；</li><li>执行时间，一般不低于一天，也就是8小时；</li></ul></li></ul></li><li><p>线上流量回放<br><code>线上流量回放，指利用线上的日志数据记录的用户行为，作为源数据来建模，模仿用户操作;</code></p><ul><li>优点：覆盖大量的真实用户操作，case有效性高，针对性强；</li><li>缺点：需要利用大量的线上日志，对系统的要求高；利用线上日志进行回放，实现难度大；利用线上用户数据，会存在隐私安全问题；</li><li>方案：可使用头条的智能化monkey工具，fastbot;</li></ul></li></ul></li><li><p><em>具体实现，如何保证效率？</em><br><code>结合上诉几种方案的优缺点，可知，最好能四种方案结合着使用；</code></p><ul><li>新发功能版本：最好先执行一遍UI遍历（冒烟）/monkey遍历（每日）/流量回放（bug修复版本）</li><li>RC版本：可执行流量回放/暴力回放</li><li>预装版本：可执行流量回放/暴力回放</li></ul></li></ul></li><li><p><em><strong>自动化稳定性平台的建设</strong></em></p></li></ul><ul><li><a href="https://mp.weixin.qq.com/s/L7RTCzqQ-1GbNhMNHONdRw"><strong>阿里稳定性治理</strong></a></li><li><a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI1MzYzMjE0MQ==&action=getalbum&album_id=1590413073616519171&scene=173&from_msgid=2247487203&from_itemidx=1&count=3&nolastread=1#wechat_redirect"><strong>头条稳定性治理系列</strong></a></li></ul>]]></content>
    
    
    <summary type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;概述，目的？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;怎么进行稳定性治理，稳定性治理的体系建设？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;稳定性治理的过程？&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="稳定性" scheme="https://fenqian.xyz/tags/%E7%A8%B3%E5%AE%9A%E6%80%A7/"/>
    
    <category term="头条" scheme="https://fenqian.xyz/tags/%E5%A4%B4%E6%9D%A1/"/>
    
    <category term="阿里" scheme="https://fenqian.xyz/tags/%E9%98%BF%E9%87%8C/"/>
    
  </entry>
  
  <entry>
    <title>python-多线程</title>
    <link href="https://fenqian.xyz/posts/b7270d4a/"/>
    <id>https://fenqian.xyz/posts/b7270d4a/</id>
    <published>2021-12-29T08:32:00.000Z</published>
    <updated>2021-12-29T10:08:21.611Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">多线程是什么？</span><br><span class="line">为什么需要使用多线程，多线程的作用？</span><br><span class="line">怎么使用多线程，join方法的作用？</span><br><span class="line">python多线程弊端？</span><br><span class="line">python多线程其他机制？</span><br></pre></td></tr></table></figure><span id="more"></span><ul><li><strong>多线程是什么？</strong></li></ul><p><code>线程是程序的最小单元，程序运行时，实际是线程在解释器中执行工作；</code></p><ul><li><strong>为什么需要使用多线程，多线程的作用？</strong></li></ul><p><code>python的多线程是假的多线程，在进程中同时最多只能有一个线程在解释器中运行，这是由python的全局解释器（GIL）来控制的，具体过程为“生成gil-线程运行-线程休眠（gil上锁）-运行其他线程-再次运行此线程时（需要将上一个线程上锁，并解锁此线程）”，这种虽然是假的多线程，但是可以在一个线程等待时，运行另一个线程，使单核得到充分利用；</code></p><ul><li><strong>怎么使用多线程，join方法的作用？</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import threading</span><br><span class="line">#fun是函数，arg是参数</span><br><span class="line">t1&#x3D;threading.Thread(fun,arg)</span><br><span class="line">t1.start()</span><br><span class="line">t1.join() </span><br><span class="line">print(&quot;主线程执行&quot;)</span><br></pre></td></tr></table></figure><p>join方法的作用是子线程劫持主线程，仅当子线程执行完之后，才能执行主线程，常用于爬虫，如爬取多个资源时，使用多线程，每个子线程添加join等待，仅当爬虫子线程爬取完资源后，才能进行下一步操作（运行主线程）</p><ul><li><strong>python 多线程的弊端</strong></li></ul><p><code>python多线程的GIL机制，导致python同时只能执行一个线程，只能使用单核，在多核机器上会存在巨大的资源浪费；因此多线程多用于高IO操作，尽量避免在多cpu计算场景下使用，该场景下应使用多进程；</code></p><ul><li><strong>python多线程其他机制？</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python守护线程？</span><br></pre></td></tr></table></figure><ul><li><strong>python的守护线程？</strong><br>  <code>python主线程运行时，默认会等待子线程运行结束后主线程才能结束，但我们可以在子线程启动前，将子线程添加到守护线程里，这样的话哪怕该守护子线程未结束，只要主线程结束了，守护线程也会跟着结束；   </code>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import threading</span><br><span class="line">#fun是函数，arg是参数</span><br><span class="line">t1&#x3D;threading.Thread(fun,arg)</span><br><span class="line">t1.setDaemon(True)#设置守护线程必须在该子线程执行前</span><br><span class="line">t1.start()</span><br><span class="line">t1.join() </span><br><span class="line">print(&quot;主线程执行&quot;)#主线程结束后，子线程会跟着结束，不会执行</span><br><span class="line"></span><br><span class="line">线程的其他常用方法：</span><br><span class="line"></span><br><span class="line">run():  线程被cpu调度后自动执行线程对象的run方法</span><br><span class="line">start():启动线程活动。</span><br><span class="line">isAlive(): 返回线程是否活动的。</span><br><span class="line">getName(): 返回线程名。</span><br><span class="line">setName(): 设置线程名。</span><br><span class="line"></span><br><span class="line">threading模块提供的一些方法：</span><br><span class="line">threading.currentThread(): 返回当前的线程变量。</span><br><span class="line">threading.enumerate(): 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。</span><br><span class="line">threading.activeCount():返回正在运行的线程数量，与len(threading.enumerate())有相同的结果。</span><br></pre></td></tr></table></figure></li></ul><p>总结：python的多线程支持多任务，但多任务并不支持并行运行（同时运行），只是利用了cpu的多道技术，支持任务的切换；</p>]]></content>
    
    
    <summary type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;多线程是什么？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;为什么需要使用多线程，多线程的作用？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;怎么使用多线程，join方法的作用？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;python多线程弊端？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;python多线程其他机制？&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="python" scheme="https://fenqian.xyz/tags/python/"/>
    
    <category term="多线程" scheme="https://fenqian.xyz/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>常用app测试工具</title>
    <link href="https://fenqian.xyz/posts/28eebda3/"/>
    <id>https://fenqian.xyz/posts/28eebda3/</id>
    <published>2021-12-24T08:08:00.000Z</published>
    <updated>2021-12-27T05:59:52.896Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用app测试工具"><a href="#常用app测试工具" class="headerlink" title="常用app测试工具"></a>常用app测试工具</h1><p>常用测试工具</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">参考回答：</span><br><span class="line">功能测试自动化</span><br><span class="line">a) 轻量接口自动化测试</span><br><span class="line"></span><br><span class="line">jmeter，</span><br><span class="line"></span><br><span class="line">b) APP UI层面的自动化</span><br><span class="line"></span><br><span class="line">android：UI Automator Viewer，Android Junit，Instrumentation，UIAutomator，</span><br><span class="line"></span><br><span class="line">iOS:基于Instrument的iOS UI自动化，</span><br><span class="line"></span><br><span class="line">性能测试</span><br><span class="line"></span><br><span class="line">a) Web前端性能测试</span><br><span class="line"></span><br><span class="line">网络抓包工具：Wireshark</span><br><span class="line"></span><br><span class="line">网页文件大小</span><br><span class="line"></span><br><span class="line">webpagetest</span><br><span class="line"></span><br><span class="line">pagespeed insight</span><br><span class="line"></span><br><span class="line">chrome adb</span><br><span class="line"></span><br><span class="line">b) APP端性能测试</span><br><span class="line"></span><br><span class="line">Android内存占用分析：MAT</span><br><span class="line"></span><br><span class="line">iOS内存问题分析：ARC模式</span><br><span class="line"></span><br><span class="line">Android WebView性能分析：</span><br><span class="line"></span><br><span class="line">iOS WebView性能分析</span><br><span class="line"></span><br><span class="line">c) 后台服务性能测试</span><br><span class="line"></span><br><span class="line">负载，压力，耐久性</span><br><span class="line"></span><br><span class="line">可拓展性，基准</span><br><span class="line"></span><br><span class="line">工具：apacheAB，Jmeter，LoadRunner，</span><br><span class="line"></span><br><span class="line">专项测试</span><br><span class="line"></span><br><span class="line">a) 兼容性测试</span><br><span class="line"></span><br><span class="line">手工测试：操作系统，分辨率，rom，网络类型</span><br><span class="line"></span><br><span class="line">云平台：testin，脚本编写，Android。</span><br><span class="line"></span><br><span class="line">b) 流量测试</span><br><span class="line"></span><br><span class="line">Android自带的流量管理，</span><br><span class="line"></span><br><span class="line">iOS自带的Network</span><br><span class="line"></span><br><span class="line">tcpdump抓包</span><br><span class="line"></span><br><span class="line">WiFi代理抓包：Fiddler</span><br><span class="line"></span><br><span class="line">流量节省方法：压缩数据，json优于xml；WebP优于传统的JPG，PNG；控制访问的频次；只获取必要的数据；缓存；</span><br><span class="line"></span><br><span class="line">c) 电量测试</span><br><span class="line"></span><br><span class="line">基于测试设备的方法，购买电量表进行测试。</span><br><span class="line"></span><br><span class="line">GSam Battery Monitoe Pro</span><br><span class="line"></span><br><span class="line">iOS基于Instrument Energy工具</span><br><span class="line"></span><br><span class="line">d) 弱网络测试</span><br><span class="line"></span><br><span class="line">手机自带的网络状况模拟工具</span><br><span class="line"></span><br><span class="line">基于代理的弱网络的模拟:</span><br><span class="line"></span><br><span class="line">工具：windows：Network Delay Simulator</span><br><span class="line"></span><br><span class="line">Mac：Network Link Conditioner</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;常用app测试工具&quot;&gt;&lt;a href=&quot;#常用app测试工具&quot; class=&quot;headerlink&quot; title=&quot;常用app测试工具&quot;&gt;&lt;/a&gt;常用app测试工具&lt;/h1&gt;&lt;p&gt;常用测试工具&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="app测试" scheme="https://fenqian.xyz/tags/app%E6%B5%8B%E8%AF%95/"/>
    
    <category term="工具" scheme="https://fenqian.xyz/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>

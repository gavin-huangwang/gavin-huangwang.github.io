<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fen Qian Web</title>
  
  <subtitle>HELLO,YOU</subtitle>
  <link href="https://fenqian.xyz/atom.xml" rel="self"/>
  
  <link href="https://fenqian.xyz/"/>
  <updated>2023-07-09T17:08:53.133Z</updated>
  <id>https://fenqian.xyz/</id>
  
  <author>
    <name>GAVIN HUANG</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>质量体系系列</title>
    <link href="https://fenqian.xyz/posts/6696d0e/"/>
    <id>https://fenqian.xyz/posts/6696d0e/</id>
    <published>2023-07-07T11:21:00.000Z</published>
    <updated>2023-07-09T17:08:53.133Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>测试的核心价值在于保障产品的质量，提效增质；要全面的保障质量，就需要一个完善的体系，从各方面入手来保障产品的质量，本次将以传易互联--音乐项目的质量保障体系进行分析，从而探索质量保障体系的设计</code></p><h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">传易音乐质量保障体系</span><br><span class="line">质量保障体系的设计理念</span><br><span class="line">质量保障体系落地</span><br><span class="line">传音音乐质量保障体系理想版</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="传音音乐质量保障体系"><a href="#传音音乐质量保障体系" class="headerlink" title="传音音乐质量保障体系"></a>传音音乐质量保障体系</h2><p><code>质量保障体系是为具体业务服务的，因此需要结合业务特色设计，好的质量保障体系是兼顾质量、效率、成本，的一种综合性的设计</code></p><h3 id="传易音乐业务特点"><a href="#传易音乐业务特点" class="headerlink" title="传易音乐业务特点"></a>传易音乐业务特点</h3><p><code>传易音乐提供面向非洲主要国家的，音频流媒体服务（音乐+音频直播）；主要由内容端+产品端+数据端+直播业务+商业化业务构成；主要特点是服务国家多，语种人群多，终端设备复杂，产品交付链路复杂，基于这种复杂的海外业务特点，质量保障体系，需要兼顾各类复杂场景</code></p><h3 id="传音音乐产品交付体系"><a href="#传音音乐产品交付体系" class="headerlink" title="传音音乐产品交付体系"></a>传音音乐产品交付体系</h3><p><code>传易音乐的产品交互体系如下；参与方主要有产品、设计、开发、测试、项目管理人员；整个链路主要基于tapd平台来进行管理追溯，项目主要由项目管理人员协调跟踪，通过在线excel表格来排期和维护进度。整个链路整体合理，各方都有参与；但也有不足之处，问题如下：</code><br><img src="/text_image/%E4%BC%A0%E6%98%93%E4%BA%92%E8%81%94%E4%BA%A4%E4%BB%98%E4%BD%93%E7%B3%BB.png" alt="alt text"><br><strong>交互体系的缺陷</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">对用户来说：我们的产品设计风格变动极大，几乎每一个大版本风格都有极大变化；广告太多；不太稳定；</span><br><span class="line">业务：业务缺乏全局的规划，重点经常变；比如这个季度重点发力会员，下个季度就是游戏，突然重心又在广告，产品方面也是，这种混乱局面会导致一系列问题，出现这种问题的原因个人觉得还是管理层对音乐业务了解并不够深；</span><br><span class="line">需求：由于公司是由业务主导的，业务的混乱导致需求没有一个全局的规划，业务方经常会介入研发过程，会导致开发中断，转而开发新的需求；但后期项目方和业务进行了沟通后，需求由三方（项目、业务、产品）协商准入，并于每周四统一进行需求评审，一定的解决了插入问题；</span><br><span class="line">价值：由于公司内部博弈剧烈，且需求没有一个全局的规划，导致整个产品的风格变动频繁，未有效形成产品自身的品牌，且需求的价值无法量化，投入产出比无法量化分析；</span><br><span class="line">研发：需求无全局规划，研发的人员波动很大，经常会出现项目开发到一半，就出现人员抽调情况，导致原有排期受阻；不过研发在每个季度都有大方向的规划，一般是偏向架构/稳定性/成本把控的，基本都能有效落地；</span><br><span class="line">业务排期：开发/测试，排期极度紧张，且每个人手上同时期基本上都有三四个需求，导致业务很难复盘，资料/能力很难总结，人浮于事的后果就是，整个过程很难实现量化，投入产出比很难分析；且研发虽然在架构方面有大的规划，但过于紧张的人效和时间，导致落地会大打折扣，导致上线产品容易出现性能/稳定性问题；</span><br><span class="line">测试：测试方面在年度季度都会有规划，基本就是我于年终/季度末提交下一季度的规划，这些规划会转变为部门的okr由我负责完成（21年的时候，我手底下还有两个人一般意义上是由我这个组来完成），但由于从21年中开始，公司持续在裁员（一起负责测试架构的另外两个同事被裁了），且公司业务中心变动极大，我又开始负责广告业务，基本没有时间完成规划，只有在管理层有需求时，如（预装需求，必须要做稳定性）；线上出现严重性能问题（必须要进行性能治理），才有一段较时间来完成特定的非业务需求；</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="传易音乐质量保障体系分析"><a href="#传易音乐质量保障体系分析" class="headerlink" title="传易音乐质量保障体系分析"></a>传易音乐质量保障体系分析</h3><p><code>传易质量保障体系在全面保障质量的情况下，还需要兼顾成本和效率；同时由于海外业务的复杂性，主要是非洲网络环境较差，普遍都是2/3G网络，终端环境配置较低；因此在设计质量保障体系时需要兼顾这种复杂场景。现有质量保障体系如下：</code></p><p><img src="/text_image/%E4%BC%A0%E6%98%93%E9%9F%B3%E4%B9%90%E8%B4%A8%E9%87%8F%E4%BF%9D%E9%9A%9C%E4%BD%93%E7%B3%BB.png" alt="alt text"><br><strong>质量保障体系的缺陷</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">质量保障体系，未做量化分析改造，无数据产出及呈现，很难量化价值；</span><br><span class="line">且体系未制定细化的标准，效果很难衡量；</span><br><span class="line">体系缺乏完整/长期的规划，未能有效的实施和优化；</span><br><span class="line">部分环节/工具，落地不到位，效果不佳，如UI自动化，接口自动化等；</span><br><span class="line">缺失归纳整理，无wiki资料库，能力很难输出和传递；</span><br><span class="line">工具很散乱，未做平台化集成；</span><br></pre></td></tr></table></figure><h2 id="质量保障体系的设计理念"><a href="#质量保障体系的设计理念" class="headerlink" title="质量保障体系的设计理念"></a>质量保障体系的设计理念</h2><p><code>质量保障体系，需要遵循全面保障质量；有效平衡质量、效率、成本的理念设计；需要做到质量有数据可量化、有标准可衡量、能落地有效果、可传承可输出使用成本低</code></p><p><strong>设计理念</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">有标准可衡量</span><br><span class="line">有能力有效果</span><br><span class="line">有数据可量化</span><br><span class="line">可传承可输出使用成本低,能兼顾成本、效率、质量</span><br></pre></td></tr></table></figure><p><img src="/text_image/%E9%98%BF%E9%87%8C%E8%B4%A8%E9%87%8F%E4%BF%9D%E9%9A%9C%E4%BD%93%E7%B3%BB.png" alt="alt text"></p><h3 id="质量标准"><a href="#质量标准" class="headerlink" title="质量标准"></a>质量标准</h3><p><code>质量的标准简单理解就是不出问题，因此对问题的定义，就是对质量标准的定义；我们一般要考虑功能、稳定性、性能（前后端/系统性能）,易用性，因此质量标准的建立抓手就是业务，只有基于业务建立细致完善的质量标准才有意义，而有了标准体系才能有效运转</code></p><p><strong>传易音乐的质量标准</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">以季度为周期，责任主体是按流程、事故原因分担的；一般的功能性故障必现且是主流程的测试承担100%责任（严重级别），用例漏测同理；非主流程的或非必现的且出现概率较高的，严重级别低一级，测试承担主要责任，开发次之；非测试环境出现的问题或发布导致的问题，开发和测试均摊责任；性能或者稳定性问题，视问题类型，来界定责任主体，此类问题测试只承担次要责任；同时问题持续时间，影响范围，也会影响问题的严重性和责任主体；</span><br><span class="line">每年度制定功能性问题合规标准、性能、系统稳定性问题的合规标准；并根据影响时长，影响范围，严重程度来划分问题等级，问题由项目经理统一收纳，并记录责任主体，在季度末由此数据来影响kpi分值；</span><br><span class="line">提测标准，业务主流程功能ok,自测用例执行通过；</span><br><span class="line">测试通过标准，尽量保证无bug遗留或无严重级别/普通级别的bug遗留；同时根据业务类型来确定，功能、性能、稳定性、安全、兼容性、回归策略是否通过；</span><br><span class="line">验收标准，测试不参与标准制定；但会提交一份验收用例给产品、设计、业务方，是否通过验收由他们自行决定；</span><br></pre></td></tr></table></figure><p><strong>不足</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">标准制定的不够细致，只有大的框架；</span><br><span class="line">质量问题，只有线上严重级别的问题才会收纳、复盘；且通过在线excel维护；没有形成长期的工作，数据太少，无法持续分析，很难通过数据来进一步优化；</span><br><span class="line">整个标准落地执行不到位，尤其是提测&#x2F;验收的标准未严格实施；其针对标准不执行的情况，没有成文的解决方案，很难长期有效针对此类问题暴露风险；</span><br></pre></td></tr></table></figure><p><strong>参考</strong><br><img src="/text_image/%E8%B4%A8%E9%87%8Fgoc%E6%A0%87%E5%87%86.png" alt="alt text"></p><h4 id="合理的质量标准"><a href="#合理的质量标准" class="headerlink" title="合理的质量标准"></a>合理的质量标准</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">标准必须要成文，可落地的，既有大框架，也有细则且与业务贴合的；</span><br><span class="line">必须要数据支持，不建议通过一个简单的excel维护，必须要成习惯，有长期数据；</span><br><span class="line">标准必须要在每个阶段都有（自测/测试/验收/线上），且标准不仅限制于事上，对人员，流程都要有要求；</span><br><span class="line">标准必须要有效，要和kpi、升职加薪结合；</span><br></pre></td></tr></table></figure><h3 id="覆盖范围"><a href="#覆盖范围" class="headerlink" title="覆盖范围"></a>覆盖范围</h3><p><code>理论上质量保障体系要全面的保障质量，方方面面都要覆盖，但实际工作中要均衡考虑</code><br><strong>范围</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">流程：流程把控，流程优化</span><br><span class="line">测试环节：codereview、单元、集成、系统</span><br><span class="line">类别：性能、兼容、稳定性、监控、功能、安全</span><br></pre></td></tr></table></figure><h3 id="测试能力建设"><a href="#测试能力建设" class="headerlink" title="测试能力建设"></a>测试能力建设</h3><p><code>能力建设，一般是指自动化、工具或平台研发能力；但实际项目过程中，协作能力也很重要,这里讲讲工具/平台的价值</code></p><p><strong>工具/平台价值</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">解决手动测试无法解决的事，如稳定性测试；</span><br><span class="line">自动化测试执行是按固定逻辑来的，能实现执行标准的统一；</span><br><span class="line">提效，可用于解决大量的重复性工作的场景，节省人力，提高效率；</span><br><span class="line">有数据，可溯源；有利于沉淀数据和能力，精准的分析解决问题；</span><br></pre></td></tr></table></figure><p><strong>质量保障体系三要素：质量活动、工具平台、质量流程</strong></p><p><code>以下按这三块来分别讲述质量体系的构建</code></p><h4 id="质量活动及测试执行"><a href="#质量活动及测试执行" class="headerlink" title="质量活动及测试执行"></a>质量活动及测试执行</h4><p><code>在测试策略方面保障质量；主要有两种思路①根据问题设计策略，②分析流程来设计策略 </code></p><h5 id="根据问题来设计策略"><a href="#根据问题来设计策略" class="headerlink" title="根据问题来设计策略"></a>根据问题来设计策略</h5><p><code>发现问题，分析问题，从而预防问题</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">需要一个记录问题的‘小本本’，记录下问题、然后分析问题（做复盘，是共性、还是特定问题、是否经常出现）、然后设计策略来预防此类问题；如app经常崩溃，那么质量活动需要包含此类检测；</span><br><span class="line">可以拉取最近一年的线上数据分析，来发现问题；</span><br></pre></td></tr></table></figure><h5 id="分析流程来设计策略"><a href="#分析流程来设计策略" class="headerlink" title="分析流程来设计策略"></a>分析流程来设计策略</h5><p><code>研发过程中的各流程都有可能出问题，本着早发现早解决的原则，在各流程设置卡点，来规避风险，同时各环节也可以设置多条防线，全面的保障质量</code><br><strong>如以下情况</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Case1: 业务有很复杂的业务人员配置流程，这个环节会引入业务配置问题，可以在这个环节后定制质量活动，如配置规则校验，配置预跑等。   </span><br><span class="line"></span><br><span class="line">Case2: 业务在运行时仍有新机构/新商户接入环节，可以定制质量活动，如新接入时进行联调验证、性能压测。</span><br><span class="line"></span><br><span class="line">Case3: 业务有间隔性的数据跑批环节，那么在每次数据跑批结束后，可以定制质量活动，在每次跑批后做结果验证。典型业务有日切，月账单生成，关键报表生成等。</span><br></pre></td></tr></table></figure><h4 id="工具平台建设"><a href="#工具平台建设" class="headerlink" title="工具平台建设"></a>工具平台建设</h4><p><code>建设工具平台，需要把握好成本和收益；至于如何平衡成本和收益，我的想法是这样的；有些工具是必须的如预装的压测，这种成本不是重点，先必须做出来；但有些比如前端功能测试，研发成熟的ui自动化成本比较高，那可以先考虑部署开源的成熟的产品（或者先手工替代，提前做好回归用例的有效性分析来降低成本）</code><br><strong>具体实施</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">先保障基础的平台有，如组织协作的平台，bug管理平台，代码托管平台；</span><br><span class="line">分析缺口，必要的工具优先做,但要保证效果（覆盖率，发现率，召回率，准确率等），效果越好越有价值；</span><br><span class="line">非必要的一般是提效的工具，在进一步拆分工作，分析日常工作中各快工作的耗时，以及未来的一个占比，优先覆盖重复性强场景；</span><br><span class="line">提效工具要做好性价比综合分析，对比人力或其他工具，当新开发工具的成本（一次性开发成本和维护性成本的考量：接入成本、迁移成本、培训成本、每次使用成本、维护升级成本）相对于收益有明显优势时才有价值；</span><br></pre></td></tr></table></figure><h4 id="质量流程"><a href="#质量流程" class="headerlink" title="质量流程"></a>质量流程</h4><p><code>质量流程要平衡好质量防控，和效率；要贴合业务、研发体系来设计；并且要结合实际情况，及时调整</code></p><h3 id="质量保障体系落地"><a href="#质量保障体系落地" class="headerlink" title="质量保障体系落地"></a>质量保障体系落地</h3><p><code>在具体落地的过程中，要把控好，质量、成本、效率，做好均衡来设计具体的质量策略</code><br><strong>具体落地的策略</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">具体的质量策略，要结合业务；最好结合业务数据，做量化分析制定；</span><br><span class="line">评估质量、效率、成本现行情况，做好平衡；</span><br><span class="line">具体的策略，能保障项目的一致性，形成共识，实现质量标准化；</span><br></pre></td></tr></table></figure><p><strong>举例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">比如，质量保障体系规定了要做灰度发布，那么怎样做灰度发布？质量策略可以进一步规定执行细节：至少要包含从1%-&gt;10%-&gt;50%-&gt;100%四个阶梯的灰度，且灰度时长不小于2小时。</span><br><span class="line"></span><br><span class="line">再比如，质量保障体系约定了低风险项目可开发自测，那么质量策略可以进一步定义低风险项目包括bug fix，页面展示修改类项目等。</span><br><span class="line"></span><br><span class="line">再比如，质量保障体系要求回归测试要完整，那么质量策略可以进一步定义完整回归的具体要求：全部P0P1用例(不区分手工自动化) or 全部自动化用例 or 人工评估的所有场景用例 or 代码变更分析的所有自动化用例 等。</span><br></pre></td></tr></table></figure><p><strong>质量工具/平台具体落地的策略</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">提效；要综合提效；代码不是目的，提效才是；</span><br><span class="line">要有具体落地的场景，结合上文分析的质量活动、防线，一个质量工具平台最好能锁定某个稳定存在的质量活动、防线作为服务对象，以保证质量工具平台自身的存续性；</span><br><span class="line">维护/使用/培训成本也需要考虑；</span><br><span class="line">设计时要考虑能力沉淀和输出，最大化工具的价值；</span><br><span class="line">要尊重历史积累，考虑历史工具数据沉淀和价值挖掘；</span><br><span class="line">避免重复造轮子；要做到工具平台信息的充分共享、及时刷新，避免因信息不足导致的重复造轮子，其次在有同类工具平台新建初期，及时发起评审，确定定位和发展路线，避免发展成已有轮子的复制品。最后，要在大横向组织里阶段性review同领域工具平台，做好顶层设计（定向发展or关停并转）；</span><br><span class="line">要做好工具的服务推广，工具的价值在于使用；</span><br><span class="line">要保证工具平台体系的持续发展；服务好业务和需求，阶段性考虑质量工具平台的整合、共建、打通，串联形成工具平台体系，形成一致性的服务体系；</span><br></pre></td></tr></table></figure><h3 id="传音音乐质量保障体系理想版"><a href="#传音音乐质量保障体系理想版" class="headerlink" title="传音音乐质量保障体系理想版"></a>传音音乐质量保障体系理想版</h3><p><code>质量保障体系是用来保障质量的，没问题或者问题变少了就是最大的价值,具体来看</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">通过量化数据分析，质量问题，通过结果来确定质量保障体系的价值；</span><br><span class="line">分析具体的问题和结果，有问题就能找到体系薄弱点，进一步优化；结果好，也需要确认价值在哪，是否能进一步细化深化优化；</span><br><span class="line">最后分析质量工具平台的支撑度和技术价值，针对性的实现价值量化可呈现；</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;测试的核心价值在于保障产品的质量，提效增质；要全面的保障质量，就需要一个完善的体系，从各方面入手来保障产品的质量，本次将以传易互联--音乐项目的质量保障体系进行分析，从而探索质量保障体系的设计&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;大纲&quot;&gt;&lt;a href=&quot;#大纲&quot; class=&quot;headerlink&quot; title=&quot;大纲&quot;&gt;&lt;/a&gt;大纲&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;传易音乐质量保障体系&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;质量保障体系的设计理念&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;质量保障体系落地&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;传音音乐质量保障体系理想版&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="质量体系" scheme="https://fenqian.xyz/tags/%E8%B4%A8%E9%87%8F%E4%BD%93%E7%B3%BB/"/>
    
  </entry>
  
  <entry>
    <title>广告--大数据模型测试</title>
    <link href="https://fenqian.xyz/posts/d775e226/"/>
    <id>https://fenqian.xyz/posts/d775e226/</id>
    <published>2023-06-20T15:48:00.000Z</published>
    <updated>2023-07-09T07:58:21.610Z</updated>
    
    <content type="html"><![CDATA[<p><code>模型是程序化广告的灵魂，决定着广告的点击和转化，直接影响收入；而模型由于复杂度高，标签/数据量大，是广告测试的难点，一般意义上，测试是不负责模型质量的，仅对模型中的一些定向/过滤逻辑做覆盖，模型有效性测试，模型工程师一般是通过灰度/ab测试来实现自测的，这种自我监督的实现方式有着明显缺陷，故本次对过往模型测试方面的记录，做下总结</code></p><h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">常规测试方案</span><br><span class="line">调研测试方案</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="常规测试方案"><a href="#常规测试方案" class="headerlink" title="常规测试方案"></a>常规测试方案</h2><p><code>模型由于数据量大，且计算的复杂度极高，一般测试不参与测试；大数据研发测试模型质量的常用方式，主要有离线指标分析，灰度流量评估的方式；这两种方式的有效性都比较低。其中离线指标分析，一般是单条数据或者指标的分析，覆盖的场景较少；而灰度流量评估的方式也存在数据量小，场景单一，且不同场景无法横向对比的问题，且评估效果太主观，无法量化和追溯。</code></p><h2 id="调研测试方案"><a href="#调研测试方案" class="headerlink" title="调研测试方案"></a>调研测试方案</h2><p><code>本次调研了testerhome上面同业们的处理方式；思路，主要是对模型处理的各环节进行监控，然后对各环节的处理逻辑进行复盘，对中间数据进行分析，设置阈值，记录数据及异常值，同时通过流量回放的方式来横向评估效果；难点不少，首先模型的因子众多，需要监控的指标极多，同时模型训练时，样本数据极多，需要时间和机器成本，如果规模较小，收益会比较低。</code></p><h3 id="广告模型链路"><a href="#广告模型链路" class="headerlink" title="广告模型链路"></a>广告模型链路</h3><p><code>基于链路分析，设计监控指标，进行对比</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">数据来源</span><br><span class="line">特征提取</span><br><span class="line">离线训练</span><br><span class="line">模型构建</span><br><span class="line">发布上线</span><br><span class="line">效果评估</span><br></pre></td></tr></table></figure><h3 id="参考监控指标"><a href="#参考监控指标" class="headerlink" title="参考监控指标"></a>参考监控指标</h3><p><code>监控指标需要根据具体情况实现</code><br><img src="/text_image/%E6%A8%A1%E5%9E%8B%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87.png" alt="alt text"></p><h3 id="效果横向对比"><a href="#效果横向对比" class="headerlink" title="效果横向对比"></a>效果横向对比</h3><p><code>模型的效果通过流量回放的方式来触发，通过横向多维度对比来评估效果，监控的效果类的指标如下</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">机器学习相关</span><br><span class="line">AUC</span><br><span class="line">COPC</span><br><span class="line">LOGLOSS</span><br><span class="line">PCTR</span><br><span class="line">准确率</span><br><span class="line">召回率</span><br><span class="line">ROC 曲线</span><br><span class="line">业务相关</span><br><span class="line">实时收入</span><br><span class="line">CTR</span><br><span class="line">CVR</span><br><span class="line">CPM</span><br><span class="line">特征效果相关</span><br><span class="line">IV</span><br><span class="line">WOE</span><br><span class="line">特征变现变化</span><br><span class="line"></span><br><span class="line">效果数据横向对比</span><br><span class="line">不同阶段的对比</span><br><span class="line">阶段一致性对比</span><br><span class="line">时间维度</span><br><span class="line">版本对比</span><br><span class="line">分桶</span><br><span class="line">分adx    </span><br></pre></td></tr></table></figure><h3 id="模型发布依赖监控"><a href="#模型发布依赖监控" class="headerlink" title="模型发布依赖监控"></a>模型发布依赖监控</h3><p><code>模型发布依赖环节的监控，是全流程监控的一部分</code><br><img src="/text_image/%E6%A8%A1%E5%9E%8B%E5%8F%91%E5%B8%83%E4%BE%9D%E8%B5%96.png" alt="alt text"></p><h3 id="360模型监控平台的其他功能"><a href="#360模型监控平台的其他功能" class="headerlink" title="360模型监控平台的其他功能"></a>360模型监控平台的其他功能</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">查询</span><br><span class="line">自定义场景查询</span><br><span class="line">配套表格数据</span><br><span class="line">线上部署记录查询</span><br><span class="line">对比</span><br><span class="line">同环比数据</span><br><span class="line">不同模型对比</span><br><span class="line">不同版本对比</span><br><span class="line">在线配置</span><br><span class="line">基础属性配置</span><br><span class="line">特征项管理</span><br><span class="line">报警阈值配置</span><br><span class="line">监控信号阈值配置</span><br><span class="line">交互友好</span><br><span class="line">更新记录可查</span><br><span class="line">前端性能</span><br></pre></td></tr></table></figure><p><strong>示例页面</strong><br><img src="/text_image/%E5%8F%82%E8%80%83%E9%A1%B5%E9%9D%A2.png" alt="alt text"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;模型是程序化广告的灵魂，决定着广告的点击和转化，直接影响收入；而模型由于复杂度高，标签/数据量大，是广告测试的难点，一般意义上，测试是不负责模型质量的，仅对模型中的一些定向/过滤逻辑做覆盖，模型有效性测试，模型工程师一般是通过灰度/ab测试来实现自测的，这种自我监督的实现方式有着明显缺陷，故本次对过往模型测试方面的记录，做下总结&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;大纲&quot;&gt;&lt;a href=&quot;#大纲&quot; class=&quot;headerlink&quot; title=&quot;大纲&quot;&gt;&lt;/a&gt;大纲&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;常规测试方案&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;调研测试方案&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="广告" scheme="https://fenqian.xyz/tags/%E5%B9%BF%E5%91%8A/"/>
    
    <category term="模型" scheme="https://fenqian.xyz/tags/%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>职业--传易工作总结</title>
    <link href="https://fenqian.xyz/posts/c184c696/"/>
    <id>https://fenqian.xyz/posts/c184c696/</id>
    <published>2023-06-01T06:14:00.000Z</published>
    <updated>2023-06-06T15:30:06.133Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>2020/9月入职传易，2023/6月离职，近三年的工作回顾；含工作内容，职场</code></p><h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">工作</span><br><span class="line">职场</span><br><span class="line">总结&#x2F;反思</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p><strong>前后工作内容经历了，音乐服务端测试/大数据侧功能测试/广告业务测试/自动化体系建设</strong></p><h3 id="测试能力建设"><a href="#测试能力建设" class="headerlink" title="测试能力建设"></a>测试能力建设</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">测试自动化</span><br><span class="line">服务性能测试</span><br><span class="line">客户端性能测试</span><br><span class="line">客户端稳定性</span><br><span class="line">CD能力建设</span><br></pre></td></tr></table></figure><h4 id="测试自动化"><a href="#测试自动化" class="headerlink" title="测试自动化"></a>测试自动化</h4><p><code>自动化能力，按我的理解应该属于研发CD体系中的重要一环，核心是提效/保障质量；但实现目标不仅仅需要自动化能力，云，研发体系，产品交互体系，线上质量保障体系，都是为了最终目标服务的</code></p><h5 id="单元自动化–代码审查"><a href="#单元自动化–代码审查" class="headerlink" title="单元自动化–代码审查"></a>单元自动化–代码审查</h5><p><code>代码质量保障，主要由开发负责，主要是引入代码检查框架，在编码/合并时暴露问题，以及在代码进行部署时，通过Jenkins调度审查策略实现代码覆盖</code><br><strong>实现</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">开发团队通过Junit各自负责单测代码</span><br><span class="line">开发团队，针对新/大模块，核心代码，邀请运维，技术负责人，相关测试进行代码审查</span><br><span class="line">针对，代码合并，发布有严格的审核机制，和自审查机制</span><br></pre></td></tr></table></figure><h5 id="集成自动化–接口测试"><a href="#集成自动化–接口测试" class="headerlink" title="集成自动化–接口测试"></a>集成自动化–接口测试</h5><p><img src="/text_image/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96.png" alt="alt text"><br><strong>优缺点</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">实现/维护成本低</span><br><span class="line">定制化程度低</span><br><span class="line">无法对问题溯源，无法定位问题</span><br><span class="line">总结：在运维有使用普罗米修斯对接口做监控的情况下，仅对回归测试有效果，意义不大</span><br></pre></td></tr></table></figure><h5 id="系统自动化–UI自动化"><a href="#系统自动化–UI自动化" class="headerlink" title="系统自动化–UI自动化"></a>系统自动化–UI自动化</h5><p><code>UI层级的自动化，是典型的功能自动化；核心点在于页面操作，页面元素的检查；难点在于稳定性和灵活性；常见的应用场景有功能回归，ui遍历，暴力操作</code></p><h6 id="ui自动化"><a href="#ui自动化" class="headerlink" title="ui自动化"></a>ui自动化</h6><p><img src="/text_image/ui%E6%9E%B6%E6%9E%84.png" alt="alt text"><br><img src="/text_image/UI%E8%87%AA%E5%8A%A8%E5%8C%96.png" alt="alt text"></p><h6 id="ui录制回放"><a href="#ui录制回放" class="headerlink" title="ui录制回放"></a>ui录制回放</h6><p><code>录制回放的核心点，在于怎么将录制信息转换成用例，已及回放时的用例反序列化操作</code><br><strong>优缺点</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">优点是，可维护，可定制化</span><br><span class="line">现行脚本缺点是，稳定性较差；维护成本高，实用性差，代码耦合度高，可扩展性差</span><br></pre></td></tr></table></figure><h4 id="服务性能测试"><a href="#服务性能测试" class="headerlink" title="服务性能测试"></a>服务性能测试</h4><p><code>压测的依据是模拟线上的（极端）环境施压，以求将问题暴露出来；操作上基于对业务和架构的了解，试探性加压，到达瓶颈点之后，结合资源消耗，压力变化，处理能力等分析瓶颈点，并针对瓶颈进行验证，对优化后结果进行校验</code><br><strong><a href="https://docs.qq.com/s/EV0o-FmljRU-VIBxtTWYCW">压测报告合集</a></strong><br><strong>优缺点</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">通过Jenkins调度jmeter加压，可对每次的结果进行维护/推送，灵活方便，也可以进行持续集成</span><br><span class="line">缺点也很多，首先需要结合其他的监控，比如skywalking/普罗米修斯，查看结果及维护不方便</span><br><span class="line">其次需要专门的性能环境，成本极高</span><br><span class="line">由于事先不清楚瓶颈点，需要一点点加压，试探性的去找瓶颈，效率较低</span><br></pre></td></tr></table></figure><h4 id="客户端性能测试"><a href="#客户端性能测试" class="headerlink" title="客户端性能测试"></a>客户端性能测试</h4><p><code>客户端性能测试，和服务端理念上是相同的，都是模拟线上操作来进行施压，以求问题前置暴露；区别在，施压方式，监控指标上</code><br><strong>难点</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">模拟线上操作较难，我前期是通过性能狗实现的，性能狗收费后，通过solopi来操作</span><br><span class="line">监控数据采集难度不小，由于客户端不像服务端，存在skywalking，这类注入式全生命周期的监控工具，在监控数据采集上，仅能基于adb命令或者开源工具提供的能力，采集的成本较高，尤其是像耗时</span><br><span class="line">分析/定位问题的成本较高，内存、cpu问题，需要查看堆栈，且都需要dump数据，dump数据分析的难度也较大，尤其是在无应用错误抛出时，分析定位问题，极其的依赖经验，成本很高</span><br></pre></td></tr></table></figure><ul><li><strong><a href="https://www.bujiaban.xyz/tags/%E7%A8%B3%E5%AE%9A%E6%80%A7/">客户端性能合集</a></strong></li></ul><h4 id="客户端稳定性"><a href="#客户端稳定性" class="headerlink" title="客户端稳定性"></a>客户端稳定性</h4><p><code>稳定性，是性能的子类；因为一般在极端场景下，稳定性问题才能暴露，稳定性问题常见的有crash/anr/内存泄露/oom等</code><br><strong>核心</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">异常场景的挖掘是核心，这块需要在整个产品的生命周期入手；我现在的思路，主要是依赖传音的成熟能力（标准）设计覆盖场景，同时基于功能体验，项目组同事反馈，线上反馈，分析可能存在问题的点，来设计覆盖场景</span><br><span class="line">操作上，主要通过定制monkey,ui遍历，暴力回放等实现覆盖</span><br><span class="line">实施工具，主要是monkey,solopi,字节的fastbot,各有利弊，总的来说，monkey是最灵活，且成本最低</span><br></pre></td></tr></table></figure><ul><li><strong><a href="https://www.bujiaban.xyz/tags/%E7%A8%B3%E5%AE%9A%E6%80%A7/">客户端性能合集</a></strong></li></ul><h4 id="CI-CD能力建设"><a href="#CI-CD能力建设" class="headerlink" title="CI/CD能力建设"></a>CI/CD能力建设</h4><p><code>持续集成/持续交互/持续部署；一体化的研发体系需要依赖众多的外部能力，这快主要由研发和运维实现；核心组件有，Jenkins，服务中间件，云原生及K8S，gitlab，监控能力（skywalking/普罗米修斯/zabbix）</code></p><h4 id="质量体系建设"><a href="#质量体系建设" class="headerlink" title="质量体系建设"></a>质量体系建设</h4><p><code>高效的质量体系，必然是高产出，能全面覆盖产品生命周期的，且有效率的；这不是一个平台或者一个脚本就能实现的；需要深入研发体系中，结合公司情况，输出符合实际的测试能力</code><br><strong>核心</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">需要有话语权，有能力推动体系前进；能获取资源，能取得其他部门的信任和合作</span><br><span class="line">自动化能力是有效的，有产出，有回报的，这要求这块的建设是要符合项目需求，可持续迭代的</span><br><span class="line">针对核心问题需要有回溯机制，针对问题或者能力需要能深化总结成组内标准，如果不能形成标准，就不可复用和推广，则意义不大</span><br><span class="line">测试能力需要能集成进研发体系中，因为测试本质还是为研发体系服务的，如果不能集成，则产出有限</span><br></pre></td></tr></table></figure><h3 id="广告业务测试"><a href="#广告业务测试" class="headerlink" title="广告业务测试"></a>广告业务测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">boomplay客户端广告</span><br><span class="line">boomplay web广告</span><br><span class="line">sdk广告</span><br><span class="line">web js广告</span><br><span class="line">自营广告</span><br><span class="line">聚合广告</span><br><span class="line">谷歌定制广告</span><br><span class="line">程序化广告</span><br><span class="line">广告归因</span><br></pre></td></tr></table></figure><p><strong><a href="https://www.processon.com/view/link/645a0dddfb0ea17d3a90b724">广告业务架构</a></strong><br><strong>广告推荐架构</strong><br><img src="/text_image/ad%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F.png" alt="alt text"></p><h3 id="音乐大数据能力测试"><a href="#音乐大数据能力测试" class="headerlink" title="音乐大数据能力测试"></a>音乐大数据能力测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">版权音乐资源同步</span><br><span class="line">埋点数据ETL（kafka/flink）</span><br><span class="line">数据报表</span><br><span class="line">音乐推荐</span><br><span class="line">广告推荐</span><br><span class="line">标签系统</span><br></pre></td></tr></table></figure><h4 id="音乐资源同步"><a href="#音乐资源同步" class="headerlink" title="音乐资源同步"></a>音乐资源同步</h4><h4 id="埋点数据ETL"><a href="#埋点数据ETL" class="headerlink" title="埋点数据ETL"></a>埋点数据ETL</h4><h4 id="数据报表"><a href="#数据报表" class="headerlink" title="数据报表"></a>数据报表</h4><h4 id="音乐推荐"><a href="#音乐推荐" class="headerlink" title="音乐推荐"></a>音乐推荐</h4><h4 id="广告推荐"><a href="#广告推荐" class="headerlink" title="广告推荐"></a>广告推荐</h4><h4 id="标签系统"><a href="#标签系统" class="headerlink" title="标签系统"></a>标签系统</h4><p><strong>大数据架构</strong><br><img src="/text_image/biddate.png" alt="alt text"><br><strong>数仓架构</strong><br><img src="/text_image/bigdate_%E6%95%B0%E4%BB%93%E6%9E%B6%E6%9E%84.png" alt="alt text"><br><strong>数据架构</strong><br><img src="/text_image/bigdata_%E6%95%B0%E6%8D%AE%E6%9E%B6%E6%9E%84.png" alt="alt text"></p><ul><li><strong>横向数据分层</strong><br><img src="/text_image/%E6%A8%AA%E5%90%91%E6%95%B0%E6%8D%AE%E5%88%86%E5%B1%82.png" alt="alt text"></li><li><strong>纵向数据分层</strong><br><img src="/text_image/%E7%BA%B5%E5%90%91%E6%95%B0%E6%8D%AE%E5%88%86%E5%B1%82.png" alt="alt text"><br><strong>推荐系统</strong><br><img src="/text_image/boomplay_biddate%E6%8E%A8%E8%8D%90.png" alt="alt text"></li></ul><h3 id="音乐服务端功能测试"><a href="#音乐服务端功能测试" class="headerlink" title="音乐服务端功能测试"></a>音乐服务端功能测试</h3><p><strong>C端服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1️⃣网关服务</span><br><span class="line">2️⃣首页内容服务</span><br><span class="line">3️⃣推荐服务</span><br><span class="line">4️⃣内容基础服务</span><br><span class="line">5️⃣计数服务</span><br><span class="line">6️⃣埋点服务（通用异步）</span><br><span class="line">⑦播客服务</span><br><span class="line">8️⃣账户服务</span><br><span class="line">9️⃣订阅服务</span><br><span class="line">1️⃣0️⃣分布式ID获取服务（资源）</span><br><span class="line">1️⃣1️⃣FCM消息推送服务</span><br><span class="line">1️⃣2️⃣BUZZ服务</span><br><span class="line">1️⃣3️⃣活动服务</span><br><span class="line">1️⃣4️⃣内部消息服务</span><br><span class="line">1️⃣5️⃣电商服务</span><br><span class="line">1️⃣6️⃣游戏服务</span><br><span class="line">1️⃣⑦广告服务</span><br></pre></td></tr></table></figure><p><strong>服务架构</strong><br><img src="/text_image/boomplay_server.png" alt="alt text"><br><img src="/text_image/boomplay_server2.png" alt="alt text"><br><strong>服务db模型</strong><br><img src="/text_image/boomplay_server_db.png" alt="alt text"><br><strong>B端服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">oms</span><br><span class="line">cms</span><br><span class="line">ams</span><br><span class="line">ads</span><br><span class="line">ssp</span><br><span class="line">adx</span><br></pre></td></tr></table></figure><h2 id="职场"><a href="#职场" class="headerlink" title="职场"></a>职场</h2><h3 id="魅族"><a href="#魅族" class="headerlink" title="魅族"></a>魅族</h3><p><code>在魅族工作一年左右离职，离职的原因是疫情期间，魅族现金流出现了严重问题，周围同事纷纷离职，于是离职，另某出路；</code><br><code>在期间遇到过一些问题：领导批判，主动性不够，不能及时的暴露问题；实际情况是，项目线上遇到的问题，如产品需求设计有误，项目上线代码合并有误，或者带bug上线（bug已暴露），等会归咎于测试；</code><br><code>结合其他同事的工作情况反思，主要是由于；自己本身有一些瑕疵（如自己偶尔会迟到，且有一些摸鱼行为），同时本身和小组长关系不太好，由于这些瑕疵，导致领导不太信任自己；同时自己在项目中存在感太低，没有话语权，导致一些本身和测试无关的问题，也会压在测试身上，从而将问题带给组长，形成了负面循环；</code></p><h3 id="传易"><a href="#传易" class="headerlink" title="传易"></a>传易</h3><p><code>传易工作三年左右，职场也不太顺利；研发部老大对我意见很大，期间直属上级提了两次升职，都被他给打回去了；</code><br><code>导致上述状况的原因有几点，我工作状态比较懒散（说是我因为经常躺在椅子上工作），经常迟到，经常到花园摸鱼，工作产出不够，出了一些事；</code><br><code>总的来说，还是因为我个人的风格，陆总不太喜欢，然后把压力传导给了我的直属上级，然后工作中得不到支持，处处碰壁，且自己产出也不够；</code></p><h2 id="总结-反思"><a href="#总结-反思" class="headerlink" title="总结/反思"></a>总结/反思</h2><h3 id="专业"><a href="#专业" class="headerlink" title="专业"></a>专业</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">职业规划，未来还是要走专业路线，期望的发展方向还是devops和性能岗；但这类岗位较少，因此我在求职时，在核心突出的前提下，测开的各细分方向，我都需要有了解；</span><br><span class="line">职业技能方面，尤其是编码能力，算法能力，大数据架构能力，是我后续前进的方向；</span><br></pre></td></tr></table></figure><h3 id="职场-1"><a href="#职场-1" class="headerlink" title="职场"></a>职场</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">过去两份工作，由于自己在工作中有明显的瑕疵，导致容易授人以柄，因此对于后续的工作，一定要严抓职场纪律，不能迟到，最好在领导到之前到达公司，且不能有明显的问题被人拿捏；</span><br><span class="line">工作中，不受领导青睐，对于测开/架构类工作，工作是无法开展的；因此后续工作还是要和领导走近一点，要会来事，捧人，同时入职时，也要考虑下上级的为人，有些领导我是注定无法在他们手底下工作的；</span><br><span class="line">工作中，产出是核心，如果没有产出，专业素养不过关，注定得不到重视，获取不到话语权和资源；</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;2020/9月入职传易，2023/6月离职，近三年的工作回顾；含工作内容，职场&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;大纲&quot;&gt;&lt;a href=&quot;#大纲&quot; class=&quot;headerlink&quot; title=&quot;大纲&quot;&gt;&lt;/a&gt;大纲&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;工作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;职场&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;总结&amp;#x2F;反思&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="工作" scheme="https://fenqian.xyz/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="传易" scheme="https://fenqian.xyz/tags/%E4%BC%A0%E6%98%93/"/>
    
  </entry>
  
  <entry>
    <title>New Jobs</title>
    <link href="https://fenqian.xyz/posts/7eb8636e/"/>
    <id>https://fenqian.xyz/posts/7eb8636e/</id>
    <published>2023-04-20T11:38:28.000Z</published>
    <updated>2023-05-30T15:51:47.965Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p><code>    通过二个月的冲刺，达到准高级工程师水准，进入大厂（BAT/TMDJKXB)；预期岗位是大厂的中级测开岗，或者广告/音乐/金融类的高级业务测试岗；大厂有包就行，小厂的核心产出岗；</code><br><code>    测开岗方向，主要集中在流程（devops）/服务（稳定性，性能）/自动化（ui/接口/单测）/脚本工具类（打杂，项目需要啥，开发啥）/可视化（也是流程类，不过主要集中在数据和工作流程方面），最具有发展前途的是devops和服务岗，这是真正能有产出的岗位；自动化也就是平台工具化和可视化工具，基本是一体的，小公司认为的自动化一般是这种，就业面广；脚本侠，和业务测试其实区别不大；</code></p><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">目标企业</span><br><span class="line">企业要求</span><br><span class="line">完成规划</span><br><span class="line">面试模拟</span><br><span class="line">过往归纳</span><br><span class="line">反思总结</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="目标企业"><a href="#目标企业" class="headerlink" title="目标企业"></a>目标企业</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">百度</span><br><span class="line">阿里</span><br><span class="line">lazada</span><br><span class="line"> 网商银行  </span><br><span class="line">腾讯</span><br><span class="line">腾讯音乐</span><br><span class="line">微众银行</span><br><span class="line">头条</span><br><span class="line">滴滴</span><br><span class="line">美团</span><br><span class="line">京东</span><br><span class="line">拼多多</span><br><span class="line">小红书</span><br><span class="line">快手</span><br><span class="line">网易</span><br><span class="line">携程</span><br><span class="line"></span><br><span class="line">手机厂</span><br><span class="line">华为</span><br><span class="line">荣耀</span><br><span class="line">oppo&#x2F;一加</span><br><span class="line">vivo</span><br><span class="line">小米</span><br><span class="line">魅族</span><br><span class="line">传音</span><br><span class="line">    </span><br><span class="line">汽车厂</span><br><span class="line">比亚迪</span><br><span class="line">特斯拉</span><br><span class="line">广汽埃安</span><br><span class="line">上汽</span><br><span class="line">宝马&#x2F;奔驰&#x2F;奥迪    </span><br><span class="line">小鹏</span><br><span class="line">蔚来</span><br><span class="line">理想</span><br><span class="line">其他车企</span><br><span class="line">    </span><br><span class="line">其他制造业</span><br><span class="line">大疆</span><br><span class="line">顺丰</span><br><span class="line">满帮</span><br><span class="line">货拉拉</span><br><span class="line">    </span><br><span class="line">金融+银行+券商    </span><br><span class="line">外企 </span><br><span class="line">海外</span><br><span class="line">虾皮</span><br><span class="line">shenin</span><br><span class="line">大厂出海</span><br><span class="line">头条-tiktok</span><br><span class="line">头条-汽水音乐</span><br><span class="line">拼多多-TEMU</span><br><span class="line">快手-kwai</span><br><span class="line">万兴</span><br><span class="line">大宇无限</span><br><span class="line">anker</span><br><span class="line">        </span><br><span class="line">其他</span><br><span class="line">b站</span><br><span class="line">贝壳</span><br><span class="line">用友</span><br><span class="line">boss直聘</span><br><span class="line">360</span><br><span class="line">微博 </span><br><span class="line">唯品会</span><br><span class="line">爱奇艺    </span><br><span class="line">阅文</span><br><span class="line">达达</span><br><span class="line">知乎</span><br><span class="line">金山</span><br><span class="line">喜马拉雅</span><br><span class="line">同城艺龙</span><br><span class="line">汽车之家</span><br><span class="line">欢聚时代</span><br><span class="line">微盟</span><br><span class="line">陌陌</span><br><span class="line">有赞</span><br><span class="line">斗鱼</span><br><span class="line">虎牙</span><br><span class="line">哈罗</span><br><span class="line">得物</span><br><span class="line">soul</span><br><span class="line">keep</span><br><span class="line">涂鸦    </span><br><span class="line">浪潮</span><br><span class="line">商汤</span><br><span class="line">云从</span><br><span class="line">旷视</span><br><span class="line">依图</span><br><span class="line">猎豹</span><br><span class="line">美图</span><br><span class="line">奇安信</span><br><span class="line">华润</span><br><span class="line">    </span><br><span class="line">国企   </span><br><span class="line">人工智能</span><br><span class="line">chatgpt</span><br><span class="line">币圈</span><br></pre></td></tr></table></figure><h3 id="企业要求"><a href="#企业要求" class="headerlink" title="企业要求"></a>企业要求</h3><p><strong>为人</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">会问面试者印象深刻的工作，主要考虑是否会在工作中思考，以及解决复杂问题的思路；</span><br><span class="line">味道&#x2F;风格和公司以及团队是否匹配,即是否认可公司的价值观；</span><br><span class="line">性格是不是积极向上的。主动、乐观、皮实；</span><br><span class="line">应聘的人有潜力么，成长性怎么样，也很重要；</span><br><span class="line">1️⃣评判潜力的准则就是：工作年限是否与工作能力相匹配。锚点就是你身边的同事，一个个去比，心里就会有数。 回想一下，你在他这个年龄的时候，是比他好，还是比他差？对于工作年限比较长的应聘者，一定要看应聘者是不是在一个方向已经钻了足够的深度。如果没有，大概率不具备潜力。</span><br><span class="line">应聘者的意愿，与岗位需要完全匹配，因此面试前一定要先了解岗位；</span><br><span class="line">来公司的动机；</span><br><span class="line">诚信一票否决。如果发现明显的不诚信，一定一票否决；</span><br><span class="line">可能会问一些逻辑思维题，考察思维的灵活性，人是否聪明。</span><br><span class="line"></span><br><span class="line">个人特质：快速学习、系统性学习、学以致用、系统性思考、强大的推动力、技术思维、突出的沟通能力、条理性、抗压性、乐观精神、抗挫折能力、迅速调整的能力、迭代改进的意识、ownership、团队合作、愿景和规划。 这些特性体现人的内核，有强大内核的人，做什么都行，技能暂时不足，也一定能补足。所以，在招聘的时候往往对是否录用的判断起决定性作用；</span><br><span class="line">    </span><br><span class="line">其他综合能力：</span><br><span class="line">1️⃣很好的项目管理能力，至少与开发经理能力同级，甚至要强于他；</span><br><span class="line">2️⃣一定的软件架构能力，只有熟悉架构，才能优化架构，发现问题；</span><br><span class="line">3️⃣一定的产品 sense：可以跟一个资深的产品经理能够顺畅的交流，明白知道他为什么会这么想，所要实现产品的意义，路径；从产品质量方面的考虑要超过产品经理，给他输出；</span><br><span class="line">4️⃣团队管理能力（这个太重要）；</span><br><span class="line">5️⃣目标管理能力；</span><br><span class="line">6️⃣有优良的品质（看上面），会捧人；</span><br></pre></td></tr></table></figure><p><strong>处事</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">招聘岗位需要什么样的人，匹配最重要，此岗位那些技能是重点，会着重考量；</span><br><span class="line">会着重问简历中的问题，而且会扩展，主要考量深度，还有诚信；</span><br><span class="line">项目经验：是否有正规的项目组工作经验：理解敏捷的工作模式，有良好的开发习惯，有和项目组良好的协作、沟通能力；是否对原有参与建设的业务系统的业务有一个完整的理解，需要有案例；</span><br><span class="line">项目需要体现复杂性，匹配度，需要在项目中体现自己的价值；</span><br><span class="line">技术根底：对应的技术栈是否有与工作年龄匹配的深度。举例：一个做 Java 业务开发 3~5 年的程序员应该对 Java 的基础知识（Core Java 书里的所有知识点），在设计模式，业务建模， 性能调优等一个或者几个点，有比较深的理解；有很强的故障定位及排除能力；能够熟练使用 Java 常见的框架，如 Spring 等；读过部分流行框架源码等。</span><br><span class="line">系统思考的能力，是否有模块化，体系化的思考能力。</span><br><span class="line">技能方面，考虑一个问题：应聘的同学能够提升团队平均技能的水位线么？如果不是，招聘对你团队的整体收益就会打折。除非应急，否则还是尽量招聘能够提升团队水位线的人，这很重要；</span><br><span class="line"></span><br><span class="line">基础知识，基础知识是底子，读下这两本书（《高级软件测试设计》《高级软件测试管理》），明白常问的，业务性问题背后的深意(PS:WT看案例)：</span><br><span class="line">1️⃣如果测试时间不够，你会怎么办？ </span><br><span class="line">2️⃣如果让你去测试一个你完全不熟悉的系统，你会怎么办？</span><br><span class="line">3️⃣你平时会使用那些测试设计方法？</span><br><span class="line"></span><br><span class="line">业务知识积累：</span><br><span class="line">1️⃣体现业务知识积累的全局观,全局观架构师很重要的一点；</span><br><span class="line">2️⃣业务遇到的问题,解决的问题也是重要的积累；</span><br><span class="line">3️⃣技术角度上，你要能够画得出来系统的交互图；</span><br><span class="line">4️⃣熟悉最核心的接口和最核心的参数；</span><br><span class="line">5️⃣能够读懂开发的代码，熟练使用 trace 和监控工具，诊断定位线上问题到代码行；</span><br><span class="line">《The little black book on Test Design（海盗派测试分析）》看这本书学习测试思维的套路；</span><br><span class="line"></span><br><span class="line">熟练掌握一门开发语言，也就是python：</span><br><span class="line">1️⃣系统学习过 Java 的教程，高频面试 50 题 这样的题可以自测一下，可以回答上 35 个以上；</span><br><span class="line">2️⃣熟悉最主流的 Spring 框架，能够写出一个简单的网站，实现基础的 Restful 服务；</span><br><span class="line">3️⃣读懂过一个测试框架，如 mockito 或者 Junit 的源码；</span><br><span class="line">4️⃣能够熟练实施接口测试（基于一些测试框架 如：rest-assured+Junit）；</span><br><span class="line">5️⃣能够读懂开发的业务代码，对他们的代码进行 Code Review；</span><br><span class="line">   </span><br><span class="line">精通语言的标准：</span><br><span class="line">1️⃣还拿 Java 来说吧：熟练使用 Java 的常见 API；</span><br><span class="line">2️⃣深入理解基于语言特性&#x2F;系统特性的知识，如 Collections 的实现机制、类型系统、I&#x2F;O、网络、多线程等；</span><br><span class="line">3️⃣熟知设计模式（广义范围的设计模式，不局限于 GOF 的设计模式）；</span><br><span class="line">4️⃣熟悉 JVM 的工作模式；熟练使用调试排查工具解决性能问题；</span><br><span class="line">5️⃣熟练掌握市面上常见的脚手架；</span><br><span class="line">6️⃣熟练掌握周边知识（OPs 相关，网络知识相关）有不错的实战开发经验（做过真正被生产检验的东西）；</span><br><span class="line">对于测试开发，AOP，Java 字节码技术是很重要的知识。。。</span><br><span class="line">8️⃣达到能胜任普通的开发岗位。</span><br><span class="line">   </span><br><span class="line">效能：</span><br><span class="line">1️⃣你能够举一个你用技术手段提高测试效率，增强测试能力的例子么？这是面试时最大的一个坎,因为太大，需要有明显的可量化的效能很难，环境、CI、数据、测试用例生成、数据比对的很小的一些点上，都能有不错的提效产出，从这些点能够做得好，会得到不错的加分。用明确的小案例证明价值也是可行的；</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">高级职位的其他要求：</span><br><span class="line">1️⃣计算机领域知识的通盘理解，高级岗位要求，各块，基本都要了解一点</span><br><span class="line">2️⃣计算机网络：基本的网络链路需要了解，http协议tcp&#x2F;ip协议需要吃透（推荐图解tcp&#x2F;ip）(图解http)</span><br><span class="line">3️⃣linux服务器，需要会使用基本的命令，要能在特定的性能场景定位问题；需要能读写shell,同时云原生的ks常见架构要了解，需要能简单的部署，和使用。并且能利用与测试提效；</span><br><span class="line">4️⃣数据库知识：市面常见数据库（redis，mysql，oracle）的常见 DBA 操作，问题排查；SQL 的熟练使用；</span><br><span class="line">5️⃣Web 及移动端知识：能够懂 HTML，CSS，能够读懂 Javascript 代码，能够读懂 Android 或者 iOS 的代码，做简单开发最好；</span><br><span class="line">6️⃣安全知识：常见的安全防护方法、工具使用；基本的安全攻防原理；</span><br><span class="line">软件工程&#x2F;开发过程管理：实战中各种磨练，建议系统的学习 PMP，敏捷开发的一些认证课程。</span><br><span class="line"></span><br><span class="line">有核心竞争力：</span><br><span class="line">1️⃣个人在职业技能方面要有核心竞争力，有自己的品牌优势，要在简历中体现；</span><br><span class="line">2️⃣移动端测试要有在相应端的开发能力；能读懂业务代码，完成部分页面代码的走查；能对移动端测试特性，有完整可落地的自动化工具栈实现能力，如监控工具栈（如友盟、bugly、newrelic 等）、内存泄露检测、卡顿检测、耗电量、弱网、流量、埋点、灰度、版本控制、兼容性、用户体验、安全等等的质量保障；</span><br><span class="line">3️⃣具体来说，就是能解决具体的问题，比如对降低崩溃率有通篇的方案；</span><br></pre></td></tr></table></figure><h3 id="企业JD"><a href="#企业JD" class="headerlink" title="企业JD"></a>企业JD</h3><p><em>腾讯</em></p><p><strong>测开岗</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">本科及以上学历，计算机或相关专业，具备扎实的计算机和软件技术基础</span><br><span class="line">2 年及以上开发 或者 测试开发 工作经验，技术栈至少满足以下技术项中的一项或者多项：</span><br><span class="line">1️⃣熟悉 Android&#x2F;iOS 移动操作系统，具备终端的自动化测试工具或性能测试等项目开发经验；熟悉Java&#x2F;OC&#x2F;Swift 等至少一门编程语言；</span><br><span class="line">2️⃣熟悉 go&#x2F;C++&#x2F;java 等至少一种后台主流编程语言，熟悉至少一门脚本开发语言（如 shell、python）；</span><br><span class="line">3️⃣熟悉 linux 平台下服务器调试开发；对缓存、存储、并发等场景有一定的测试开发经验；熟悉微服务架构并能独立开发后台服务，熟悉大数据开发及应用；</span><br><span class="line">4️⃣熟悉前端开发基础知识，熟练掌握 CSS，JS，HTML 语言，至少熟练掌握一个前端 MVVM 框架（React、Vue最佳），具备丰富的前端项目开发经验；</span><br><span class="line">5️⃣三年以上软件开发经验，能熟悉掌握和运用 C&#x2F;C++&#x2F;Python 等任何一门主流编程语言；</span><br><span class="line">6️⃣在测试自动化、平台研发、web 自动化、报表分析、静态分析、开发调试工具、框架设计和分布式系统等领域中，有涉及到一项或多项相关的实践经验；</span><br><span class="line">具有发现问题的灵敏嗅觉，具备针对复杂问题的分析和解决的能力；</span><br><span class="line">8️⃣熟悉 JS ES6 Webpack Vue 有加分；</span><br><span class="line">9️⃣业务项目中，应用行业前沿的优秀的工程实践经验，提升研发和工程生产力和效率；</span><br><span class="line">1️⃣0️⃣设计、构建和落地自动化构建、测试和发布的工程基础设施；</span><br><span class="line">1️⃣1️⃣驱动研发团队落实优秀的代码规范、代码设计原则和高质量的测试；</span><br><span class="line">1️⃣2️⃣分析和定位复杂系统耦合关系，梳理跨团队分工协作，以提升系统可测试性；</span><br><span class="line"></span><br><span class="line">个人特质：</span><br><span class="line">1️⃣具备良好的学习能力、复杂问题定位和分析能力；具备创新性思维、较强的抗压能力和技术钻研能力；</span><br><span class="line">2️⃣具备扎实的编程基本功，具备一定的项目架构设计能力；</span><br><span class="line">3️⃣对 devops 工程效能实践有深入理解和实践经验者优先；</span><br><span class="line"></span><br><span class="line">【腾讯会议测试开发工程师（深圳&#x2F;广州&#x2F;北京）】</span><br><span class="line">工作职责：</span><br><span class="line"></span><br><span class="line">1️⃣参与腾讯会议及相关音视频产品进行专项测试工具能力建设设计及开发工作；</span><br><span class="line">2️⃣参与产品研发效能工具的开发工作；</span><br><span class="line">3️⃣建设产品自动化测试体系，提升团队的工作效率；</span><br><span class="line">4️⃣评估引入外部先进工作方法或技术，服务团队； 工作要求</span><br><span class="line">5️⃣计算机、通信相关专业本科及以上学历， 2 年以上社会工作经验；</span><br><span class="line">6️⃣熟悉软件开发的流程、工具及相关技能；</span><br><span class="line">7掌握数据结构，数据库，操作系统，网络等基础知识；</span><br><span class="line">8️⃣熟练掌握至少一门开发语言，编译或者脚本语言均可；</span><br><span class="line">9️⃣有自动化测试系统开发经验者优先；</span><br><span class="line">1️⃣0️⃣了解音频、视频相关知识，熟悉音质、画质、时延、卡顿等测试内容者优先考虑</span><br></pre></td></tr></table></figure><p><strong>业务岗</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">对云服务、分布式计算、大数据处理等有深刻架构理解和测试经验；</span><br><span class="line">对 Linux&#x2F;Unix 操作系统、TCP&#x2F;IP 网络协议、NoSQL 等都有比较深入的理解和实践经验；</span><br><span class="line">具备自动化测试经验，深刻理解自动化平台和持续集成体系建设者优先；</span><br><span class="line">有丰富性能、协议或白盒测试经验者优先；</span><br><span class="line"></span><br><span class="line">【腾讯会议高级测试工程师（深圳&#x2F;广州&#x2F;北京）】</span><br><span class="line">工作职责：</span><br><span class="line">1️⃣负责腾讯会议产品的质量保障工作，以及专项测试技术、效能工具和平台等相关工作；</span><br><span class="line">2️⃣推进各端自动化体系、专项测试体系、工具平台的建设和优化，持续提升测试效率；</span><br><span class="line">3️⃣推动整个研发团队的质量意识，在保障高质量的同时通过 devops 提升研发效能。</span><br><span class="line">工作要求：</span><br><span class="line">1️⃣计算机相关专业本科以上学历，有两年及以上测试开发工作经验；</span><br><span class="line">2️⃣能通过最新的技术手段来保障和改进产品质量 ，有音视频或会议相关大型项目测试开发实践者优先考虑；</span><br><span class="line">3️⃣深入掌握测试体系、测试流程和测试技术，能通过测试技术提升效率；</span><br><span class="line">4️⃣对质量体系、流程、测试风险把握，测试范畴的定义有很好的理解和应用，独立承担过大型项目测试负责人，能够通过有效的手段、流程和方法推进产品测试开展，把控产品质量；</span><br><span class="line">5️⃣熟悉功能测试方法和设计，掌握分层测试， CICD 等测试建设手段；</span><br><span class="line">6️⃣良好的沟通能力和团队协作能力。能从整个研发的角度出发，对研发流程和研发效率的改善提出落地方案。</span><br></pre></td></tr></table></figure><p><em>百度</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps</span><br></pre></td></tr></table></figure><p><em>阿里</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">至少 3 年以上工作经验</span><br><span class="line">本科及以上学历，硕士生，研究生，博士生更佳</span><br><span class="line">精通C、C++、Java、Python 等至少一种编程语言</span><br><span class="line">熟悉软件研发流程，掌握软件测试理论和方法，有设计和开发测试工具和自动化测试框架能力更佳</span><br><span class="line">喜欢钻研技术，对质量捍卫有热情，不断追求产品用户体验的完善</span><br><span class="line">善于沟通，善于团队合作</span><br><span class="line"></span><br><span class="line">【[杭州] 阿里巴巴 CBU 技术部 招聘 高级测试开发工程师 &#x2F; 测试开发专家】</span><br><span class="line">职位要求：</span><br><span class="line"></span><br><span class="line">1️⃣两年以上互联网及传统行业的测试开发经验，对软件质量保障有体系化的思考和经验。能够面对复杂情况建立体系化的软件质量控制的策略和模型，并且有大型项目成功实践的经验；</span><br><span class="line">2️⃣具备业务或测试技术（自动化、性能、安全、用户体验、稳定性等）某方面的专长，具有一定的业务建模能力或测试技术预研、选型、设计开发、统一规划的能力；</span><br><span class="line">3️⃣具备抽像提炼测试技术的共性问题，主导业务线相关领域的测试系统建设，持续发现和解决重大系统、业务问题；</span><br><span class="line">4️⃣优秀的代码实现能力，精通 C&#x2F;C++, JAVA, Python 等编程语言之一，并有实际项目代码经验;</span><br><span class="line">5️⃣逻辑能力强、思维活跃，接受新事物能力强；责任心强，积极主动，善于沟通，良好的团队合作能力；良好英文沟通能力；</span><br><span class="line">6️⃣大型互联网名企经验优先，数据和算法测试经验优先。</span><br><span class="line"></span><br><span class="line">【[北京][杭州] 阿里云存储测试开发 P6~P8 核心团队内推】</span><br><span class="line"></span><br><span class="line">1️⃣传播测试理念，设计 CI&#x2F;CD 流程，指导研发工程师持续快速地交付产品特性；</span><br><span class="line">2️⃣根据业务需求，设计和开发测试工具，包括自动化测试框架、持续回归平台、性能测试工具、资源管理工具等；</span><br><span class="line">3️⃣参与某个存储产品的测试工作，制定和实施测试计划，保障被测系统高质量发布上线；</span><br><span class="line">4️⃣针对测试和发布流程提出改进意见，提升研发工程师的幸福感。</span><br><span class="line"></span><br><span class="line">职位要求：</span><br><span class="line">1️⃣计算机本科以上相关专业，三年以上工作经验；</span><br><span class="line">2️⃣有互联网后端 、存储或网络产品自动化测试经验，有系统化的测试分析和设计能力；</span><br><span class="line">3️⃣熟悉 Linux 操作系统、熟练使用 shell 和 python 编程语言；</span><br><span class="line">4️⃣具备很强的逻辑思维能力和较高的分析、处理问题的能力，熟练的文档、沟通表达和辅导技巧；</span><br><span class="line">5️⃣善于团队合作，理解和适应变化，以结果和行动为准则，努力追求成功。​</span><br></pre></td></tr></table></figure><p><em>字节</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">_京东_</span><br><span class="line">```bash</span><br></pre></td></tr></table></figure><p><em>拼多多</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">_美团_</span><br><span class="line">```bash</span><br></pre></td></tr></table></figure><p><em>小红书</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">_快手_</span><br><span class="line">```bash</span><br></pre></td></tr></table></figure><p><em>网易</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">先熟悉jd,招聘肯定是有明确的岗位的，先明确岗位要什么，自己是否和岗位匹配，如匹配，面试时需要表现出匹配点；</span><br><span class="line">&quot;味道&quot;,这个人和公司，和你所在的团队是否 “味道一致”? 如果不一致，需要看一下应聘者的适应能力和适应意愿。举几个例子：如果公司强调的是 “协同” 和 “Ownership”，习惯把自己的工作框边界划的特别死的人就很难适应；如果公司强调流程、严谨，非常 free sytle 的人就会很难适应。如果公司有明确的层级感，特别习惯扁平化合作关系的人就会不适应。无有好坏，只有适合还是不适合。不同类型公司培养出来的人这方面差距是非常大的。招聘的时候，一定考虑我们公司的价值观，还有公司的味道。应聘者是否适应，是否喜欢；要明确自己是否适合该企业的企业文化，上级的管理文化，薪资差距不大，优先选择自己能接受的；</span><br><span class="line">技能方面，新jd大概率技能水平会大于团队平均水平线，如果面试对技能要求过低，对项目和公司的技能水平存疑；</span><br><span class="line">意愿需要和岗位匹配，没公司愿意招个几天就走的人；</span><br><span class="line">一定要表现出诚信，不诚实，可能会让人觉得你每一句话都是假的；</span><br><span class="line">要熟悉自己的简历，学会反问，大厂尤其喜欢由表及里的问答来考虑深度；</span><br><span class="line">询问面试者最成功的经历，还有最痛苦的失败。可以考察他能够完成一件事情的能力，考察他对以往工作是否有比较深刻的思考。如果对以往工作从来没有深刻思考，未来大概率也不会有。如果没有成功经历，工作时间又很长，很大概率未来也不会有。</span><br><span class="line">案例&#x2F;故事:要有证明能力的勋章</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="面试案例"><a href="#面试案例" class="headerlink" title="面试案例"></a>面试案例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">1️⃣你所在的 team 总在被开发抱怨测试用的时间太长。如何能缩短一下测试时间呢？</span><br><span class="line">通过调研，发现测试小伙伴诟病的最多的就是环境不可用。环境到底多不可用呢？</span><br><span class="line">你基于 Grafana 和 Prometheus 做了一个环境可用的监控报表，使用后，发现环境在工作日整体可用率只有 35% 左右，主要原因是：几个核心热点应用经常挂了没人管。</span><br><span class="line">你拉了整个 team，明确了部署责任人，约定了部署规则：只能中午饭和晚饭时间部署，并且部署后要自己看一下是不是 OK。</span><br><span class="line">一周后，环境可用度上升到了 65%。再深入分析，发现 2 个同学不守规矩，总是他们在破坏规则，你去找他们单独谈话。</span><br><span class="line">一周后，环境可用度上升到了 80%。还是有少量人不守规矩。</span><br><span class="line">你找 SRE 的同学提需求，做了部署卡点，非部署时间部署必须 TL 审批。</span><br><span class="line">一周后，环境可用度上升到了 85%。有些 TL 也不守规矩。</span><br><span class="line">你建了个报警，环境乱部署，坏掉了，在大团队的群里 @ 全体，告知谁搞坏了环境。</span><br><span class="line">一周后，环境可用度达到了 92%。</span><br><span class="line">你加了一个 feature：应用挂了一段时间无人响应，自动重启服务功能，仍然有问题，就自动回滚上一版本。</span><br><span class="line">你推动了开发解决了某个应用启动时间过长的问题。</span><br><span class="line">你推动了环境分组。</span><br><span class="line">你推动了测试环境版本上线的规范流程实施。</span><br><span class="line">你推动了冒烟自动化用例卡点。</span><br><span class="line">你推动了环境部署人备份机制。</span><br><span class="line">你推动了全员基础环境部署培训。</span><br><span class="line">你总结了部署手册。</span><br><span class="line">你做了。。。。。</span><br><span class="line">最后，环境可用度稳定到了 97% 以上。你为测试节省了 60% 以上 block 时间（原来可用度为 35%）</span><br><span class="line"></span><br><span class="line">2️⃣上面的问题，除了环境，还有一个槽点：开发提测质量不高。测试的头几天，很多主流程都走不通，导致测试总是在等待，或者是跟着开发一起联调。而这段时间，已经被习惯性的认为是测试时间了，因为：提测了。</span><br><span class="line"></span><br><span class="line">你推动了：测试提供冒烟用例，开发必须完成一定程度的自测才能提测。</span><br><span class="line">你推动了：测试和开发做自动化同期共建，在开发过程中，核心功能就被自动化用例保护起来了。</span><br><span class="line">你推动了：开发切分 feature 提测，而不是攒一个大招一下子提一坨。</span><br><span class="line">你推动了：代码 Codereview 变成团队常规活动，QA 在早期跟进核心代码，把问题坑杀在萌芽阶段。</span><br><span class="line">你推动了：外部资源联调非常早的进行，不会让它在测试后期成为测试 blocker。</span><br><span class="line">。。。</span><br><span class="line"></span><br><span class="line">3️⃣你发现测试时间长，QA 自己也有问题。</span><br><span class="line"></span><br><span class="line">你推动了：有明确的测试计划，并让所有干系人都有明确的预期。</span><br><span class="line">你推动了：测试依据风险测试，最大的风险得到最快的 cover，科学分配时间，明显缩短 bug 反馈时间弧。</span><br><span class="line">你推动了：bug 严格管理，所有重要 bug 都及时修复。</span><br><span class="line">你推动了：良好的沟通和汇报机制，每天让团队主要干系人清晰的知道，距离发布还差多远。</span><br><span class="line">你推动了。。。。</span><br><span class="line"></span><br><span class="line">你能讲出自己做过 5 个以上这样的成功例子，我敢保障，你会被 1 线大厂疯抢。职级基本都是专家起。</span><br><span class="line"></span><br><span class="line">持续学习能力和复杂问题解决能力</span><br><span class="line">4️⃣：</span><br><span class="line">你近期的工作是帮助团队提升后台服务稳定性。你看到了 netflix 内部使用一个叫做 ChaosMonkey 的东西来随机对生产服务期进行攻击，而逼迫工程师提高稳定性，所以，你也实现了类似（更温和）的内部机制，推动团队稳定性的提高。</span><br><span class="line">你怎么知道这个叫做 ChaosMonkey 的东西呢？ 因为你会习惯性浏览一线厂商的技术博客，参与行业大会，关注各类新技术。持续性的养成习惯。</span><br><span class="line"></span><br><span class="line">5️⃣：</span><br><span class="line">做大规模接口自动化好难，外部数据依赖太难搞，参数构造太费劲，assert 太难写。如果能够简单的录制回放就好了。</span><br><span class="line">但是，外部依赖是个天坑，写操作 mock 也是个天坑，assert 也是个天坑。</span><br><span class="line">实际的案例是，经过几年多个团队持续不懈的填坑，阿里内部已经有应用级的录制回放工具了，数百个应用成功的是用了它，把不可能回归的任务变成了可能（上万数量级的 case 当天生成，当天投入使用，并可以分析覆盖率），自动化测试实施需要付出的工作时间革命性降低（不足原来付出时间的 10%）</span><br><span class="line"></span><br><span class="line">6️⃣某个版本的某个模块问题很多，但上线时间紧迫怎么办？</span><br><span class="line">基于风险的测试。测试的本质是抽样，时间资源总是有限的。要把资源用在刀刃上。先看看那个模块是干嘛的，是不是重要，如果出问题，影响面有多大？然后具体问题具体分析。如果是核心模块，会造成重大损失，那质量一定是不能丢的，抽调别的力量加强这块儿投入，把风险明确的传递给主要干系人，必要时延期项目。如果是非关键模块，识别出问题，可以做：设定一个最小实现目标，砍 feature，用运营&#x2F;客服的手段补足。长效方法：自动化防护网建立，让回归的时间成本、人力投入成本低下来;在项目的初期就能够一定程度的识别这种风险，早加资源，别让这种事儿变成到了最后：一坨毛病，deadline 不变。 QA 最大的一个价值就是：像探照灯一样很早的预期到风险，并同步给主要干系人。</span><br><span class="line"></span><br><span class="line">7️⃣如果测试时间不够，你会怎么办？</span><br><span class="line">仍然没有标准答案，但我比较满意的点会有：</span><br><span class="line"></span><br><span class="line">跳出这个问题，讲如何从初期避免测试时间不够，以前有过很成功的案例是很好加分项。</span><br><span class="line">懂得基于风险的测试，估算时间，设计测试策略，把最有限的时间分配在项目风险最大的地方。这是项非常重要的能力（有专业知识，请参考 ISTQB 教程）有非常成熟的形式化方法，也有非常多的实战 checklist（做过大项目的人肯定能够讲出不少条）。</span><br><span class="line">清晰让主要干系人随时知道现在项目的状态，特别是质量情况，未来可能的走势，大概什么可能达到发布状态。 QA 是一个夜间走山路汽车的大灯，他的职责就是最有效的发现项目所有的大坑，并明确的告诉司机（项目主要干系人）。这里面隐含着对沟通能力的考察，也隐含着对风险管理的能力的考察。</span><br><span class="line">一定的项目管理能力，如何让团队对现状，对现在的项目计划是否能够有效进行下去有一个清晰的认识，并且引导团队 work smart 搞定挑战。你不一定是 TL，在系统测试阶段，从某种意义上 QA 就是项目 Leader。在关键时刻，项目的成败，重要决策是否能够被做出，与负责项目的 QA 有重大关系。</span><br><span class="line">软技能：推动能力，ownership，协调能力，抗压能力，能否激励团队，给团队信心等等。</span><br><span class="line">如果应聘者谈到以前工作，可能会追问，考察其它知识点。</span><br><span class="line">只能回答出 “加班呗”，而没有其他思路的人，大概率只能 pass 了。虽然接受加班一般用人单位都比较喜欢，但没有展示出任何 QA 应有的能力，技能上肯定是不合格了。</span><br><span class="line"></span><br><span class="line">8️⃣你平时会使用那些测试设计方法？</span><br><span class="line">主要考察做测试设计的时候是否靠谱。思路是否开阔，是否收过专业训练，是否积累了自己的一套方法。仍然没有标准答案。</span><br><span class="line"></span><br><span class="line">如果只能讲出：我会等价类，边界值，然后。。。。我想想。。。想不出来了。 。。 如果再简单引导，还是无法给出更多内容，大概率会被 pass（很多应聘者都会这样）。</span><br><span class="line">如果你觉得你没有听懂这个问题，反问我，我会给你加分。</span><br><span class="line">如果你熟练掌握等价类、边界值、判定表、状态图转化、组合测试等通用方法，并能够举出一个例子来，我会给加分（最基本的东西用了）。</span><br><span class="line">如果能够给出基于被测物详细分析做测试设计的案例，我会给加很多分。</span><br><span class="line">有固定套路的人（例如 可以使用 基于 guide word 的测试设计 ）会加分。</span><br><span class="line">能够讲出自己一套方法论，并且有明确案例支撑的人会大大加分。</span><br><span class="line">能够结合自己工作侃侃而谈并说到点上的人（虽然显得比较散），也会给加分。</span><br><span class="line">测试设计本质上要回答两个问题：你的测试设计是有效的么？（是否经过测试就靠谱了，覆盖率是？）你的测试是高效的么？（是不是能够用不太多的用例高效找出主要问题，这在大规模项目里非常重要） 再往大里讲讲，“测试设计” 不仅仅包含了一些简单的方法的使用，还包含了过程活动、质量意识在里边。不展开说了，有兴趣的同学可以参考这本书The little black book on Test Design 通读 5 遍，同时把他引用的所有链接全看了。再跟你的工作联系起来，再不断的翻过来调过去揣摩、实践里边的方法，半年后，你看测试会有比现在深太多的认识。别人问你测试设计，你能给他讲 1 天。你的工作也会发生本质改变。</span><br><span class="line">还是那句话，面试主要还是考察平时的工作经验积累、思考积累、解决问题的能力的积累。</span><br><span class="line"></span><br><span class="line">9️⃣如果让你去测试一个你完全不熟悉的系统，你会怎么办？</span><br><span class="line">1.这个问题是一个开放性的问题，适合不断加入上下文来追问。那个面试官的模式很像我。😀。</span><br><span class="line">2.有上下文的持续追问是能够检验应聘者对问题有没有深入理解、简历上过去工作经历有没有水分的非常好的做法。如果只是了解皮毛，简历注水非常严重，被追问几句必然败下阵来，并且留下非常不好的印象（不诚实）。</span><br><span class="line">3.回到这个具体的问题，从这个问题出发的考察点有几个：是不是具备快速学习能力？是不是有很好的获取知识的套路（测试的过程本质上是一个学习的过程）？是不是有很强的探索精神？是不是有很强的沟通能力？是不是有不错的总结能力？</span><br><span class="line">这里并没有标准答案，但一定是有考察点的。</span><br><span class="line">4.如果你的回答里有明确的亮点，一定会加分，加分比较多，胜出的几率就很大。举几个加分的亮点的例子：</span><br><span class="line">a.我会先去直接操作和观察被测物。（比直接奔向需求要加分很多，想一下，你实际工作中，快速理解一个东西靠的是什么？肯定不是先读文档，且不说这些文档是不是能够正确的描述被测物）</span><br><span class="line">b.我依托原来的工作经验，讲出了十几种信息来源，而不是只能讲出需求：同类产品，说明书，直接操作、观察被测物，原有版本，找产品经理，找开发，找销售，运维，客服，找用户，公司知识库，历史邮件，会议纪要，原来的各种文档，代码，google，相关法规，行业标准。。。。 能够有效开动脑筋，从各种地方获取信息帮助测试的人会让人眼前一亮。 只能讲出依照需求，说不出其它的人基本上会被 pass。</span><br><span class="line">c.讲出原来几天搞定了一个从来没有经手过的系统的测试，并经受住追问，不管路子多野，多山寨，也会是加分项。</span><br><span class="line">d.能讲出克服的一个具体困难点的例子，并经受住追问，也会是加分项。</span><br><span class="line"></span><br><span class="line">追问就会转到其它问题，考察点会结合你的反馈变更。 比如那个问题：如果项目进度很赶呢？ 我的理解是要考察你有没有 “迭代” 的工作思路。 如果回答给出了快速上手的正确方法，给出了通过迭代，一边学一边加深理解，一边给出质量反馈的思路，肯定会是加分项。</span><br><span class="line">6.一般能有五六个亮点，你胜出的几率就很大了。</span><br></pre></td></tr></table></figure><p><strong>面试的初衷还是要在一个时间段内（1 小时）尽量了解应聘同学的各方面是不是适合这个岗位。应试会有些用。但最关键还是平时的积累和思考。</strong></p><p><a href="https://testerhome.com/topics/30722#reply9">大厂面试问题汇总</a></p><h3 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h3><ul><li><strong>熟悉系统，发现问题解决问题，系统学习</strong></li></ul><h3 id="完成规划"><a href="#完成规划" class="headerlink" title="完成规划"></a>完成规划</h3><p><em><strong>补全基础知识</strong></em></p><ul><li><a href="https://blog.51cto.com/u_15127510/4549327">高级软件测试分析师</a></li><li>高级软件测试管理</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p><em><strong>面试话题</strong></em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DevOps一体化研发体系：需结合自己公司的CICDCT体系进行说明,深化出他的理解</span><br><span class="line">工作中的技巧：时间不足场景/线上问题场景/绩效汇报/工作汇报的场景</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h1&gt;&lt;p&gt;&lt;code&gt;    通过二个月的冲刺，达到准高级工程师水准，进入大厂（BAT/TMDJKXB)；预期岗位是大厂的中级测开岗，或者广告/音乐/金融类的高级业务测试岗；大厂有包就行，小厂的核心产出岗；&lt;/code&gt;&lt;br&gt;&lt;code&gt;    测开岗方向，主要集中在流程（devops）/服务（稳定性，性能）/自动化（ui/接口/单测）/脚本工具类（打杂，项目需要啥，开发啥）/可视化（也是流程类，不过主要集中在数据和工作流程方面），最具有发展前途的是devops和服务岗，这是真正能有产出的岗位；自动化也就是平台工具化和可视化工具，基本是一体的，小公司认为的自动化一般是这种，就业面广；脚本侠，和业务测试其实区别不大；&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;大纲&quot;&gt;&lt;a href=&quot;#大纲&quot; class=&quot;headerlink&quot; title=&quot;大纲&quot;&gt;&lt;/a&gt;大纲&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;目标企业&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;企业要求&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;完成规划&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;面试模拟&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;过往归纳&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;反思总结&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>估值体系</title>
    <link href="https://fenqian.xyz/posts/daef770e/"/>
    <id>https://fenqian.xyz/posts/daef770e/</id>
    <published>2023-04-19T12:02:00.000Z</published>
    <updated>2023-05-31T11:53:58.513Z</updated>
    
    <content type="html"><![CDATA[<h1 id="估值体系"><a href="#估值体系" class="headerlink" title="估值体系"></a>估值体系</h1><p><code>基于唐朝的估值体系，以无风险收益率为锚，取企业近五年的扣非净利润的均值（删除最大最小值）；估算三年后的合理估值，作为买卖点的依据； </code></p><span id="more"></span><h2 id="理念"><a href="#理念" class="headerlink" title="理念"></a>理念</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">高收益的前提是持续稳定的复利，即好企业是时间的朋友，坏企业是时间的敌人</span><br><span class="line">30pe是合理估值的上限，这是由无风险收益率决定的，如果在高，买入收益就低于无风险收益率了；同理合理估值一般给到20-25，而我不买25倍以上的企业(这想法绝对是错的。只关乎个人的安全边际)；</span><br><span class="line">股权和债券的差异，主要体现在确定性和成长里；股市需要利用成长优势抵消不确定性；</span><br><span class="line">收益率=利润/本金（股价）=1/pe；合理估值的锚其实就是无风险收益率（1/无风险收益率）</span><br></pre></td></tr></table></figure><h2 id="买卖"><a href="#买卖" class="headerlink" title="买卖"></a>买卖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">理想买点：三年后合理估值*0.5</span><br><span class="line">理想卖点：min(动态市盈率50,三年后合理估值150%)</span><br><span class="line"></span><br><span class="line">买操作：20-25倍区间都能买，仅茅台在25倍pe以上买入;到达理想买点时，分三批买完剩余资金（理想买点/理想买点-5%/理想买点-10%）</span><br><span class="line">卖操作：当年预计净利润的50/55/60三次清空；（买卖点是唐朝基于无风险收益率计算，正常超出合理估值都能卖，50%其实是预留的安全边际）</span><br><span class="line">三年后合理估值=三年后预估净利率*25（具体企业具体分析，也就是pe的中分位）</span><br><span class="line"></span><br><span class="line">全指数基金买/卖点：基于无风险收益率来，但是由于不确定性，要做净利润折算，需要进行等比例折算，折算区间在5-7折</span><br><span class="line">买点：12-15pe</span><br><span class="line">卖点：25-35pe</span><br><span class="line"></span><br><span class="line">♥卖出后买全指还是留现金取决于无风险收益率（一般2倍无风险收益率即可买pe=1/无风险收益率*2，全指唐朝仅关注沪深300/恒生指数/标普500/纳斯达克100）</span><br><span class="line">♥其他时间：企业逻辑未变时，低于买点买，高于卖点卖，其他时间坐等；但需要遵循单股不超40%原则，即三五个行业，七八家公司；</span><br><span class="line">♥不要严格按买卖价来，要接受错误和风险；确定性高的企业，越偏向合理估值之下就买，确定性低的企业越偏向理想买点才买，唐朝的理念是理想买点位置一定要买完资金；</span><br></pre></td></tr></table></figure><h2 id="持仓组合"><a href="#持仓组合" class="headerlink" title="持仓组合"></a>持仓组合</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">♥腾讯+纳指50%：计划200k,余量133K</span><br><span class="line">已持仓67k,其中中概58k&#x2F;纳指9k</span><br><span class="line">腾讯计划以300均价，买入6手；高溢价时，优先使用中概换腾讯（中概大部分公司不盈利）</span><br><span class="line">1️⃣理想买点：328</span><br><span class="line">2️⃣理想卖点：1年内720</span><br><span class="line">3️⃣纳指买点：21pe</span><br><span class="line">4️⃣纳指卖点：35pe</span><br><span class="line"></span><br><span class="line">♥银行+家电25%：计划100k,余量16k</span><br><span class="line">已持仓84k,其中家电50k&#x2F;银行34k</span><br><span class="line">理想卖点&#x2F;买点：</span><br><span class="line">1️⃣招行卖点1.4-1.7pb即45.8-55.6，买点低于1.13即37左右，招商计划以28均价，买入5手</span><br><span class="line">2️⃣美的按15倍市盈率12%净利润增长，合理卖点是78(合理估值)-81.9，买点是40</span><br><span class="line">3️⃣格力按14倍市盈率7.7%净利润增长，合理卖点是58（合理估值）-71.81，买点是34</span><br><span class="line"></span><br><span class="line">♥消费15%：计划60k,余量40k</span><br><span class="line">已持仓20k,伊利20k</span><br><span class="line">理想卖点&#x2F;买点：</span><br><span class="line">1️⃣五粮液150快,理想买点150&#x2F;143&#x2F;135</span><br><span class="line">2️⃣伊利按25倍市盈率11.42%净利润增长，理想卖点60-68，理想买点21，可买点34以下</span><br><span class="line"></span><br><span class="line">♥医药10%：计划40k,余量3k</span><br><span class="line">已持仓37k,其中恒瑞20k&#x2F;ETF17K</span><br><span class="line">理想卖点&#x2F;买点：</span><br><span class="line">1️⃣恒瑞按50倍市盈率20.07%净利润增长，卖点60（合理估值）-86.85（理想卖点），买点34.7,理想买点29</span><br><span class="line">2️⃣300医药ETF计划0.42，买入7000个，卖点为0.7以上，对应300医药指数50倍以上的估值</span><br><span class="line">医药需要恒瑞和etf实现高低互换，高换低；</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;估值体系&quot;&gt;&lt;a href=&quot;#估值体系&quot; class=&quot;headerlink&quot; title=&quot;估值体系&quot;&gt;&lt;/a&gt;估值体系&lt;/h1&gt;&lt;p&gt;&lt;code&gt;基于唐朝的估值体系，以无风险收益率为锚，取企业近五年的扣非净利润的均值（删除最大最小值）；估算三年后的合理估值，作为买卖点的依据； &lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>搭建hexo博客</title>
    <link href="https://fenqian.xyz/posts/8e88d59c/"/>
    <id>https://fenqian.xyz/posts/8e88d59c/</id>
    <published>2022-12-29T07:21:34.621Z</published>
    <updated>2021-05-07T09:18:05.330Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><span id="more"></span><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1、建立github代码库</span><br><span class="line">2、下载hexo文件</span><br><span class="line">3、下载主题，更改配置使主题生效</span><br><span class="line">4、部署配置git</span><br><span class="line">5、下载git同步工具</span><br><span class="line">6、清洗旧数据，生成新的静态文件，同步静态文件至代码库（需更改hexo部署配置）</span><br><span class="line">7、域名解析，并给github代码库配置域名</span><br></pre></td></tr></table></figure><p>More info: <a href="https://zhuanlan.zhihu.com/p/26625249">参考</a></p><ul><li>related_posts: true</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>数据库性能测试</title>
    <link href="https://fenqian.xyz/posts/ab3091af/"/>
    <id>https://fenqian.xyz/posts/ab3091af/</id>
    <published>2022-11-22T02:40:47.000Z</published>
    <updated>2022-11-22T02:41:26.741Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/klb561/p/10513620.html">sysbench对mysql数据库的性能测试</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/klb561/p/10513620.html&quot;&gt;sysbench对mysql数据库的性能测试&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ui自动化分布式并行运算</title>
    <link href="https://fenqian.xyz/posts/2be91958/"/>
    <id>https://fenqian.xyz/posts/2be91958/</id>
    <published>2022-07-28T05:38:00.000Z</published>
    <updated>2022-07-28T05:39:34.160Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://cloud.tencent.com/developer/article/1974105">Gird</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1974105&quot;&gt;Gird&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="UI" scheme="https://fenqian.xyz/tags/UI/"/>
    
    <category term="gird" scheme="https://fenqian.xyz/tags/gird/"/>
    
  </entry>
  
  <entry>
    <title>优秀博客</title>
    <link href="https://fenqian.xyz/posts/bb158cde/"/>
    <id>https://fenqian.xyz/posts/bb158cde/</id>
    <published>2022-07-28T03:42:00.000Z</published>
    <updated>2022-12-29T07:30:32.131Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><ul><li><a href="https://cloud.tencent.com/developer/article/1974105">自动化专家</a></li><li><a href="https://cloud.tencent.com/developer/user/3335805/activities">性能</a></li><li><a href="https://cloud.tencent.com/developer/user/1011618/activities">腾讯性能优化</a></li><li><a href="https://cloud.tencent.com/developer/user/1016462">腾讯测开</a></li><li><a href="https://cloud.tencent.com/developer/user/2059614">测开</a></li></ul><span id="more"></span><h1 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h1><ul><li><a href="https://cloud.tencent.com/developer/user/2398817/inventories">python</a></li><li><a href="https://www.cnblogs.com/vamei/tag/Python/">行业大佬python教程</a></li></ul><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li><a href="https://cloud.tencent.com/developer/user/1642192">K8S腾讯专家</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1974105&quot;&gt;自动化专家&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/user/3335805/activities&quot;&gt;性能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/user/1011618/activities&quot;&gt;腾讯性能优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/user/1016462&quot;&gt;腾讯测开&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/user/2059614&quot;&gt;测开&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="博客" scheme="https://fenqian.xyz/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>UI自动化基础--微软</title>
    <link href="https://fenqian.xyz/posts/d1646a55/"/>
    <id>https://fenqian.xyz/posts/d1646a55/</id>
    <published>2022-07-28T03:09:00.000Z</published>
    <updated>2022-07-28T03:10:38.256Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://docs.microsoft.com/en-us/dotnet/framework/ui-automation/">微软ui自动化基础</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/ui-automation/&quot;&gt;微软ui自动化基础&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="UI" scheme="https://fenqian.xyz/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>UI自动化元素定位</title>
    <link href="https://fenqian.xyz/posts/2e4c0062/"/>
    <id>https://fenqian.xyz/posts/2e4c0062/</id>
    <published>2022-07-20T05:38:00.000Z</published>
    <updated>2022-12-29T07:30:56.324Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">APPIUM元素定位原理</span><br><span class="line">常见的元素定位方式</span><br><span class="line">元素定位技巧/辅助工具</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="APPIUM元素定位原理"><a href="#APPIUM元素定位原理" class="headerlink" title="APPIUM元素定位原理"></a>APPIUM元素定位原理</h2><p><code>目前的UI自动化测试，使用Appium进行页面元素的定位和操作。如下图所示，AppiumServer和UiAutomator2的手机端进行通信后完成元素的操作。</code></p><p><img src="/text_image/appium%E6%B5%81%E7%A8%8B.png" alt="alt text"></p><p><code>底层实现过程</code><br><img src="/text_image/appium%E5%BA%95%E5%B1%82.png" alt="alt text"></p><ul><li>首先，Appium通过调用findElement的方式进行元素定位。</li><li>然后，调用Android提供UIDevice对象的findObject方法。</li><li>最终，通过PartialMatch.accept完成元素的查找。</li></ul><p>接下来我们看一下，这个PartialMatch.accept到底是如何完成元素定位的。通过对于<a href="https://android.googlesource.com/platform/frameworks/uiautomator/+/android-support-test/src/main/java/android/support/test/uiautomator/ByMatcher.java">源码</a>的研究，我们发现元素的信息都是存储在一个叫做AccessibilityNodeInfo的对象里面。源码中使用大量node.getXXX方法中的信息，大家是否眼熟呢？这些信息其实就是我们日常自动化测试中可以获取UI元素的属性。从这我们知道了appium元素定位的工作过程；<br><img src="/text_image/meitun%E5%85%83%E7%B4%A0.png" alt="alt_text"></p><h2 id="常见元素定位方式"><a href="#常见元素定位方式" class="headerlink" title="常见元素定位方式"></a>常见元素定位方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">id定位</span><br><span class="line">xpath定位</span><br><span class="line">classname定位</span><br><span class="line">text定位</span><br><span class="line">坐标定位</span><br><span class="line">accessibility_id定位</span><br></pre></td></tr></table></figure><p><em><strong>1、id定位</strong></em></p><p><code>id定位是最常用的定位方式，在选择ID时需要验证ID唯一，此方法仅可用于Android，ios不可用</code></p><p><code>id定位示例：driver.find_element_by_id(&quot;id属性值&quot;)</code></p><ul><li>查找ID方式：①为使用uiautomatorviewer②为使用Appium Inspector</li></ul><p><img src="/text_image/id.png" alt="alt_text"><br><img src="/text_image/appium_id.png" alt="alt_text"></p><ul><li>ID查找性能</li></ul><p><code>由上方的appium定位原理可知，查找页面元素位置，是在AccessibilityNodeInfo对象里查找的，这个对象维护的各属性值是字典，因此通过ID查询的性能是较快的</code></p><ul><li>boomplay UI自动化框架的使用<br><img src="/text_image/b_id.png" alt="alt_text"></li></ul><p><em><strong>2、xpath定位</strong></em></p><p><code>xpath定位也是最常用的定位方式之一，xpath是根据页面层级来定位元素位置，此方法仅可用于Android和iOS</code></p><p><code>xpath定位示例：driver.find_element_by_xpath(&quot;xpath表达式&quot;)</code></p><ul><li>查找xpath方式：①为使用uiautomatorviewer②为使用Appium Inspector</li></ul><p><img src="/text_image/id.png" alt="alt_text"><br><img src="/text_image/appium_id.png" alt="alt_text"></p><ul><li>xpath查找性能</li></ul><p><code>由于xpath是根据元素位置来查找的，从头开始查找，因此xpath查找的性能一般较差，且不同写法查找范围不同，性能差异很大，一般通过id/name属性值来定位；参考</code><a href="https://www.runoob.com/xpath/xpath-syntax.html">xpath语法</a></p><ul><li>boomplay UI自动化框架的使用<br><img src="/text_image/b_id.png" alt="alt_text"></li></ul><p><em><strong>3、classname定位</strong></em></p><p><code>classname是基于classname值来定位元素，由于classname一般不唯一，一般不使用此值定位，使用的话也是结合xpath来使用,ios和Android均支持</code></p><p><code>class_name定位示例：driver.find_element_by_class_name(&quot;class_name属性值&quot;)</code></p><ul><li>查找classname方式：①为使用uiautomatorviewer②为使用Appium Inspector</li></ul><p><img src="/text_image/id.png" alt="alt_text"><br><img src="/text_image/appium_id.png" alt="alt_text"></p><ul><li>classname查找性能</li></ul><p><code>classname是页面的classname属性值，用它来定位元素时，由于classname值一般不唯一，因此一般不直接用其定位，一般和xpath一起使用，将classname作为xpath的属性值，性能由于xpath和ID定位性能接近</code></p><ul><li>boomplay UI自动化框架的使用<br><img src="/text_image/b_id.png" alt="alt_text"></li></ul><p><em><strong>4、name定位</strong></em></p><p><code>name定位是使用页面text值来进行定位的，Android从5.5开始不支持name定位，iOS支持name定位</code></p><p><code>name定位示例：driver.find_element_by_name(&quot;text值&quot;)</code></p><ul><li>查找name方式：ios使用Appium Inspector</li></ul><p><img src="/text_image/appium_id.png" alt="alt_text"></p><ul><li>name查找性能</li></ul><p><code>name查找性能较快，和id查找接近</code></p><ul><li>boomplay UI自动化框架的使用<br>不支持</li></ul><p><em><strong>5、accessibility_id定位</strong></em></p><p><code>accessibility_id定位是使用页面content-desc属性值来进行定位的，android和ios均支持</code></p><p><code>accessibility_id定位示例：driver.find_element_by_accessibility_id(&quot;content-desc值&quot;)</code></p><ul><li>查找content-desc方式：①为使用uiautomatorviewer②为使用Appium Inspector</li></ul><p><img src="/text_image/id.png" alt="alt_text"><br><img src="/text_image/appium_id.png" alt="alt_text"></p><ul><li>accessibility_id查找性能</li></ul><p><code>accessibility_id查找性能较快，和id查找接近</code></p><ul><li>boomplay UI自动化框架的使用<br><img src="/text_image/b_id.png" alt="alt_text"></li></ul><p><em><strong>6、指定uiautomator工具定位</strong></em></p><p><code>uiautomator定位方式是直接指定uiautomator工具来进行定位，可利用工具对象的属性来进行定位（支持ID/xpath/class_name等属性值来进行定位），仅支持Android，在Android环境下和driver.find_element_by_是完全一样的</code></p><p><code>accessibility_id定位示例：driver.find_element_by_android_uiautomator(&quot;UiSelector工具属性值来进行定位&quot;)</code></p><ul><li>查找属性值方式：①为使用uiautomatorviewer②为使用Appium Inspector</li></ul><p><img src="/text_image/id.png" alt="alt_text"><br><img src="/text_image/appium_id.png" alt="alt_text"></p><ul><li>uiautomator工具查找性能</li></ul><p><code>Android环境下根据定位的属性值来区分，性能和driver.find_element_by_是完全一样的</code></p><ul><li>boomplay UI自动化框架的使用<br>不支持，可扩展</li></ul><p><em><strong>7、css_selector定位</strong></em></p><p><code>css属性定位，支持通过页面的各类css属性来进行定位元素，支持单个属性和多个属性值组合定位，仅支持web</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 1.用 标签名 定位查找</span><br><span class="line">driver.find_element_by_css_selector(&quot;input&quot;)</span><br><span class="line"></span><br><span class="line"># 2.用 id 属性定位查找 </span><br><span class="line">driver.find_element_by_css_selector(&quot;kw&quot;)</span><br><span class="line"></span><br><span class="line"># 3.用 class 属性定位查找</span><br><span class="line">driver.find_element_by_css_selector(&quot;s_ipt&quot;)</span><br><span class="line"></span><br><span class="line"># 4.其他属性定位</span><br><span class="line">driver.find_element_by_css_selector(&quot;[name&#x3D;&quot;wd&quot;]&quot;)</span><br><span class="line"></span><br><span class="line"># 5.标签名及id属性值组合定位</span><br><span class="line">driver.find_element_by_css_selector(&quot;input#kw&quot;)</span><br></pre></td></tr></table></figure><ul><li>查找属性值方式：①为使用uiautomatorviewer②为使用Appium Inspector</li></ul><p><img src="/text_image/id.png" alt="alt_text"><br><img src="/text_image/appium_id.png" alt="alt_text"></p><ul><li>uiautomator工具查找性能</li></ul><p><code>性能根据定位的属性值来区分，性能和driver.find_element_by_是完全一样的</code></p><ul><li>boomplay UI自动化框架的使用<br><img src="/text_image/b_id.png" alt="alt_text"></li></ul><p><em><strong>8、单数定位和复数定位</strong></em></p><p><code>单数定位示例：driver.find_element_by_(&quot;值&quot;)</code></p><p><code>复数定位示例：driver.find_elements_by_(&quot;值&quot;).get(6)</code></p><p><strong>单数定位时定位到第一个元素即返回，返回单个对象；复数定位会定位到页面的所有对象，返回一个数组;现在支持id和xpath的单复数定位；复数定位主要用于某些位置无唯一元素的场景，可通过第几个来进行定位</strong><br><img src="/text_image/%E5%8D%95%E5%A4%8D.png" alt="alt_text"></p><p><em><strong>9、坐标定位</strong></em></p><p><code>APPIUM提供tap方法支持通过元素坐标进行点击，提供了一个adb_tap方法给大家获取元素坐标</code></p><ul><li>boomplay UI自动化框架的使用<br><img src="/text_image/%E5%9D%90%E6%A0%87.png" alt="alt_text"></li></ul><p><em><strong>10、图像识别</strong></em></p><p><code>APPIUM从1.9.0版本开始支持识别图像来进行查找对象，暂未调研。后续补充</code></p><ul><li>boomplay UI自动化框架的使用<br><img src="/text_image/%E5%9D%90%E6%A0%87.png" alt="alt_text"></li></ul><h2 id="元素定位工具和技巧"><a href="#元素定位工具和技巧" class="headerlink" title="元素定位工具和技巧"></a>元素定位工具和技巧</h2><ul><li>辅助工具<ul><li>Android：uiautomatorviewer/Appium Inspector</li><li>iOS：Appium Inspector</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;大纲&quot;&gt;&lt;a href=&quot;#大纲&quot; class=&quot;headerlink&quot; title=&quot;大纲&quot;&gt;&lt;/a&gt;大纲&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;APPIUM元素定位原理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;常见的元素定位方式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;元素定位技巧/辅助工具&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="ui元素定位" scheme="https://fenqian.xyz/tags/ui%E5%85%83%E7%B4%A0%E5%AE%9A%E4%BD%8D/"/>
    
    <category term="UI自动化" scheme="https://fenqian.xyz/tags/UI%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>稳定性治理--智能遍历</title>
    <link href="https://fenqian.xyz/posts/e80d13a0/"/>
    <id>https://fenqian.xyz/posts/e80d13a0/</id>
    <published>2022-04-13T02:52:00.000Z</published>
    <updated>2022-12-29T07:31:33.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p><code>智能遍历，即通智能化的规则来访问APP的UI页面；之所以要考虑这种方式，主要是monkey随机测试，随机性太强，覆盖率不好衡量；不方便进行版本之间的对比，因此考虑其他智能遍历方案，备选的有三种方案“UI自动化实现/appcrawler自动遍历/fastbot智能遍历”</code></p><span id="more"></span><h1 id="方案对比"><a href="#方案对比" class="headerlink" title="方案对比"></a>方案对比</h1><ul><li><p><strong>UI自动化实现</strong></p><ul><li><em>优点</em><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">定制化程度高，可控</span><br><span class="line">可进行持续集成</span><br></pre></td></tr></table></figure></li><li><em>缺点</em><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">工作量大，稳定性差，实现难度高</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>appcrawler自动遍历</strong></p><ul><li><em>优点</em><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">覆盖率高，利用类爬虫机制能进行深度遍历，基本覆盖所有的页面</span><br><span class="line">可进行策略定制，灵活性较高，使用成本较低</span><br><span class="line">执行有HTML结果，支持Android和iOS渠道</span><br><span class="line">支持持续集成；</span><br></pre></td></tr></table></figure></li><li><em>缺点</em><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">执行策略和版本数据相关性不大,无法利用历史策略数据</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>fastbot智能遍历</strong></p><ul><li><em>优点</em><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">覆盖率高，且有覆盖率指标，进行智能遍历，遍历策略较智能（每次遍历都会建模，利用深度学习会持续优化模型，作为驱动策略），现实意义较强；</span><br><span class="line">可进行定制，灵活度较高，使用成本较低；</span><br><span class="line">支持iOS和Android渠道；</span><br><span class="line">可利用数据驱动，方便进行版本间的迭代，方便优化驱动策略；</span><br><span class="line">支持持续集成；</span><br><span class="line">利用monkey来遍历，执行较快，效率高；</span><br><span class="line">支持非标准化控件，可以利用图像识别来进行断言；</span><br><span class="line">每次的模型可复用，模型文件会自动存储在 /sdcard/fastbot_[包名].fbm，换设备或者版本可复用原有模型，保证策略完全一致；只需要放在相同的位置即可；</span><br><span class="line">支持多设备</span><br></pre></td></tr></table></figure></li><li><em>缺点</em><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">需要第三方工具，进行性能监控，本身不支持；</span><br><span class="line">无结果报告，只有打印的覆盖率指标，同时只有异常日志；</span><br><span class="line">后期可能会收费，一旦收费，建议转solopi或者自研；</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>综合考虑，最终决定采用fastbot，其中很大一个原因是其支持数据驱动，方便持续优化策略，同时据同事说shein也在使用；</p><h2 id="fastBOT使用"><a href="#fastBOT使用" class="headerlink" title="fastBOT使用"></a><em><strong>fastBOT使用</strong></em></h2><h3 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">安装/部署</span><br><span class="line">使用指令</span><br><span class="line">定制策略</span><br><span class="line">优化策略</span><br><span class="line">结果分析</span><br><span class="line">性能采集</span><br></pre></td></tr></table></figure><ul><li><p><strong>安装/部署</strong></p><ul><li><em>部署Java环境</em><ul><li><a href="https://www.oracle.com/java/technologies/downloads/#jdk18-windows">下载java jdk</a></li><li>配置Java环境变量：在系统变量中对JAVA_HOME、PATH、CLASSPATH进行配置：<ul><li>JAVA_HOME:C:\Program Files (x86)\Java\jdk1.8.0_91</li><li>PATH:%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin</li><li>CLASSPATH:.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</li></ul></li></ul></li><li><em>部署Android环境</em><ul><li>先部署Java环境</li><li><a href="https://developer.android.google.cn/studio">安装Android studio</a></li><li>通过Android studio 安装对应版本的Android sdk</li><li>添加Android环境变量：系统变量中添加ANDROID_HOME，PATH：<ul><li>ANDROID_HOME:C:\Users\gavin\AppData\Local\Android\Sdk</li><li>PATH:%ANDROID_HOME%\platform-tools;%ANDROID_HOME%\tools;C:\Users\gavin\AppData\Local\Android\Sdk\build-tools\32.0.0（aapt命令的环境变量，其是apk解析程序）        </li></ul></li></ul></li><li><em>将jdk包，pull到手机</em><ul><li>adb push * .jar /sdcard</li><li>adb push libs/ * /data/local/tmp/</li></ul></li></ul></li><li><p><strong>使用指令</strong></p><ul><li><em>举例：</em></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IOS:tidevice xctest -B bytedance.FastbotRunner112.xctrunner -e BUNDLEID:com.TranssnetMusic.Boomplay -e duration:120 -e throttle:300 --debug</span><br><span class="line"></span><br><span class="line">ANDROID:adb -s 037952588D000392 0442233974160287 shell CLASSPATH&#x3D;&#x2F;sdcard&#x2F;monkeyq.jar:&#x2F;sdcard&#x2F;framework.jar:&#x2F;sdcard&#x2F;fastbot-thirdpart.jar exec app_process &#x2F;system&#x2F;bin com.android.commands.monkey.Monkey -p com.afmobi.boomplayer --agent reuseq --running-minutes 240 --throttle 500 -v -v --output-directory &#x2F;sdcard&#x2F;fast_data</span><br></pre></td></tr></table></figure><ul><li><em>参数说明</em></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">必填参数：</span><br><span class="line">-s imei imei2:支持多设备</span><br><span class="line">-p package_name:str；“adb shell pm list package”可获取APP包名</span><br><span class="line">--agent reuseq：遍历模式，无需更改</span><br><span class="line">--running-minutes 120：遍历时长，单位是min</span><br><span class="line">--throttle 500：和monkey中的--throttle相同，为事件频率，建议500-800</span><br><span class="line">选填参数：</span><br><span class="line">--bugreport ：<span class="comment">#发生崩溃时打印的日志</span></span><br><span class="line">--output-directory ： /sdcard/xxx <span class="comment">#输出目录的文件夹</span></span><br></pre></td></tr></table></figure></li><li><p><strong>定制策略</strong></p><ul><li><em>限定词</em><br><code>限定自动化定位到的文本只能是apk字符串池中出现的文本，否则抛出异常</code>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">操作：</span><br><span class="line">aapt2 dump strings apk路径 &gt; max.valid.strings :将apk中所有的字符创，加入到限定词文档</span><br><span class="line">adb push max.valid.strings &#x2F;sdcard:配置文件需要push到sdk卡才能生效</span><br></pre></td></tr></table></figure></li><li><em>自定义事件执行顺序</em><br><code>应用于需要自定义执行顺序的场景（如登录），或者要保证一定要覆盖到的核心场景,实现方式如下：</code></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">在pc端新建 max.xpath.actions 文件</span><br><span class="line">编写事件序列的<span class="keyword">case</span>，参考我提供的max.xpath.actions文件，文件编写好之后push到/sdcard的根目录；举例说明：</span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;prob&quot;</span>:1,//事件发生概率，实际使用注释文件要删掉</span><br><span class="line"><span class="string">&quot;activity&quot;</span>:<span class="string">&quot;com.boomplay.ui.main.MainActivity&quot;</span>,//作用的页面</span><br><span class="line"><span class="string">&quot;times&quot;</span>:1,//重复次数</span><br><span class="line"><span class="string">&quot;actions&quot;</span>:[//具体步骤的执行,同时支持多个操作</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;xpath&quot;</span>:<span class="string">&quot;//*[@text=&#x27;Charts&#x27;]&quot;</span>,//尽量使用resource-id作为xpath路径，也可以组合使用比如<span class="string">&quot;xpath&quot;</span>: <span class="string">&quot;//*[@resource-id=&#x27;xxx&#x27;and @text=&#x27;xx&#x27;]&quot;</span></span><br><span class="line"><span class="string">&quot;action&quot;</span>:<span class="string">&quot;CLICK&quot;</span>,//动作支持的操作，必须大写（CLICK，LONG_CLICK，BACK，SCROLL_TOP_DOWN，SCROLL_BOTTOM_UP，SCROLL_LEFT_RIGHT，SCROLL_RIGHT_LEFT）</span><br><span class="line"><span class="string">&quot;text&quot;</span>: <span class="string">&quot;打开页面成功&quot;</span>,</span><br><span class="line"><span class="string">&quot;clearText&quot;</span>:<span class="literal">false</span>,//明文，可不带</span><br><span class="line"><span class="string">&quot;throttle&quot;</span>:5000//action间隔事件（ms）</span><br><span class="line">&#125;,</span><br><span class="line">&#123;<span class="string">&quot;xpath&quot;</span>:<span class="string">&quot;//*[@text=&#x27;Artists&#x27;]&quot;</span>,</span><br><span class="line"><span class="string">&quot;action&quot;</span>:<span class="string">&quot;CLICK&quot;</span>,</span><br><span class="line"><span class="string">&quot;throttle&quot;</span>:5000&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,//到不同的activity操作，需要新起一个对象</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;prob&quot;</span>:1,</span><br><span class="line"><span class="string">&quot;activity&quot;</span>:<span class="string">&quot;com.boomplay.ui.guide.GuideDialogSearchActivity&quot;</span>,</span><br><span class="line"><span class="string">&quot;times&quot;</span>:1,</span><br><span class="line"><span class="string">&quot;actions&quot;</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;xpath&quot;</span>:<span class="string">&quot;//*[@text=&#x27;Charts&#x27;]&quot;</span>,</span><br><span class="line"><span class="string">&quot;action&quot;</span>:<span class="string">&quot;CLICK&quot;</span>,</span><br><span class="line"><span class="string">&quot;text&quot;</span>: <span class="string">&quot;打开页面成功&quot;</span>,</span><br><span class="line"><span class="string">&quot;clearText&quot;</span>:<span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;throttle&quot;</span>:5000</span><br><span class="line">&#125;,</span><br><span class="line">&#123;<span class="string">&quot;xpath&quot;</span>:<span class="string">&quot;//*[@text=&#x27;Artists&#x27;]&quot;</span>,</span><br><span class="line"><span class="string">&quot;action&quot;</span>:<span class="string">&quot;CLICK&quot;</span>,</span><br><span class="line"><span class="string">&quot;throttle&quot;</span>:5000&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">]</span><br><span class="line">    </span><br></pre></td></tr></table></figure><ul><li><p><em>配置白名单</em><br><code>作用：定制策略只在白名单页面内进行操作</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">操作：</span><br><span class="line">新建 awl.strings文件</span><br><span class="line">在文件中写入Activity的名称，如：com.boomplay.ui.main.MainActivity</span><br><span class="line">将文件push到手机&#x2F;sdcard路径下，使用时，在执行命令尾部添加：</span><br><span class="line">--act-whitelist-file &#x2F;sdcard&#x2F;awl.strings</span><br></pre></td></tr></table></figure></li><li><p><em>配置黑名单</em><br><code>作用：定制策略不允许访问黑名单页面</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">操作：</span><br><span class="line">新建 abl.strings文件</span><br><span class="line">在文件中写入Activity的名称，如：com.boomplay.ui.main.MainActivity</span><br><span class="line">将文件push到手机&#x2F;sdcard路径下，使用时，在执行命令尾部添加：</span><br><span class="line">--act-blacklist-file &#x2F;sdcard&#x2F;abl.strings</span><br></pre></td></tr></table></figure><p><em><strong>黑白名单不能同时配置，非黑即白</strong></em></p></li><li><p><em>定制需要屏蔽的按钮/区域</em><br><code>作用：如登防止登录后，中途退出</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    新建max.widget.black文件，文件配置后，push到&#x2F;sdcard路径下</span><br><span class="line">    [</span><br><span class="line">&#123;</span><br><span class="line">    &quot;activity&quot;:&quot;com.ss.android.xxx.MainActivity&quot;,</span><br><span class="line">    &quot;xpath&quot;: &quot;&#x2F;&#x2F;*[@resource-id&#x3D;&#39;com.xxx.go:id&#x2F;aaa&#39;]&quot;&#x2F;&#x2F;通过元素控制不让访问</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    &quot;activity&quot;:&quot;com.ss.android.xxx.MainActivity&quot;,</span><br><span class="line">    &quot;bounds&quot;: 0.5&#x2F;&#x2F;activity区域内50%区域不被点击，值为0-1</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><em>通过tree屏蔽</em><br><code>原理配置xpath：查找匹配的控件，改变控件属性，从而使控件屏蔽</code></p></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">新建max.tree.pruning文件，文件配置完后，push到&#x2F;sdcard路径下</span><br><span class="line">配置实例：建github提供的文件参考配置</span><br></pre></td></tr></table></figure><ul><li><em>定制事件中模糊事件/突发性事件的占比</em><br><code>所谓的模糊事件，是指执行某个操作后（定制的action事件），模型会根据这个操作生成5-10个相关的操作的策略</code></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">在max.config文件中增加模糊性事件，在总的事件中的占比，配置完成后，push到&#x2F;sdcard路径</span><br><span class="line">max.fuzzingRate &#x3D; 0.01D &#x2F;&#x2F;0.01为Fuzz事件的总概率</span><br><span class="line">模糊事件，包含以下事件，（数字为配置事件在模糊性事件中的概率，以下数值为默认值，可定制）： </span><br><span class="line">max.doRotateFuzzing &#x3D; 0.15</span><br><span class="line">max.doAppSwitchFuzzing &#x3D; 0.15</span><br><span class="line">max.doTrackballFuzzing &#x3D; 0.15</span><br><span class="line">max.doNavKeyFuzzing &#x3D; 0.15</span><br><span class="line">max.doKeyCodeFuzzing &#x3D; 0.15</span><br><span class="line">max.doSystemKeyFuzzing &#x3D; 0.15</span><br><span class="line">max.doDragFuzzing &#x3D; 0.5</span><br><span class="line">max.doPinchZoomFuzzing &#x3D; 0.15 </span><br><span class="line">max.doClickFuzzing &#x3D; 0.7</span><br><span class="line">在max.config文件中增加随机性事件（monkey随机性事件），在总的事件中的占比，配置完成后push到&#x2F;sdcard路径下</span><br><span class="line">max.startMutation &#x3D; 0.3D &#x2F;&#x2F;启动Fastbot立刻设置mutation的几率，默认30%</span><br><span class="line">随机性事件，包含以下事件，(数字为默认概率，此概率为事件总概率，可定制)：</span><br><span class="line">max.doMutationAirplaneFuzzing &#x3D; 0.001</span><br><span class="line">max.doMutationMutationAlwaysFinishActivitysFuzzing &#x3D; 0.1</span><br><span class="line">max.doMutationWifiFuzzing &#x3D; 0.001</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>优化策略</strong></p><ul><li><em>输入内容优化</em><br><code>输入是用户主观意愿很强的行为，为保证输入的内容是有价值的，更添近真实场景，在覆盖输入场景做一些策略优化，以屏蔽乱输入内容</code></li><li><em>操作</em></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">使用ADBKeyBoard在输入栏自动输入内容，屏蔽UI输入法：UI输入法，不同终端使用不同的输入法，不稳定（安装部署adbkeyboard见下方内容，基本所有的开源的自动化工具在输入这块都会封装输入法，为了方便复用和稳定，不建议调用手机的输入法）；</span><br><span class="line">输入随机字符串：pc建一个max.config文件；配置 max.config 中 max.randomPickFromStringList &#x3D; false，最后将文件push到手机的&#x2F;sdcard目录下；</span><br><span class="line">从文件中随机读取字符串来输入：pc建一个max.config文件；配置 max.config 中 max.randomPickFromStringList &#x3D; true，然后在建一个max.strings文件，里面放用来输入的字符串（每一行为一个对象）；最后将max.config和max.strings文件push到手机的&#x2F;sdcard目录下；</span><br><span class="line">模糊输入：模糊输入和随机输入有点类似，不过有限定范围，fastbot模糊输入的限定规则如下：</span><br><span class="line">50% 概率输入fuzzing.strings中某个string</span><br><span class="line">35% 概率输入被测试 App 历史页面中text&#x2F;desc文本内容（不存在max.fuzzing.strings文件时概率提高到85%）</span><br><span class="line">15% 概率不输入</span><br><span class="line">使用文件限定的模糊输入：将git项目中的test&#x2F;max.fuzzing.strings文件push到手机&#x2F;sdcard下，此文件存在模糊搜索策略及生效，文件里放想输入的字符串；</span><br><span class="line">    </span><br></pre></td></tr></table></figure><ul><li><p>部署adbkeyboard</p><ul><li>[下载开源包]（<a href="https://github.com/senzhk/ADBKeyBoard/archive/refs/heads/master.zip%EF%BC%89">https://github.com/senzhk/ADBKeyBoard/archive/refs/heads/master.zip）</a></li><li>进入项目目录cd ADBKeyBoard</li><li>设置环境变量 export ANDROID_HOME=$HOME/Android/Sdk</li><li>在保证手机连接电脑，且赋予debug权限情况下，执行安装命令./gradlew installDebug</li><li>如果以上方式无法安装，请安装apk包：<a href="https://github.com/senzhk/ADBKeyBoard/raw/master/ADBKeyboard.apk">地址</a></li></ul></li><li><p><em>apk反混淆</em><br><code>是什么：混淆指的是Java混淆编译，用以防止对源码的反编译破解；反混淆，类似于解密;使得配置在 不同版本的App中可以通用 </code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">配置混淆映射文件max.mapping，push到手机&#x2F;sdcard中，以建立混淆前后ID映射关系：</span><br><span class="line">adb push resguard_mapping_NewsArticle_beta_version_v7.2.x_?????.txt &#x2F;sdcard&#x2F;max.mapping</span><br><span class="line">配置反混淆文件，以自定义事件为例，在 max.xpath.actions 中配置混淆前的 resource-id，参考示例文件</span><br></pre></td></tr></table></figure></li><li><p><em>测试过程中自动截图</em><br><code>场景：当--throttle 事件频率&gt;200时，配置了截图，会对测试过程中页面进行截图</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">新建max.config配置文件，增加以下属性，配置完成后文件push到&#x2F;sdcard路径下</span><br><span class="line">max.takeScreenshot &#x3D; true</span><br><span class="line">max.takeScreenshotForEveryStep &#x3D; true</span><br><span class="line">max.saveGUITreeToXmlEveryStep &#x3D;true</span><br><span class="line">目录默认保存为手机端sdcard中，如需改变保存位置，在执行命令末尾添加 --output-directory 指定路径</span><br></pre></td></tr></table></figure></li><li><p><em>支持外链跳转</em><br><code>支持第三方的外链跳转，跳转到第三方应用，或者跳转到端内页面</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新建max.schema文件，增加配置如下，文件配置完后，push到&#x2F;sdcard路径下</span><br><span class="line">max.execSchema &#x3D; true</span><br><span class="line">max.execSchemaEveryStartup  &#x3D; true  #每次启动app先执行schema</span><br></pre></td></tr></table></figure></li><li><p><em>应用自动授予权限</em><br><code>如boomplay需要获取通讯录/相机权限，fastbot启动时默认会一次性各所有权限，如需每次动态给权限，需要更改配置</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在max.config中增加以下配置，则不会自动给所有权限；文件配置完之后push到&#x2F;sdcard路径下</span><br><span class="line">max.grantAllPermission &#x3D; false</span><br><span class="line">动态给权限的方式是，在执行的adb命令尾部增加对应的android权限授予的指令：</span><br><span class="line">-p com.android.packageinstaller </span><br><span class="line">-p com.android.permissioncontroller</span><br><span class="line">-p com.lbe.security.miui  # for (miui android 10)</span><br><span class="line">-p com.samsung.android.permissioncontroller #  for (samsung android 10)</span><br></pre></td></tr></table></figure></li><li><p><em>fastbot压缩包提供了各类素材，用以在执行选取各类素材的场景中使用，如发带图片的buzz</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb push data&#x2F;fuzzing&#x2F; &#x2F;sdcard</span><br><span class="line">adb shell am broadcast -a android.intent.action.MEDIA_SCANNER_SCAN_FILE -d file:&#x2F;&#x2F;&#x2F;sdcard&#x2F;fuzzing</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>结果分析</strong></p><ul><li>异常数据<br>  crash：Crash会以追加方式写入/sdcard/crash-dump.log文件<br>  anr：写入 /sdcard/oom-traces.log 文件</li><li>覆盖率统计：coverage = testedActivity / totalActivities * 100<br>  testedActivity:本次测试的activity,会打印出来<br>  totalActivities:总的activity，会打印出来<br>  以上的所有activity，是不区分废弃，或者未使用的activity，为APP的所有的activity</li></ul></li><li><p><strong>性能采集</strong><br><code>性能采集，主要是采集内存/CPU的数据，从而来分析APP执行case时的性能</code></p></li></ul><ul><li><p><em>方法一</em></p><p>  通过火山提供的APP性能分析工具进行监控：<a href="https://www.volcengine.com/docs/6431/82895">工具地址</a>（火山引擎开始收费了，工具现在虽然免费，不排除未来收费，有使用风险）</p></li><li><p><em>方法二</em></p><p>  借助其他的性能数据抓取工具,比如 OneApm, NewRelic（付费）；或者支付宝的solopi；使用第三方工具可能会对结果有影响，最好能统一场景，保证结果一致；</p></li></ul><ul><li><strong>常用操作</strong></li></ul><ul><li><p><em>获取APP包名</em></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aapt dump badging apk_path</span><br></pre></td></tr></table></figure></li><li><p><em>使用<a href="https://github.com/zhangzhao4444/Maxim">maxim</a>获取APPactivity</em></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell CLASSPATH&#x3D;&#x2F;sdcard&#x2F;monkey.jar:&#x2F;sdcard&#x2F;framework.jar exec app_process &#x2F;system&#x2F;bin tv.panda.test.monkey.api.CurrentActivity 注意里面的文件需要push到手机对应的位置后才能使用</span><br></pre></td></tr></table></figure></li><li><p><em>使用<a href="https://github.com/zhangzhao4444/Maxim">maxim</a>查看当前页面的TREE结构，来获取配置需要id等。。</em></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell CLASSPATH&#x3D;&#x2F;sdcard&#x2F;monkey.jar:&#x2F;sdcard&#x2F;framework.jar exec app_process &#x2F;system&#x2F;bin tv.panda.test.monkey.api.Dumptree</span><br></pre></td></tr></table></figure></li><li><p><em>常见问题，查看帮助文档</em></p><ul><li><a href="https://github.com/bytedance/Fastbot_Android/blob/main/handbook-cn.md#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">常见问题点这里</a></li><li><a href="https://github.com/bytedance/Fastbot_Android/issues">其他问题可以看下issue里找下</a></li><li><a href="https://github.com/bytedance/Fastbot_Android/blob/main/handbook-cn.md">官方文档点这里</a></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;&lt;code&gt;智能遍历，即通智能化的规则来访问APP的UI页面；之所以要考虑这种方式，主要是monkey随机测试，随机性太强，覆盖率不好衡量；不方便进行版本之间的对比，因此考虑其他智能遍历方案，备选的有三种方案“UI自动化实现/appcrawler自动遍历/fastbot智能遍历”&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="稳定性" scheme="https://fenqian.xyz/tags/%E7%A8%B3%E5%AE%9A%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>uwnc</title>
    <link href="https://fenqian.xyz/posts/3de87ac/"/>
    <id>https://fenqian.xyz/posts/3de87ac/</id>
    <published>2022-03-24T05:50:03.000Z</published>
    <updated>2022-03-24T05:50:04.553Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://test.boomplay.com/TestUWNC/?bp_wvt=1&amp;bp_noc=1#/test-uwnc">https://test.boomplay.com/TestUWNC/?bp_wvt=1&amp;bp_noc=1#/test-uwnc</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://test.boomplay.com/TestUWNC/?bp_wvt=1&amp;amp;bp_noc=1#/test-uwnc&quot;&gt;https://test.boomplay.com/TestUWNC/?bp_wvt=1&amp;amp;bp_noc=1#</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>实战--传音预装</title>
    <link href="https://fenqian.xyz/posts/fbd896d0/"/>
    <id>https://fenqian.xyz/posts/fbd896d0/</id>
    <published>2022-02-28T12:00:00.000Z</published>
    <updated>2022-03-20T02:44:53.493Z</updated>
    
    <content type="html"><![CDATA[<h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">确认需要覆盖的场景；</span><br><span class="line">场景的指标监控；</span><br><span class="line">构建脚本；</span><br><span class="line">分析监控数据，采集异常数据定位问题；</span><br></pre></td></tr></table></figure><span id="more"></span><ul><li><strong>确认需要覆盖的场景：</strong></li></ul><p><code>一般需要覆盖功能/性能/兼容/耗电/升级这几块，功能一般覆盖app的主功能</code></p><ul><li><em>方案：</em></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">启动app,点击播放栏播放按钮播放music，在切换到后台，在切换回前台；</span><br><span class="line">treding页上下滑动，在切换到music页上下滑动，在切换回treding页；</span><br><span class="line">music页点击歌单，进入歌单，歌单上下滑动两页，然后返回music页；在点击进入chart页，上下滑动两页，在返回；在点击进入艺人页，上下滑动两页，在返回；在点击进入曲风页，上下滑动，在进入第一个曲风，上下滑动，然后返回music首页；在次进入歌单页，上下滑动，然后在次点击第一个歌单进入歌单详情页，然后返回music首页；点击进入视频页，上下滑动，然后返回music首页；点击进入bbc，上下滑动，然后返回music首页；</span><br><span class="line">treding页播放music，然后返回treding;进入music页，点击歌单上浮按钮，进行全部播放，点击歌单详情页的全部播放按钮进行播放，点击歌单详情页的music播放，返回music后；进入播放列表，点击music播放；在进入播放详情页，切歌播放，在返回music首页，点击进入video页，点击视频进行播放，返回treding页;</span><br><span class="line">treding页进行music下载，music首页歌单全局下载按钮进行下载，点击进入歌单详情页，通过全部下载按钮进行下载，进入播放详情页，下载music；</span><br><span class="line">library页，通过localmusic或者下载music对本地下载的music进行播放，播放和后台循环切换；</span><br><span class="line">后台播放music时，分别同时打开，Facebook，WhatsApp，Twitter，Instagram，chrome；在切换回前台；</span><br><span class="line">music页/library页/buzz页/account页进行循环切换；</span><br><span class="line">buzz页，一二级页面循环切换，且每个页面均进行上下滑动；buzz页，点击评论和点赞按键；</span><br><span class="line">account页，进行登录，退出应用，切换回前台，退出登录；</span><br><span class="line">notification,页面循环切换，且每个页面进行上下滑动；</span><br><span class="line">前台常驻10分钟，切换到后台常驻10分钟，在切换回前台；</span><br></pre></td></tr></table></figure><ul><li><p><strong>场景的指标监控：</strong></p><p>  <code>由于渠道方未提供确切的合规标准，因此选用网易云音乐作为对比范本；在相同场景下，资源消耗超出网易云10%-30%判定为合规，否则判断为异常</code></p><ul><li><em>监控性能工具：</em></li></ul><p>  支付宝：solopi</p><ul><li><em>监控指标：</em></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CPU:cpu_max,cpu_ave;需要区分进程cpu和系统cpu</span><br><span class="line">ROM:需要监控pps&#x2F;privatedirty-main&#x2F;全局内存&#x2F;activity的内存泄露&#x2F;是否有oom问题，同时需要提供hprof文件；</span><br><span class="line">带宽：环境带宽，最大占用的带宽；</span><br><span class="line">响应耗时：前端渲染耗时；</span><br><span class="line">启动耗时：应用启动耗时，activity启动耗时；</span><br><span class="line">电量：前台&#x2F;高频&#x2F;后台常驻电量消耗；</span><br><span class="line">流量：前台&#x2F;高频&#x2F;后台常驻消耗,升级，下载时的资源消耗；</span><br><span class="line">app抛出的异常堆栈：监控adb日志获取；</span><br><span class="line">场景数据：查看工具报告，和工具收集的异常数据；</span><br><span class="line">线程状态：监控app创建的所有线程及状态；</span><br></pre></td></tr></table></figure><ul><li><em>网易指标</em><ul><li><strong>场景1：</strong> 启动app,点击播放栏播放按钮播放music，在切换到后台，在切换回前台；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">进程cpu:31.04&#x2F;20.68&#x2F;22.62&#x2F;28.35&#x2F;35.68(max)&#x3D;27.3311.22&#x2F;10.30&#x2F;10.65&#x2F;9.11&#x2F;13.36(ave)&#x3D;10.72</span><br><span class="line">总cpu:86.08&#x2F;79.02&#x2F;78.69&#x2F;91.11&#x2F;87(max)&#x3D;84.0345.80&#x2F;44.40&#x2F;41.81&#x2F;40.14&#x2F;48.35(ave)&#x3D;44</span><br><span class="line">private-ram:196.40&#x2F;243.39&#x2F;168.5&#x2F;157.63&#x2F;168.03(max)&#x3D;177.64186.76&#x2F;231.17&#x2F;158.1&#x2F;144.2&#x2F;141.02(ave)&#x3D;163.02</span><br><span class="line">pss-ram：267.32&#x2F;177.49&#x2F;234.1&#x2F;221.47&#x2F;235.23(max)&#x3D;230.27256.2&#x2F;163.50&#x2F;219.3&#x2F;211.83&#x2F;206.29(ave)&#x3D;212.47</span><br><span class="line">系统总ram：3453&#x2F;3365&#x2F;3372&#x2F;3457&#x2F;3421(max)&#x3D;3415.333410.91&#x2F;3349.44&#x2F;3335.2&#x2F;3325.13&#x2F;3377.08(ave)&#x3D;3353.91</span><br><span class="line">全局上行流量：449.13&#x2F;383.05&#x2F;423.08&#x2F;629.68&#x2F;4627&#x3D;500.63</span><br><span class="line">全局下行流量：1768.87&#x2F;1732.48&#x2F;1862.45&#x2F;3001.82&#x2F;33997.12&#x3D;2211.05</span><br><span class="line">响应耗时：</span><br></pre></td></tr></table></figure></li><li><strong>场景2：</strong> 启动耗时；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cpu:41.86&#x2F;40&#x2F;54.73&#x2F;41.79&#x2F;43.54</span><br><span class="line">rom:2977&#x2F;3007&#x2F;3028&#x2F;2986&#x2F;2924</span><br><span class="line">上行流量：32.34&#x2F;9.72&#x2F;11.13&#x2F;11.74&#x2F;20.76</span><br><span class="line">下行流量：138.13&#x2F;61.34&#x2F;32.75&#x2F;76.30&#x2F;54.90</span><br><span class="line">启动耗时：771ms&#x2F;2431ms&#x2F;1080ms&#x2F;781&#x2F;748ms</span><br></pre></td></tr></table></figure></li><li><strong>场景3：</strong> treding页上下滑动，在切换到music页上下滑动，在切换回treding页；；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">总cpu:56.28&#x2F;69.59&#x2F;65.96&#x2F;54.79&#x2F;75.57(max)&#x3D;40.32&#x2F;39.65&#x2F;40.95&#x2F;36.15&#x2F;38.25(ave)</span><br><span class="line">进程cpu:21.84&#x2F;23.71&#x2F;22.19&#x2F;20.37&#x2F;24.17(max)&#x3D;&#x3D;22.5811.64&#x2F;11.6&#x2F;12.07&#x2F;9.35&#x2F;10.64(ave)&#x3D;11.29</span><br><span class="line">pss-ram：403.67&#x2F;361.57&#x2F;359.02&#x2F;375.05&#x2F;339.13(max)&#x3D;365.21388.28&#x2F;349&#x2F;340.59&#x2F;359.07&#x2F;320.53(ave)&#x3D;349.55</span><br><span class="line">private-ram:327.68&#x2F;288.42&#x2F;284.15&#x2F;300.31&#x2F;265.09(max)&#x3D;290.96313.29&#x2F;275.5&#x2F;266.61&#x2F;284&#x2F;248.88(ave)&#x3D;275.37</span><br><span class="line">系统总ram：3635&#x2F;3578&#x2F;3587&#x2F;3571&#x2F;3500(max)&#x3D;3578.673623&#x2F;3563.6&#x2F;3570.09&#x2F;3560.56&#x2F;3484.78(ave)&#x3D;3564.75</span><br><span class="line">全局上行流量：281.49&#x2F;351.88&#x2F;342.72&#x2F;256.57&#x2F;320.48&#x3D;341.90</span><br><span class="line">全局下行流量：1406.78&#x2F;1530.86&#x2F;1694.41&#x2F;1208.77&#x2F;1678.10&#x3D;1538.58</span><br><span class="line">响应耗时：</span><br></pre></td></tr></table></figure></li><li><strong>场景4：</strong> music页点击歌单，进入歌单，歌单上下滑动两页，然后返回music页；在点击进入chart页，上下滑动两页，在返回；在点击进入艺人页，上下滑动两页，在返回；在点击进入曲风页，上下滑动，在进入第一个曲风，上下滑动，然后返回music首页；在次进入歌单页，上下滑动，然后在次点击第一个歌单进入歌单详情页，然后返回music首页；点击进入视频页，上下滑动，然后返回music首页；点击进入bbc，上下滑动，然后返回music首页；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">总cpu:75.71&#x2F;80.96&#x2F;89.29&#x2F;87.47&#x2F;91.79(max)&#x3D;85.9139.67&#x2F;40.07&#x2F;44.62&#x2F;43.97&#x2F;39.84(ave)&#x3D;41.29</span><br><span class="line">进程cpu:49.75&#x2F;51.24&#x2F;62.76&#x2F;50.77&#x2F;63.49(max)&#x3D;54.9214.63&#x2F;14.62&#x2F;16.87&#x2F;16.06&#x2F;13.35(ave)&#x3D;15.10</span><br><span class="line">pss-ram：267.17&#x2F;271.73&#x2F;265.97&#x2F;262.30&#x2F;314.29(max)&#x3D;268.29216.92&#x2F;222.82&#x2F;220.84&#x2F;218.53&#x2F;281.03(ave)&#x3D;220.73</span><br><span class="line">private-ram:204.31&#x2F;209.68&#x2F;205.87&#x2F;202&#x2F;240.15(max)&#x3D;206.62157.54&#x2F;163.98&#x2F;161.26&#x2F;159.72&#x2F;206.50(ave)&#x3D;161.65</span><br><span class="line">系统总ram：3415&#x2F;3414&#x2F;3428&#x2F;3394&#x2F;3412(max)&#x3D;3413.673371.28&#x2F;3379.18&#x2F;3383.33&#x2F;3337.13&#x2F;3374.4(ave)&#x3D;3374.95</span><br><span class="line">全局上行流量：809.21&#x2F;896.26&#x2F;810.98&#x2F;858.86&#x2F;827.16&#x3D;832.33</span><br><span class="line">全局下行流量：4067.93&#x2F;4459.75&#x2F;3786.03&#x2F;3666.64&#x2F;5148.2&#x3D;4104.57</span><br><span class="line">响应耗时：</span><br></pre></td></tr></table></figure></li><li><strong>场景5：</strong> treding页播放music，然后返回treding;进入music页，点击歌单上浮按钮，进行全部播放，点击歌单详情页的全部播放按钮进行播放，点击歌单详情页的music播放，返回music后；进入播放列表，点击music播放；在进入播放详情页，切歌播放，在返回music首页，点击进入video页，点击视频进行播放，返回treding页；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">总cpu:82.99&#x2F;73.3&#x2F;79.35(max)&#x3D;78.5545.87&#x2F;45.57&#x2F;44.19(ave)&#x3D;45.21</span><br><span class="line">进程cpu:28.88&#x2F;33.77&#x2F;30.33(max)&#x3D;30.9912.87&#x2F;11.60&#x2F;11.34(ave)&#x3D;11.94</span><br><span class="line">pss-ram：360.44&#x2F;339.74&#x2F;348.03(max)&#x3D;349.4332&#x2F;313.36&#x2F;314.22(ave)&#x3D;319.86</span><br><span class="line">private-ram:262.51&#x2F;250.52&#x2F;259.28(max)&#x3D;257.44233.83&#x2F;224.32&#x2F;228.88(ave)&#x3D;229.01</span><br><span class="line">系统总ram：3449&#x2F;3485&#x2F;3462(max)&#x3D;3465.333407.38&#x2F;3431.68&#x2F;3427.11(ave)&#x3D;3422.06</span><br><span class="line">全局上行流量：14914.79&#x2F;6908.25&#x2F;11193.83&#x3D;11005.62</span><br><span class="line">全局下行流量：35355.44&#x2F;17913.15&#x2F;28217.16&#x3D;27161.92</span><br><span class="line">响应耗时：</span><br></pre></td></tr></table></figure></li><li><strong>场景6：</strong> treding页进行music下载，music首页歌单全局下载按钮进行下载，点击进入歌单详情页，通过全部下载按钮进行下载，进入播放详情页，下载music；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">总cpu:73.77&#x2F;83.13&#x2F;77.37&#x2F;51.35&#x2F;72.18(max)46.94&#x2F;49.59&#x2F;46.94&#x2F;29.66&#x2F;41.61(ave)</span><br><span class="line">进程cpu:20.62&#x2F;21.09&#x2F;21.91&#x2F;15.18&#x2F;10.79(max)11.91&#x2F;13.48&#x2F;10.14&#x2F;7.87&#x2F;10.31(ave)</span><br><span class="line">pss-ram：351.01&#x2F;301.85&#x2F;307.79&#x2F;(max)339.44&#x2F;291.96&#x2F;297.10(ave)</span><br><span class="line">private-ram:269.26&#x2F;222.66&#x2F;228.95(max)259.39&#x2F;212.57&#x2F;217.98(ave)</span><br><span class="line">系统总ram：2765&#x2F;2813&#x2F;2676(max)2738.27&#x2F;2770.88&#x2F;2667.55(ave)</span><br><span class="line">全局上行流量：16531.35&#x2F;21262.26&#x2F;9539.49&#x2F;3160.78&#x2F;4068.34</span><br><span class="line">全局下行流量：32460.28&#x2F;43211.35&#x2F;18512.41&#x2F;6134.98&#x2F;7870.63</span><br><span class="line">响应耗时：</span><br></pre></td></tr></table></figure></li><li><strong>场景7：</strong> library页，通过localmusic或者下载music对本地下载的music进行播放，播放和后台循环切换；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">总cpu:(max)(ave)</span><br><span class="line">进程cpu:(max)(ave)</span><br><span class="line">pss-ram：(max)(ave)</span><br><span class="line">private-ram:(max)(ave)</span><br><span class="line">系统总ram：(max)(ave)</span><br><span class="line">全局上行流量：</span><br><span class="line">全局下行流量：</span><br><span class="line">响应耗时：</span><br></pre></td></tr></table></figure></li><li><strong>场景8：</strong> 后台播放music时，分别同时打开，Facebook，WhatsApp，Twitter，Instagram，chrome；在切换回前台；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">总cpu:(max)(ave)</span><br><span class="line">进程cpu:(max)(ave)</span><br><span class="line">pss-ram：(max)(ave)</span><br><span class="line">private-ram:(max)(ave)</span><br><span class="line">系统总ram：(max)(ave)</span><br><span class="line">全局上行流量：</span><br><span class="line">全局下行流量：</span><br><span class="line">响应耗时：</span><br></pre></td></tr></table></figure></li><li><strong>场景9：</strong> music页/library页/buzz页/account页进行循环切换；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">总cpu:(max)(ave)</span><br><span class="line">进程cpu:(max)(ave)</span><br><span class="line">pss-ram：(max)(ave)</span><br><span class="line">private-ram:(max)(ave)</span><br><span class="line">系统总ram：(max)(ave)</span><br><span class="line">全局上行流量：</span><br><span class="line">全局下行流量：</span><br><span class="line">响应耗时：</span><br></pre></td></tr></table></figure></li><li><strong>场景10：</strong> buzz页，一二级页面循环切换，且每个页面均进行上下滑动；buzz页，点击评论和点赞按键；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">总cpu:(max)(ave)</span><br><span class="line">进程cpu:(max)(ave)</span><br><span class="line">pss-ram：(max)(ave)</span><br><span class="line">private-ram:(max)(ave)</span><br><span class="line">系统总ram：(max)(ave)</span><br><span class="line">全局上行流量：</span><br><span class="line">全局下行流量：</span><br><span class="line">响应耗时：</span><br></pre></td></tr></table></figure></li><li><strong>场景11：</strong> account页，进行登录，退出应用，切换回前台，退出登录(无法登录)；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">总cpu:94.5&#x2F;100&#x2F;82.71&#x2F;92.37(max)&#x3D;93.4437.83&#x2F;45.15&#x2F;39.34&#x2F;32.20(ave)&#x3D;35.02</span><br><span class="line">进程cpu:42.78&#x2F;19.69&#x2F;23.83&#x2F;43.29(max)&#x3D;32.4011.17&#x2F;9.02&#x2F;10.08&#x2F;9.10(ave)&#x3D;9.84</span><br><span class="line">pss-ram：263.71&#x2F;240.92&#x2F;125.89(max)&#x3D;252.315206.20&#x2F;236.28&#x2F;120.34(ave)&#x3D;221.24</span><br><span class="line">private-ram:205&#x2F;184.32&#x2F;75.10(max)&#x3D;194.66150.55&#x2F;179.58&#x2F;68.81(ave)&#x3D;165.07</span><br><span class="line">系统总ram：2753&#x2F;2785&#x2F;2529(max)&#x3D;26892699.31&#x2F;2752.05&#x2F;2483.05(ave)&#x3D;2644.80</span><br><span class="line">全局上行流量：1157.70&#x2F;1290.43&#x2F;730.34&#x2F;1402.62&#x3D;1283.59</span><br><span class="line">全局下行流量：2662.21&#x2F;2518.72&#x2F;556.74&#x2F;6012.13&#x3D;2590.47</span><br><span class="line">响应耗时：</span><br></pre></td></tr></table></figure></li><li><strong>场景12：</strong> notification,页面循环切换，且每个页面进行上下滑动；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">进程cpu:(max)(ave)</span><br><span class="line">总cpu:(max)(ave)</span><br><span class="line">private-ram:(max)(ave)</span><br><span class="line">pss-ram：(max)(ave)</span><br><span class="line">系统总ram：(max)(ave)</span><br><span class="line">全局上行流量：</span><br><span class="line">全局下行流量：</span><br><span class="line">响应耗时：</span><br></pre></td></tr></table></figure></li><li><strong>场景12：</strong> 首次进入页面的资源消耗；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">总cpu:(max)(ave)</span><br><span class="line">进程cpu:(max)(ave)</span><br><span class="line">pss-ram：(max)(ave)</span><br><span class="line">private-ram:(max)(ave)</span><br><span class="line">系统总ram：(max)(ave)</span><br><span class="line">全局上行流量：</span><br><span class="line">全局下行流量：</span><br><span class="line">响应耗时：</span><br></pre></td></tr></table></figure></li><li><strong>场景13：</strong> 前台常驻10分钟，切换到后台常驻10分钟，在切换回前台；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">总cpu:(max)(ave)</span><br><span class="line">进程cpu:(max)(ave)</span><br><span class="line">pss-ram：(max)(ave)</span><br><span class="line">private-ram:(max)(ave)</span><br><span class="line">系统总ram：(max)(ave)</span><br><span class="line">全局上行流量：</span><br><span class="line">全局下行流量：</span><br><span class="line">响应耗时：</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>构建脚本：</strong></p></li></ul><ul><li><p><em>方案：</em></p><p>  <code>使用solopi构建脚本；录制脚本时，需要保证时间尽量长，且需要规避无效操作，需要保证脚本尽量简单；在批量执行前，需要先进行三次循环调试，以保证脚本无异常，可批量回放和单脚本循环执行，短时间执行，建议单脚本，跑全维度稳定性，建议批量执行；   </code><br><strong>注意实际执行时，需要保证覆盖的机型，尽量接近真实场景；且用solopi进行多次重复执行的压测场景时，建议不要选择重复播放选项来重复播放多次，这种会生成多个性能文件，且一次只能执行一个用例，可以使用批量执行，选择多个用例，一个用例要执行几次，就选中几次，具体看我的教学视频</strong></p></li></ul><p>监控指标：见上方监控指标</p><ul><li><p><strong>分析监控数据，采集异常数据定位问题 :</strong></p><p>  <code>本方案，主要是为了实现APP稳定性的评测；因此分析时，主要关注终端性能，消耗资源，是否有异常</code></p></li></ul><ul><li><p><em>资源路径：</em></p><p>  <code>该路径下包含有终端资源数据（CPU/MEN/带宽/响应耗时/fps..）和消耗资源数据(电量/流量)，具体数据按勾选的监控对象来落地；</code></p></li></ul><p><img src="/text_image/solopi_%E8%B5%84%E6%BA%90.jpg" alt="alt_text"></p><ul><li><p><em>工具各路径说明：</em></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  solopi/error:工具的错误日志；</span><br><span class="line">  solopi/logcat:整个工具的logcat;</span><br><span class="line">  solopi/patch:扩展/补丁，可实现对solopi工具的功能扩展；</span><br><span class="line">  solopi/records：最重要的文件夹，测试对象（app）的所有数据放在此路径下；</span><br><span class="line">solopi\records\error：app执行，adb监控到的异常会记录在这个目录下；</span><br><span class="line">solopi\records\<span class="built_in">export</span>：导出的用例，会放在这个路径下，从这里复制出来给其他人用</span><br><span class="line">solopi\records\import：从<span class="built_in">export</span>导出的用例，放在这个路径下，然后在solopi配置里点导入按钮，这样就成功导入了；</span><br><span class="line">solopi\records\replay：存放solopi用例执行的保存结果，必须点保存，才会落地；否则存放在cpu中，退出会话就会清空，以json格式存放，可以解析看下；</span><br><span class="line">solopi\records\logcat：存放app的，所有adb日志，和工具的adb日志差不多；</span><br><span class="line">solopi\records\records\20220217183647_20220218093514：见上图，为资源路径，文件名为时间戳；</span><br><span class="line">solopi\records\screenshot:存放app录屏的路径;</span><br><span class="line">solopi\records\screenshots:脚本执行失败时会截图，此为存放失败截图的路径；</span><br><span class="line">solopi\records\tmp：临时目录，用以存放一些临时文件，如强制结束时，所处页面的截图；</span><br><span class="line">  solopi/ScreenCaptures:存放录屏的目录，通过录屏分帧，可以计算每页的启动耗时；</span><br><span class="line">  solopi/screenshots:脚本故障截图的存放路径，脚本故障时会截图；</span><br><span class="line">  </span><br><span class="line">  </span><br></pre></td></tr></table></figure></li><li><p><em>分析数据：</em></p><p>  执行操作且确认结束后，需要按照以下顺序来进行分析，上一步失败，下一步中断：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> 1、先确认本次脚本，是否执行成功；先查看执行结果，仅当执行成功后，将执行结果导出，归档；</span><br><span class="line"> 2、查看下工具的error路径，查看是否有异常抛出，确认与APP无关，则过滤，否则记录；</span><br><span class="line"> 3、通过工具，查看录制的性能结果，观察有无异常值，主要关注以下几点：</span><br><span class="line">cpu:单独执行app时，cpu峰值是否超过80-90%，且cpu超过75%占比是否过大，对比相同场景下网易云的数据，是否超出网易指标20-30%；</span><br><span class="line">men:查看内存是否存在一直增长，不随场景释放的内存泄露问题；查看内存是否存在oom问题，查看hprof文件，结合内存曲线配合场景，分析内存消耗是否合理；同时需要关注相同场景下网易云音乐的资源消耗对比是否比我们的APP具有明显的优势；</span><br><span class="line">带宽：带宽，主要考虑，下载资源和实际消耗的流量比，是否实际消耗的在一个合理区间内；以及最大占有带宽，和分配带宽比，分析带宽资源能否得到合理的利用；</span><br><span class="line">响应耗时：响应耗时，是用户感知最明显的指标；需要符合业界的规范；</span><br><span class="line">启动耗时：activity启动耗时，通过数帧的方式计算，也是用户能直接感知到的，结合响应耗时，需要符合业界规范；</span><br><span class="line">流量：流量，主要考虑升级场景流量消耗，后台常驻&#x2F;前台常驻的流量消耗，活跃及下载场景下的流量消耗；</span><br><span class="line">电量：电量考虑用户活跃场景&#x2F;后台常驻&#x2F;前台常驻时的电量消耗；</span><br><span class="line">异常日志监控：主要是关注工具solopi\records\error或solopi\error及solopi\records\logcat路径下，查看有无异常抛出；</span><br><span class="line">anr&#x2F;crash收集：关注APP的crash和anr目录下是否有响应的异常收集文件；</span><br></pre></td></tr></table></figure></li></ul><p>扩展：有时开发需要dump文件来分析，内存的消耗，此时就需要下载hprf文件提供给开发，低于win10版本，可使用下图方案：<br><img src="/text_image/low_win10.jpg" alt="alt_text"><br>高于win10版本，可通过,以下方式获取：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、ps -ef|grep com.afmobi.boomplayer--获取pid</span><br><span class="line">2、 <span class="built_in">kill</span> -10 pid</span><br><span class="line">3、adb bugreport</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;大纲&quot;&gt;&lt;a href=&quot;#大纲&quot; class=&quot;headerlink&quot; title=&quot;大纲&quot;&gt;&lt;/a&gt;大纲&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;确认需要覆盖的场景；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;场景的指标监控；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;构建脚本；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;分析监控数据，采集异常数据定位问题；&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="稳定性" scheme="https://fenqian.xyz/tags/%E7%A8%B3%E5%AE%9A%E6%80%A7/"/>
    
    <category term="实战" scheme="https://fenqian.xyz/tags/%E5%AE%9E%E6%88%98/"/>
    
    <category term="预装" scheme="https://fenqian.xyz/tags/%E9%A2%84%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>python-多进程</title>
    <link href="https://fenqian.xyz/posts/a1c10886/"/>
    <id>https://fenqian.xyz/posts/a1c10886/</id>
    <published>2022-02-23T03:08:00.000Z</published>
    <updated>2022-02-23T07:02:54.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python多进程简述</span><br><span class="line">python多进程模块方法介绍</span><br><span class="line">python多进程使用</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><ul><li><p><em><strong>python多进程模块简述：</strong></em></p><p>  <code>python由于GIL机制，多线程，实际仅消耗一个内核资源；因此效率较低，python要实现并发，提高性能，只能使用多进程模块，python的多进程模块为multiprocessing，通过使用Pool类实现多进程；   </code></p></li><li><p><em><strong>python多进程模块方法介绍：</strong></em></p><p>  <code>   python多进程模块为multiprocessing，为python的内置模块；通过该模块封装的Pool()对象实现多进程，Pool类的属性介绍如下：</code></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Pool</span><br><span class="line"></span><br><span class="line">run&#x3D;run()#需要被执行的方法&#x2F;任务</span><br><span class="line">iter&#x3D;iter#迭代对象，list&#x2F;变量值</span><br><span class="line"></span><br><span class="line">pool&#x3D;Pool(3)#创建一个仅容纳3个进程的进程池，一旦工作任务超出进程的数量，则需等待，进程池中的进程被释放，任务才能进入进程池；</span><br><span class="line">__init__(self, group&#x3D;None, target&#x3D;None, name&#x3D;None, args&#x3D;(), kwargs&#x3D;&#123;&#125;)#进程池的构造方法</span><br><span class="line">group：进程池所属的进程组，一旦不需要给值；</span><br><span class="line">target：待处理的任务或方法；</span><br><span class="line">name：进程池的别名，默认不给值；</span><br><span class="line">args：调用对象的位置参数，可给值元组&#x2F;列表等可迭代对象或者参数值；</span><br><span class="line">kwargs：调用对象的字典参数；</span><br><span class="line"></span><br><span class="line">使用：在win环境下，进程池必须在当前模块下执行，即必须在 if __name__&#x3D;&#x3D;main:下执行；</span><br></pre></td></tr></table></figure><ul><li><strong>Pool()类中拥有的属性方法如下：</strong></li></ul><ul><li>pool.map()<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">函数原型：map(func, iterable[, chunksize&#x3D;None])</span><br><span class="line">pool.map(run,iter)#使用进程池中的进程来同步构造任务为run,参数为iter的对象，具体效果等同于map()方法；</span><br><span class="line">pool.close()#通过主进程，关闭进程池，子进程任务未完成时，进程池不能接受新的子进程；</span><br><span class="line">pool.join()$通过执行子进程，并等待所有子进程执行完，才进行下一步操作；</span><br></pre></td></tr></table></figure></li><li>pool.map_async(run,iter)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">函数原型：map_async(func, iterable[, chunksize&#x3D;None])</span><br><span class="line">pool.map_async(run,iter)#使用进程池中的进程来同步构造任务为run,参数为iter的对象，具体效果等同于map()方法；</span><br><span class="line">pool.close()#通过主进程，关闭进程池，子进程任务未完成时，进程池不能接受新的子进程；</span><br><span class="line">pool.join()$通过执行子进程，并等待所有子进程执行完，才进行下一步操作；</span><br><span class="line">---效果和pool.map()不相同，mapasyc效率更高；mapasyc主进程未阻塞进程池，不需要等该批次的进程全执行完，新的任务就能进入进程池执行；常用pool.map()</span><br></pre></td></tr></table></figure></li><li>pool.apply()<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">函数原型：apply(func[, args&#x3D;()[, kwds&#x3D;&#123;&#125;]])</span><br><span class="line">apply,参数需要为具体的变量值，且仅在python2支持；</span><br><span class="line">apply方法的原理是，阻塞进程池，一次仅让一个任务进入进程池，该任务完成后，才能执行下一个任务，实际是串行；</span><br></pre></td></tr></table></figure></li><li>pool.applyasyc()<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   函数原型：apply(func[, args&#x3D;()[, kwds&#x3D;&#123;&#125;]],[, callback&#x3D;None]]])</span><br><span class="line">   applyasyc,参数需要为具体的变量值，在python3上支持；</span><br><span class="line">   applyasyc方法的原理是，进程池非阻塞，一次可以让多个任务进入进程池，且未对该批次任务进行阻塞，只要其中一个进程执行完后，就能释放资源，让新的任务进入进程池，实际是并行的,效率等同于mapasyc()；</span><br><span class="line">回调使用：pool.applyasyc(run,kwargs,callback&#x3D;func2)，run的返回作为func2的参数，执行完返回func2的值；</span><br><span class="line">   ---applyasyc效果等同于mapasyc()，只是他具有回调功能，且入参的变量不能是可迭代对象，必须为具体的变量值；</span><br></pre></td></tr></table></figure></li><li>pool.terminal()<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">作用：结束工作进程，不在处理未完成的任务</span><br><span class="line">pool.map(run,iter)</span><br><span class="line">pool.close()</span><br><span class="line">pool.run()</span><br><span class="line">sleep(2)</span><br><span class="line">pool.terminal()#执行两秒后，哪怕进程未执行完，也结束该主进程</span><br></pre></td></tr></table></figure></li></ul></li><li><p><em><strong>python多进程使用：</strong></em></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Pool</span><br><span class="line"></span><br><span class="line">run&#x3D;run()</span><br><span class="line">iter&#x3D;iter</span><br><span class="line"></span><br><span class="line">pool&#x3D;Pool(multiprocessing.cpu_count())</span><br><span class="line">pool.map(run(),iter)</span><br><span class="line">pool.join()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;大纲&quot;&gt;&lt;a href=&quot;#大纲&quot; class=&quot;headerlink&quot; title=&quot;大纲&quot;&gt;&lt;/a&gt;大纲&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;python多进程简述&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;python多进程模块方法介绍&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;python多进程使用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="python" scheme="https://fenqian.xyz/tags/python/"/>
    
    <category term="多进程" scheme="https://fenqian.xyz/tags/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python语法-unittest</title>
    <link href="https://fenqian.xyz/posts/5b3a24b8/"/>
    <id>https://fenqian.xyz/posts/5b3a24b8/</id>
    <published>2022-02-21T06:11:00.000Z</published>
    <updated>2022-02-28T11:26:29.225Z</updated>
    
    <content type="html"><![CDATA[<h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unittest介绍</span><br><span class="line">unittest使用教程</span><br><span class="line">unittest中的方法说明</span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="unittest介绍"><a href="#unittest介绍" class="headerlink" title="unittest介绍"></a>unittest介绍</h4><p><code>unnittest是Python中使用的单测模块，能实现对模块，类，方法的自动调用执行，断言测试，环境管理，结果输出的功能</code></p><p><strong>原理:</strong></p><p>unittest构成要素，主要由以下几部分组成:</p><ul><li>testcase:待测对象，待测对象必须要以test，类方法必须含test开头命名;</li><li>TestLoader类：unittest中的类，用来获取模块中的待测对象；返回待测对象的列表；</li><li>TestSuit：测试套件，将测试case加到套件，套件会根据加入的顺序来确认执行顺序；<ul><li>该类的addTest方法，可将测试对象加到套件中，但对结构有要求，必须保持addTest(测试类(具体测试方法))，这种实现方案能保证最先加入套件的最先被执行；</li><li>该类的另一个方法addTests,也可将测试对象加到套件中，但其对结构也有要求，必须保持addTests([测试类1(测试方法1)，测试类1（测试方法2）])</li><li>这种方法能保证直接将获取的对象加入测试套件，执行顺序按加入套件的顺序，一般是按test的命名顺序：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">testloader &#x3D; unittest.TestLoader()</span><br><span class="line"># 获取测试类里面case名，以固定顺序数组返回</span><br><span class="line">testnames &#x3D; testloader.loadTestsFromTestCase(t)</span><br><span class="line">print(testnames)</span><br><span class="line">suite &#x3D; unittest.TestSuite()</span><br><span class="line">suite.addTest&#x2F;addTests(testnames)  </span><br><span class="line">runn &#x3D; unittest.TextTestRunner(verbosity&#x3D;2)</span><br><span class="line">runn.run(suite)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">   suite &#x3D; unittest.TestSuite()</span><br><span class="line">   suite.addTest(sui.pa(Test_ap))#支持加入对象是一个套件，以实现二次封装</span><br><span class="line">   runn &#x3D; unittest.TextTestRunner(verbosity&#x3D;2)</span><br><span class="line">   runn.run(suite)</span><br><span class="line">   </span><br></pre></td></tr></table></figure></li></ul></li><li>TextTestRunner()类：unittest中的类；用来执行suit，控制测试case的执行，执行生成的是text的报告；如果是需要生成htmlt报告，则使用htmltestrunner;</li><li>执行顺序：默认按case名称顺序来确认执行顺序，也可手动定制顺序，各suit来确定执行顺序；</li><li>环境/前置/后置处理：使用unittest自带的方法，setUp/setDown,setUpClass setDownClass,其中前两个每个case执行前后都会分别执行前置后置处理；后两个在套件执行前后，分别执行签字和后置处理，且仅执行一次；</li><li>断言：unittest提供了个钟断言方法，如下图:<br> <img src="/text_image/unitest%E6%96%AD%E8%A8%80.png" alt="alt_text"></li><li>跳过某些测试case：可以使用unittest的skip装饰器，其中skip装饰器主要有3种;(@unittest.skip(reason)/@unittest.skipIf(condition,reason)/@unittest.skipUnless(condition,reason)/即在满足condition条件下跳过该用例，reason用于描述跳过的原因)</li></ul><p><a href="https://blog.51cto.com/u_2681882/2123613"><strong>参考：unitest使用详解</strong></a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;大纲&quot;&gt;&lt;a href=&quot;#大纲&quot; class=&quot;headerlink&quot; title=&quot;大纲&quot;&gt;&lt;/a&gt;大纲&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;unittest介绍&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;unittest使用教程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;unittest中的方法说明&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="unittest" scheme="https://fenqian.xyz/tags/unittest/"/>
    
    <category term="参数化" scheme="https://fenqian.xyz/tags/%E5%8F%82%E6%95%B0%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>python语法-super方法</title>
    <link href="https://fenqian.xyz/posts/7b2ded6/"/>
    <id>https://fenqian.xyz/posts/7b2ded6/</id>
    <published>2022-02-18T07:14:45.000Z</published>
    <updated>2022-02-18T07:37:13.112Z</updated>
    
    <content type="html"><![CDATA[<p><code>super方法用来，继承父类，或祖父类；常用的结构为super(C,self)/python3括号内的可缩写（super()）;super方法本身是一个类，和当前所在的类（父类）无关，该类使用了mro的算法（方法查找顺序）来决定继承类的顺序</code></p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class A():</span><br><span class="line"></span><br><span class="line">def __init__(self):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---A---&quot;</span>)</span><br><span class="line"></span><br><span class="line">class B(A):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---B---&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(super.__mro__)</span><br><span class="line">        super(B,self).__init__()</span><br><span class="line"></span><br><span class="line">class C(A):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---C---&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(super.__mro__)</span><br><span class="line">        super(C,self).__init__()</span><br><span class="line"></span><br><span class="line">class D(B,C):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---D---&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(super.__mro__)</span><br><span class="line">        super().__init__()</span><br><span class="line">D()</span><br></pre></td></tr></table></figure><p><strong>方法查找顺序说明:</strong></p><pre><code>super.mro策略；采用的是查找继承类的上一个节点的方式来实现继承，如super(D,self).__init__();实际上继承的是上一个节点类B；Python2和Python3使用super来继承时，使用上存在差异，Python必须使用super(C,self)方式继承，python3则可同时使用super()和super(C,self)来进行继承；同时Python2存在class A:/class A(object):这两种经典类和新式类；Python3只有新式类；经典类和新式类的mro策略不一样，虽然两者都是使用从左到右的广度遍历，经典类在某类已继承时，后续在查找到这个类，也不在继承；新式类，在某类已经继承时，后续在查找到改类，会继承最新查找到的；</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;super方法用来，继承父类，或祖父类；常用的结构为super(C,self)/python3括号内的可缩写（super()）;super方法本身是一个类，和当前所在的类（父类）无关，该类使用了mro的算法（方法查找顺序）来决定继承类的顺序&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>稳定性治理-暴力回放</title>
    <link href="https://fenqian.xyz/posts/81de0e43/"/>
    <id>https://fenqian.xyz/posts/81de0e43/</id>
    <published>2022-02-17T01:52:00.000Z</published>
    <updated>2022-02-17T09:22:49.306Z</updated>
    
    <content type="html"><![CDATA[<p><code>暴力回放，是指重复执行某些操作；这种重复执行主流程操作，能极大程度的覆盖主流程的功能，保证系统核心功能的质量；</code></p><h4 id="覆盖场景"><a href="#覆盖场景" class="headerlink" title="覆盖场景"></a>覆盖场景</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">music首页，点击歌单播放按钮播放，然后息屏进入后台，10s后切换回前台；</span><br><span class="line">music首页，点开播放列表，然后点击music播放音乐，然后关闭播放列表，然后切换到后台，10s后切换回前台；</span><br><span class="line">music首页，进入歌单，点击全部播放，点击全部下载，然后返回首页，上下滑动一屏，然后切换回后台，10s后切换回前台；</span><br><span class="line">music首页，点击头像登录，退出，切换到后台，10s后切换回前台；</span><br><span class="line">treding首页，点击任意music播放，切换到后台，10s后回到前台，关闭播放详情页；</span><br><span class="line">首页，滑动到treding页，上下滑动一屏；然后向左滑动一屏，上下滑动一屏，然后向左滑动一屏，上下滑动一屏,然后向左滑动一屏，上下滑动一屏,然后切换到后台，停留10s;然后点击导航页到library页，然后点击导航页到search页，然后点击导航页到music页；</span><br><span class="line">搜索页，搜索music，搜索结果页左右滚动一屏；点击结果页播放，然后切换到后台休眠10s,在切换回前台;</span><br><span class="line">首页，点击导航页进入library页；点击进入喜欢的music页，点击全部播放；然后切换到后台，停留10s，在切换回前台，退出music页，切换回首页；</span><br><span class="line">首页，切换到buzz页；上下滑动两屏，点击buzz关注按钮，buzz点赞，buzz评论，点击查看buzz详情，然后回退到buzz页，然后在切换到后台，休眠10s，在切换回前台；</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;暴力回放，是指重复执行某些操作；这种重复执行主流程操作，能极大程度的覆盖主流程的功能，保证系统核心功能的质量；&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;覆盖场景&quot;&gt;&lt;a href=&quot;#覆盖场景&quot; class=&quot;headerlink&quot; title=&quot;覆盖场景&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="稳定性" scheme="https://fenqian.xyz/tags/%E7%A8%B3%E5%AE%9A%E6%80%A7/"/>
    
    <category term="暴力回放" scheme="https://fenqian.xyz/tags/%E6%9A%B4%E5%8A%9B%E5%9B%9E%E6%94%BE/"/>
    
  </entry>
  
  <entry>
    <title>传音刷机</title>
    <link href="https://fenqian.xyz/posts/a1b2e86a/"/>
    <id>https://fenqian.xyz/posts/a1b2e86a/</id>
    <published>2022-02-16T09:07:00.000Z</published>
    <updated>2022-02-16T09:13:09.026Z</updated>
    
    <content type="html"><![CDATA[<ol><li>设置 -&gt; 开发者模式打开 oem unlock<br>输入 adb reboot bootloader</li><li>进入fastboot模式输入 fastboot flashing unlock。按住音量上键确认unlock</li><li>fastboot reboot 重启</li><li>开机后,输入 adb root</li><li>执行 adb disable-verity</li><li>执行 adb reboot</li><li>重启后 执行 adb root</li><li>执行 adb remount</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;设置 -&amp;gt; 开发者模式打开 oem unlock&lt;br&gt;输入 adb reboot bootloader&lt;/li&gt;
&lt;li&gt;进入fastboot模式输入 fastboot flashing unlock。按住音量上键确认unlock&lt;/li&gt;
&lt;li&gt;fa</summary>
      
    
    
    
    <category term="工具" scheme="https://fenqian.xyz/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="刷机" scheme="https://fenqian.xyz/tags/%E5%88%B7%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>SOLOPI使用教程</title>
    <link href="https://fenqian.xyz/posts/49e140/"/>
    <id>https://fenqian.xyz/posts/49e140/</id>
    <published>2022-02-16T02:39:00.000Z</published>
    <updated>2022-02-16T08:19:43.789Z</updated>
    
    <content type="html"><![CDATA[<h3 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">介绍</span><br><span class="line">使用指南</span><br><span class="line">和业务结合</span><br><span class="line">下一步</span><br></pre></td></tr></table></figure><span id="more"></span><ul><li><p><em><strong>介绍</strong></em></p><p>  <code>solopi是支付宝团队研发的ui自动化工具;支持UI录制回放，录制脚本的编辑/扩展/转换成appium脚本/录制脚本支持分发到其他的设备执行；同时还支持性能测试和一机多控，执行采集各种性能数据，同时支持通过一台设备控制多台设备的行为；</code></p></li><li><p><em><strong>使用指南</strong></em></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">环境准备</span><br><span class="line">app配置</span><br><span class="line">录制</span><br><span class="line">回放</span><br><span class="line">性能测试</span><br><span class="line">一机多控</span><br></pre></td></tr></table></figure><ul><li><p><strong>环境准备</strong></p><ul><li><p><em>下载配置Androidsdk</em></p><ul><li>地址:<a href="https://developer.android.com/studio/releases/platform-tools#downloads">https://developer.android.com/studio/releases/platform-tools#downloads</a></li><li>操作：下载安装完Android调试工具后，在下载对应系统版本的 SDK Platform Tools，配置好环境变量，注意win10以上系统环境变量配置即生效，低版本需要重启pc才能生效；</li></ul></li><li><p><em>给手机授权</em></p><ul><li>操作：进入开发者模式，并授权usb调试权限；</li></ul></li><li><p><em>检测环境并连接wifi</em></p><ul><li>操作：通过adb devices命令检测，同时要连接wifi;</li></ul></li><li><p><em>建立连接</em></p><ul><li>操作：通过pc的cmd启动服务,输入（adb tcpip 5555）</li></ul></li><li><p><em>下载solopi的apk</em></p><ul><li>地址：<a href="https://github.com/alipay/SoloPi/releases/download/v0.11.2/SoloPi_0.11.2.apk">apk点击下载</a></li><li>操作：下载安装后，通过配置授权</li><li>环境配置：<a href="https://github.com/alipay/SoloPi/wiki/FirstUse">地址跳转参考内容</a></li></ul></li></ul></li><li><p><strong>app配置</strong></p><p>  <code>按需配置，一般不需要进行配置；可参考上方的环境配置</code></p></li><li><p><strong>录制/回放</strong></p><ul><li><a href="https://github.com/alipay/SoloPi/wiki/RecordCase"><em>官方教程</em></a></li><li>录制：录制支持直接对收到操作进行录制，且录制的脚本支持编辑/扩展/保存/导入等操作，支持各类操作和断言，支持图像识别，简单方便；</li><li>回放：回放支持单脚本回放，支持批量回放，支持重复播放；</li><li>优点：操作简单，可扩展编辑定制策略，可同步到其他设备，可重复回放支持暴力遍历；</li><li>缺点：不支持持续集成，需要手动触发；</li></ul></li><li><p><strong>性能测试</strong></p><ul><li><a href="https://github.com/alipay/SoloPi/wiki/Performance"><em>官方教程</em></a></li><li>操作：性能测试时，直接勾选需要监控的性能指标，不进行录制则可以实时查看；进行录制时，点击录制按钮开始录制，录制结束后点击录制结束按钮，录制的性能数据会存储下来，支持图表分析，可同时存储多份性能数据；</li><li>优点：支持实时查看场景的性能，可和业务测试结合方便简单；支持性能录制，可和UI自动化结合，查看各场景的性能变化和差异；</li><li>缺点：不支持续集成，利用脚本进行回放时不支持性能监控；</li></ul></li><li><p><strong>一机多控</strong></p><ul><li>[<em>官方教程</em>]</li><li>操作：多台设备上同时安装solopi和待测APP；做好配置和授权操作，同时主机（控制机）选中一机多控，选中为主机；其他设备点击一机多控，选中为从机；然后用主机扫码录入从机，然后在主机点击建立主从机的连接，然后主机点击录屏按钮，开始进行一机多控操作；原理是利用solopi的录屏回放功能，主机录屏，从机回放；</li><li>优点：可以用一台机器，控制多台设备操作，能有效的覆盖兼容性测试；</li><li>缺点：不支持ios系统；由于是先录制，在回放，因此所有设备都需要有网络，且必须是同一局域网，且存在延时；不支持批量操作时，同时监控性能数据；</li></ul></li></ul><ul><li><p><em><strong>和业务结合</strong></em></p><p>  <code>和业务结合使用前，需要先梳理清楚solopi的优缺点：</code></p><p>  优点：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">支持录制UI自动化，且录制的脚本支持编辑自定义，且无环境依赖；</span><br><span class="line">录制的脚本可以导出在任意设备上回放，或者转换成appium脚本；</span><br><span class="line">支持回放管理，支持批量回放和重复回放；</span><br><span class="line">支持性能测试，实时监控APP性能和录制APP的性能；</span><br><span class="line">支持一机多控，可同时控制多台设备；</span><br></pre></td></tr></table></figure><p>  缺点：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">不支持iOS设备，仅支持Android设备；</span><br><span class="line">工具是一款纯功能测试辅助软件，不支持持续集成；</span><br><span class="line">功能过于离散，几个功能不能结合在一起使用；</span><br></pre></td></tr></table></figure><ul><li><p><strong>和业务结合：</strong></p><ul><li><p><em>rc验收阶段：</em><br><code>建议功能测试完毕且无误后，最后在rc验收一遍，主流程，验收时进行功能&quot;录制&quot;,录制的脚本可定期回放/开发了相关功能时进行回放/也可以通过Jenkins触发回放;</code></p></li><li><p><em>灰度/线上验收阶段：</em><br><code>建议测试进行线上验收时，进行录制，录制的脚本，可通过扩展进行定期回放；</code></p></li><li><p><em>冒烟/功能测试/rc验收阶段：</em><br><code>建议以上阶段，进行测试验收时，打开性能测试监控，观察功能场景有没用性能问题；</code></p></li><li><p><em>冒烟/兼容性测试阶段：</em><br><code>可以使用一机多控功能，进行兼容性测试；但此功能对控制的终端有要求，最好有固定的兼容环境；</code></p></li><li><p><em>稳定性治理/预装版本暴力回放：</em><br><code>使用重复回放功能进行暴力回放；</code></p></li></ul></li></ul></li><li><p><em><strong>下一步：</strong></em></p></li></ul><p><a href="https://github.com/alipay/SoloPi"><em>Solopi github</em>_</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;大纲&quot;&gt;&lt;a href=&quot;#大纲&quot; class=&quot;headerlink&quot; title=&quot;大纲&quot;&gt;&lt;/a&gt;大纲&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;介绍&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;使用指南&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;和业务结合&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;下一步&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="ui自动化" scheme="https://fenqian.xyz/tags/ui%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    <category term="稳定性" scheme="https://fenqian.xyz/tags/%E7%A8%B3%E5%AE%9A%E6%80%A7/"/>
    
    <category term="前端性能" scheme="https://fenqian.xyz/tags/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/"/>
    
    <category term="solopi" scheme="https://fenqian.xyz/tags/solopi/"/>
    
  </entry>
  
</feed>

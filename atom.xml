<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fen Qian Web</title>
  
  <subtitle>HELLO,YOU</subtitle>
  <link href="https://fenqian.xyz/atom.xml" rel="self"/>
  
  <link href="https://fenqian.xyz/"/>
  <updated>2021-11-11T03:33:27.127Z</updated>
  <id>https://fenqian.xyz/</id>
  
  <author>
    <name>GAVIN HUANG</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python文档管理</title>
    <link href="https://fenqian.xyz/posts/2020cd00/"/>
    <id>https://fenqian.xyz/posts/2020cd00/</id>
    <published>2021-11-11T02:15:00.000Z</published>
    <updated>2021-11-11T03:33:27.127Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python文档说明"><a href="#python文档说明" class="headerlink" title="python文档说明"></a>python文档说明</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">文档管理的作用</span><br><span class="line">文档管理模块pydoc介绍</span><br><span class="line">怎么使用文档管理</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><ul><li><p><strong>文档管理的作用</strong></p><p>  <code>  通过在模块/类/函数中进行规范化注释，可以有效的说明模块/类/函数的功能；清晰的体现程序的结构；  </code></p></li><li><p><strong>文档管理模块pydoc.py</strong>  </p><p>  <code>  文档管理模块pydoc，是python内置的一个文档管理模块。它可以实现在线实时/离线查看。模块/类/函数（内置/第三方/自有均支持）中的注释信息，同时可以将规范的注释信息生成html文件进行查看；  </code></p></li><li><p><strong>怎么实现</strong> </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">模块中注释的规范</span><br><span class="line">文档管理模块实时查看</span><br><span class="line">文档管理模块生成html文件查看</span><br></pre></td></tr></table></figure><ul><li><em>模块中注释的规范</em></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">   e.g</span><br><span class="line">   # -*- coding: utf-8 -*-</span><br><span class="line">   </span><br><span class="line">   &quot;&quot;&quot;</span><br><span class="line">   @author jw</span><br><span class="line">   @desc 本模块是一个测试文件，用来说明pydoc的读取内容</span><br><span class="line">   @date 2017&#x2F;4&#x2F;13</span><br><span class="line">   &quot;&quot;&quot;</span><br><span class="line">   </span><br><span class="line">   #测试变量</span><br><span class="line">   data&#x3D;1</span><br><span class="line">   </span><br><span class="line">   class Test():</span><br><span class="line">       &quot;&quot;&quot;</span><br><span class="line">       测试类</span><br><span class="line">       &quot;&quot;&quot;</span><br><span class="line">   </span><br><span class="line">       def test_c(s):</span><br><span class="line">           &quot;&quot;&quot;</span><br><span class="line">           测试函数</span><br><span class="line">           &quot;&quot;&quot;</span><br><span class="line">           pass</span><br><span class="line">   </span><br><span class="line">   def test():</span><br><span class="line">       &quot;&quot;&quot;</span><br><span class="line">       测试函数</span><br><span class="line">       &quot;&quot;&quot;</span><br><span class="line">       pass</span><br><span class="line">       </span><br><span class="line">以上就是相对标准的注释规范，注释一般由三部分构成模块的注释，类的注释，函数的注释；以上注释在编译后，可使用pydoc进行查看，如下图，第一个区域是顶部注释；第二个区域是类注释，其中会包含类函数，第三个区域是模块函数注释；最后为模块定义的变量；</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>_查看效果如下_：</li></ul><p>  <img src="/text_image/pydoc.jpg" alt="alt_text"></p><ul><li><em>实时查看模块说明文档</em></li></ul><p>  实时查看可使用pydoc的help方法，注意非内置模块，使用前，需要先导入模块</p><p>  <img src="/text_image/help.png" alt="alt_text"></p><ul><li><em>离线生成html查看模块文档</em></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">生成全局html文档命令：python  -m pydoc -p *** #在通过loaclhost:****的方式访问查看</span><br><span class="line">查看特定的对象 python -m pydoc -w test&#x2F;test.Test #生成特定对象的html文件</span><br><span class="line">查找特定对象的文档 python -m pydoc -k test</span><br></pre></td></tr></table></figure></li></ul><p><code>PS:    上方的&quot;&quot;&quot;注释&quot;&quot;&quot;称为文档字符串，可通过对象的__doc__方法来进行查看，如Test.__doc__;</code></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;python文档说明&quot;&gt;&lt;a href=&quot;#python文档说明&quot; class=&quot;headerlink&quot; title=&quot;python文档说明&quot;&gt;&lt;/a&gt;python文档说明&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;文档管理的作用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;文档管理模块pydoc介绍&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;怎么使用文档管理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="python" scheme="https://fenqian.xyz/tags/python/"/>
    
    <category term="说明文档" scheme="https://fenqian.xyz/tags/%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>python语法特性</title>
    <link href="https://fenqian.xyz/posts/d641bafc/"/>
    <id>https://fenqian.xyz/posts/d641bafc/</id>
    <published>2021-11-03T09:30:00.000Z</published>
    <updated>2021-11-10T07:55:07.655Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python语法特性"><a href="#python语法特性" class="headerlink" title="python语法特性"></a>python语法特性</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">return</span> a or b:遇到为<span class="literal">true</span>的值即返回该值，如果均为<span class="literal">false</span>,即返回最后一个</span><br><span class="line"><span class="built_in">return</span> a and b:遇到为<span class="literal">false</span>的值，即返回该值，如果均为<span class="literal">true</span>就返回最后一个</span><br><span class="line">生成器比用迭代器实现块的多，因为生成器底层是通过c编写的</span><br><span class="line">[line.upper() <span class="keyword">for</span> line <span class="keyword">in</span> open(text.txt) <span class="keyword">if</span> line[0]==1]</span><br><span class="line">[filter(f(i),list)]<span class="comment">#生成器，返回由list中元素在f(i)中执行满足条件的元素构成的list</span></span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;python语法特性&quot;&gt;&lt;a href=&quot;#python语法特性&quot; class=&quot;headerlink&quot; title=&quot;python语法特性&quot;&gt;&lt;/a&gt;python语法特性&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; a or b:遇到为&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;的值即返回该值，如果均为&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,即返回最后一个&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; a and b:遇到为&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;的值，即返回该值，如果均为&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;就返回最后一个&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;生成器比用迭代器实现块的多，因为生成器底层是通过c编写的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[line.upper() &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; line &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; open(text.txt) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; line[0]==1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[filter(f(i),list)]	&lt;span class=&quot;comment&quot;&gt;#生成器，返回由list中元素在f(i)中执行满足条件的元素构成的list&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="python" scheme="https://fenqian.xyz/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>全局函数局部函数</title>
    <link href="https://fenqian.xyz/posts/ae3a85c8/"/>
    <id>https://fenqian.xyz/posts/ae3a85c8/</id>
    <published>2021-11-03T06:23:00.000Z</published>
    <updated>2021-11-03T06:34:09.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="全局局部函数"><a href="#全局局部函数" class="headerlink" title="全局局部函数"></a>全局局部函数</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">全局函数：global</span><br><span class="line">局部函数：nonlocal</span><br></pre></td></tr></table></figure><span id="more"></span><p><strong>global</strong></p><p><code>全局函数在模块py中生效；使用时需要先定义，在声明；一次声明，模块中全局使用，全局和局部不能是同一个变量； global a a=s</code></p><p><strong>nonlocal</strong></p><p><code>局部变量函数在模块中局部函数中生效；需要先声明，后定义成局部变量，一旦定义成局部变量就仅在该函数中生效，离开该函数就不生效，不能和全局变量为同一个变量 a=s nonlocal a</code></p><p><a href="https://www.cnblogs.com/liyang93/p/6669874.html">参考</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;全局局部函数&quot;&gt;&lt;a href=&quot;#全局局部函数&quot; class=&quot;headerlink&quot; title=&quot;全局局部函数&quot;&gt;&lt;/a&gt;全局局部函数&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;全局函数：global&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;局部函数：nonlocal&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="python" scheme="https://fenqian.xyz/tags/python/"/>
    
    <category term="变量" scheme="https://fenqian.xyz/tags/%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>可变对象合并方法</title>
    <link href="https://fenqian.xyz/posts/def45bf2/"/>
    <id>https://fenqian.xyz/posts/def45bf2/</id>
    <published>2021-11-03T03:38:00.000Z</published>
    <updated>2021-11-03T03:57:38.451Z</updated>
    
    <content type="html"><![CDATA[<h1 id="可变对象合并的方法"><a href="#可变对象合并的方法" class="headerlink" title="可变对象合并的方法"></a>可变对象合并的方法</h1><p>eg:list</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">+:合并</span><br><span class="line">+=：增加赋值</span><br><span class="line">append()：添加</span><br><span class="line">extend()：插入</span><br><span class="line"></span><br><span class="line">list=[1,2,3]</span><br><span class="line">l=[4]</span><br><span class="line">s=list+l</span><br><span class="line">s=list.append(l)</span><br><span class="line">s=list.extend(l)</span><br><span class="line">list+=l</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;list&#x27;</span>,list)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;l&#x27;</span>,l)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;s&#x27;</span>,s)</span><br></pre></td></tr></table></figure><span id="more"></span><p><strong>+合并</strong></p><p><code> 合并方法，是影响最小，速度最慢的方法；因为他不会改变原序列，会复制后生成一个新的序列    </code></p><p><strong>append()</strong><br>    <code>    添加方法，会直接将对象添加到原序列末尾；会改变原序列    </code></p><p><strong>extend()</strong><br>    <code>    插入方法，会将对象的元素添加到序列末尾，而不是对象，会改变原序列    </code></p><p><strong>+=</strong><br>    <code>    增强赋值方法，类似于合并=；和extend()等效，效率比其低，会改变原序列    </code></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;可变对象合并的方法&quot;&gt;&lt;a href=&quot;#可变对象合并的方法&quot; class=&quot;headerlink&quot; title=&quot;可变对象合并的方法&quot;&gt;&lt;/a&gt;可变对象合并的方法&lt;/h1&gt;&lt;p&gt;eg:list&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+:合并&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+=：增加赋值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;append()：添加&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;extend()：插入&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list=[1,2,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;l=[4]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s=list+l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s=list.append(l)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s=list.extend(l)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list+=l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;list&amp;#x27;&lt;/span&gt;,list)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;l&amp;#x27;&lt;/span&gt;,l)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;s&amp;#x27;&lt;/span&gt;,s)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="python" scheme="https://fenqian.xyz/tags/python/"/>
    
    <category term="序列" scheme="https://fenqian.xyz/tags/%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>阿里测开面试题</title>
    <link href="https://fenqian.xyz/posts/92386e32/"/>
    <id>https://fenqian.xyz/posts/92386e32/</id>
    <published>2021-11-02T08:31:00.000Z</published>
    <updated>2021-11-02T08:37:28.191Z</updated>
    
    <content type="html"><![CDATA[<p>技术题</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">了解多线程吗？了解 Python 的 GIL 锁吗？</span><br><span class="line">说一下进程和线程</span><br><span class="line">进程间通信的方式有哪些？</span><br><span class="line">说一下什么是乐观锁和悲观锁？</span><br><span class="line">AOP</span><br><span class="line">什么是 IOC？</span><br><span class="line">list 和 map 相关</span><br><span class="line">解释一下工厂模式？</span><br><span class="line">内存泄漏</span><br><span class="line">会做性能测试吗？容量测试/稳定性测试？</span><br><span class="line">Python2 和 3 的区别？</span><br><span class="line">DNS 解释一下？</span><br><span class="line">用户名、密码、验证码哪个校验顺序？</span><br><span class="line">Linux 根据进程查端口/端口查进程</span><br><span class="line">常用的 Linux 指令？</span><br><span class="line">排序算法</span><br><span class="line">围绕工具开发</span><br><span class="line">工具是如何开发的？</span><br><span class="line">为什么要开发这个工具？</span><br><span class="line">公司内部没有类似平台吗？</span><br><span class="line">效能工具包含哪些？举几个例子？</span><br><span class="line">介绍一下自研的接口自动化框架？</span><br><span class="line">有哪些模块组成？</span><br><span class="line">相比其他框架有哪些优势？缺点有哪些？</span><br><span class="line">介绍一下框架的代码生成模块是怎样实现的？</span><br><span class="line">使用你的框架测一个接口需要做哪些步骤？</span><br><span class="line">接口的断言怎么做？</span><br><span class="line">接口测试带来的收益？</span><br><span class="line">testng 和 junit 优缺点</span><br><span class="line">造数据工具，如何开发、提效多少。</span><br><span class="line">大数据测试</span><br><span class="line">怎么测试数据的准确性？</span><br><span class="line">算法测试</span><br><span class="line">项目经验</span><br><span class="line">算法测试做哪些工作？</span><br><span class="line">如何进行算法评测？</span><br><span class="line">不同的算法类型，评测标准是不同的</span><br><span class="line">介绍一个最近的算法测试案例？</span><br><span class="line">如何选择测试集？测试集的特征如何选择？</span><br><span class="line">说一些算法测试发现的 badcase？</span><br><span class="line">如何保障算法质量？</span><br></pre></td></tr></table></figure><p>编程题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">线程交替打印奇偶数</span><br><span class="line">最长回文子串</span><br></pre></td></tr></table></figure><p>项目经历</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">介绍一下负责的项目？</span><br><span class="line">针对老系统（有很多僵尸代码）如何保证质量？</span><br><span class="line">做过的项目遇到的最大风险点？</span><br><span class="line">怎么保障项目的质量？</span><br><span class="line">如何处理紧急需求？</span><br><span class="line">项目的迭代方式？</span><br><span class="line">说一下最近项目推动成功的案例？</span><br><span class="line">说一下自己人力分配？</span><br></pre></td></tr></table></figure><p>持续集成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">了解 CI 吗？解释一下 CI</span><br><span class="line">如何衡量测试用例质量？</span><br><span class="line">说说你对测试的理解？或者说质量的理解？</span><br></pre></td></tr></table></figure><p>团队管理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">团队管理上有没有什么难点？</span><br><span class="line">你期望一个怎样的测试团队？</span><br><span class="line">团队的测试开发比是怎样的？</span><br><span class="line">如何衡量全职/外包比例？</span><br><span class="line">外包的忠诚度如何保障？</span><br><span class="line">你能为团队带来什么？</span><br></pre></td></tr></table></figure><p>HR 问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">为什么跳槽？</span><br><span class="line">为什么选择阿里？</span><br><span class="line">前几家公司收获</span><br><span class="line">有什么问题要问的？</span><br><span class="line">工作中最大的挑战（最大挫折），如何克服的？</span><br><span class="line">最大的有点和缺点？各自说一个？</span><br><span class="line">未来的职业 3-5 年发展规划？</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;技术题&lt;/p&gt;</summary>
    
    
    
    <category term="生活" scheme="https://fenqian.xyz/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="面试" scheme="https://fenqian.xyz/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="阿里" scheme="https://fenqian.xyz/tags/%E9%98%BF%E9%87%8C/"/>
    
  </entry>
  
  <entry>
    <title>工作梳理</title>
    <link href="https://fenqian.xyz/posts/8c69a8ec/"/>
    <id>https://fenqian.xyz/posts/8c69a8ec/</id>
    <published>2021-10-12T09:15:00.000Z</published>
    <updated>2021-10-13T10:35:46.085Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工作梳理"><a href="#工作梳理" class="headerlink" title="工作梳理"></a>工作梳理</h1><ul><li><em><strong>大纲</strong></em></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">重点核心</span><br><span class="line">kpi导向</span><br><span class="line">日常工作</span><br></pre></td></tr></table></figure><span id="more"></span><ul><li><p><em><strong>重点核心</strong></em></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">外部标准&#x2F;规范（预装&#x2F;上架）：稳定性&#x2F;anr&#x2F;clash&#x2F;内存曲线（P0）</span><br><span class="line">线上监控&#x2F;稳定性：监控体系（P1）</span><br><span class="line">服务性能提升：性能测试(P1)</span><br><span class="line">增效：环境治理，效率提升</span><br></pre></td></tr></table></figure><ul><li><strong>外部标准</strong></li></ul><p> <code> 外部标准，指的是对接传音/其他外部时（谷歌），需要遵循对方的标准；因为不达标会影响上线，因此优先级最高为PO级； </code></p><ul><li>场景：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">稳定性测试：监控anr/clash/内存曲线是否达标</span><br><span class="line">核心：场景需要和标准同步</span><br><span class="line">实践：实用性强</span><br></pre></td></tr></table></figure></li><li>实现：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">待补</span><br></pre></td></tr></table></figure></li><li><strong>线上监控</strong></li></ul><p> <code> 线上监控是质量保障体系的重要一环；设定监控可以及时发现线上问题，及时处理；有效保障系统的质量； </code></p><ul><li>场景：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">系统监控：接口监控/服务器资源监控/数据的监控/基于埋点的功能监控</span><br></pre></td></tr></table></figure></li><li>实践：</li></ul><p>  <a href="https://testerhome.com/topics/19188">线上监控体系概述</a></p><ul><li><strong>服务性能提升</strong> </li></ul><p>  <code>  c端的系统，性能问题通常是困扰系统的常见问题；性能保障，也是对系统可用性的最大保障  </code></p><ul><li>场景：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">接口性能优化</span><br><span class="line">服务性能优化</span><br><span class="line">app性能优化</span><br></pre></td></tr></table></figure></li><li>实践：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">接口性能：接口性能其实是中后台性能，前后端分离的情况下，后端的性能瓶颈，往往是整个系统的性能瓶颈；</span><br><span class="line">服务性能：服务性能是后端的性能，粒度比接口更细，一般不用关注；</span><br><span class="line">客户端性能：客户端时和用户交互的，客户端性能直接影响到用户的体验；</span><br></pre></td></tr></table></figure></li><li><strong>增效/功能自动化</strong>  </li></ul><p>  <code>  功能自动化，一般用于回归测试，定期的巡检；起到增效的作用；  </code></p><ul><li>场景：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CI/CD持续迭代系统</span><br><span class="line">接口自动化</span><br><span class="line">ui自动化</span><br><span class="line">数据测试自动化</span><br><span class="line">常见的自动化脚本等</span><br></pre></td></tr></table></figure></li><li>实践：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">待补</span><br></pre></td></tr></table></figure></li></ul></li><li><p><em><strong>kpi导向</strong></em></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">增效&#x2F;功能自动化：ui自动化&#x2F;接口自动化(P2)&#x2F;数据测试&#x2F;常见的自动化脚本</span><br></pre></td></tr></table></figure><ul><li><em><strong>日常工作</strong></em></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">稳定性测试（monkey）</span><br><span class="line">接口自动化维护</span><br><span class="line">ui自动化维护</span><br><span class="line">数据测试脚本构建</span><br><span class="line">常见脚本开发</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;工作梳理&quot;&gt;&lt;a href=&quot;#工作梳理&quot; class=&quot;headerlink&quot; title=&quot;工作梳理&quot;&gt;&lt;/a&gt;工作梳理&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;大纲&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;重点核心&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kpi导向&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;日常工作&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="日常" scheme="https://fenqian.xyz/tags/%E6%97%A5%E5%B8%B8/"/>
    
    <category term="价值" scheme="https://fenqian.xyz/tags/%E4%BB%B7%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>各家模拟器对比分析</title>
    <link href="https://fenqian.xyz/posts/83661fed/"/>
    <id>https://fenqian.xyz/posts/83661fed/</id>
    <published>2021-09-28T02:31:00.000Z</published>
    <updated>2021-09-29T03:55:54.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="各家模拟器对比分析"><a href="#各家模拟器对比分析" class="headerlink" title="各家模拟器对比分析"></a>各家模拟器对比分析</h1><ul><li><em><strong>大纲</strong></em></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">对比产品</span><br><span class="line">包体大小</span><br><span class="line">安兔兔评分</span><br><span class="line">支持功能</span><br><span class="line">资源消耗/操作体验</span><br></pre></td></tr></table></figure><span id="more"></span><ul><li><p><strong>对比产品</strong></p><ul><li>网易Mumu模拟器</li><li>逍遥模拟器</li><li>腾讯手游模拟器</li><li>黑雷模拟器</li><li>水果模拟器</li></ul></li><li><p><strong>包体大小</strong></p><ul><li>网易Mumu模拟器</li></ul><ul><li>apk大小: 8.87M</li><li>安装消耗硬盘: 2.73G</li></ul><ul><li>逍遥模拟器<ul><li>apk大小: 351M </li></ul></li></ul><ul><li>安装消耗硬盘: 1.96G</li></ul><ul><li>腾讯手游模拟器<ul><li>apk大小: 3.49M </li></ul></li></ul><ul><li>安装消耗硬盘: 235M</li></ul><ul><li>黑雷模拟器</li></ul><ul><li>apk大小: 126M</li><li>安装消耗硬盘: 333M</li></ul><ul><li>水果模拟器</li></ul><ul><li>apk大小: 37.1M</li><li>安装消耗硬盘: 125M</li></ul></li><li><p><strong>安兔兔评分</strong></p><ul><li>网易Mumu模拟器</li></ul><ul><li>评分<br><img src="/text_image/%E7%BD%91%E6%98%93.png" alt="alt text"></li></ul><ul><li>逍遥模拟器<ul><li>评分<br><img src="/text_image/%E9%80%8D%E9%81%A5%E6%B8%B8.png" alt="alt text"></li></ul></li><li>腾讯手游模拟器</li></ul><ul><li>评分<br>无，不支持非分发应用</li></ul><ul><li>黑雷模拟器（付费）</li></ul><ul><li>评分</li></ul><ul><li>水果模拟器（付费）</li></ul><ul><li>评分</li></ul></li><li><p><strong>支持功能</strong></p><ul><li>网易Mumu模拟器<ul><li>支持功能<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">支持安装boomplay</span><br><span class="line">支持对boomplay进行的所有操作</span><br><span class="line">不支持手势操作</span><br></pre></td></tr></table></figure></li></ul></li><li>逍遥模拟器<pre><code>* 支持功能</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">支持安装boomplay</span><br><span class="line">支持对boomplay进行的所有操作</span><br><span class="line">不支持手势操作</span><br><span class="line">安兔兔跑分时崩溃</span><br><span class="line">打开app时崩溃</span><br></pre></td></tr></table></figure></li><li>腾讯手游模拟器<ul><li>支持功能<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不支持安装我们的apk,仅支持安装在腾讯手游助手分发的应用</span><br></pre></td></tr></table></figure></li></ul></li><li>黑雷模拟器（付费）<ul><li>支持功能<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">不支持安装非分发的应用</span><br><span class="line">含病毒组件，用来挖矿的</span><br></pre></td></tr></table></figure></li></ul></li><li>水果模拟器（付费）<ul><li>支持功能<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">云手机，非手机模拟器</span><br><span class="line">不支持安装boomplay</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>资源消耗/操作体验</strong> </p><ul><li><p>网易Mumu模拟器<br><img src="/text_image/%E7%BD%91%E6%98%93_cpu.jpg" alt="alt text"></p><ul><li>操作体验<br><code>覆盖从5.3.0到最新版本的所有大版本，功能均支持；稳定性也较好，无崩溃或anr现象；操作流畅，无卡顿；</code></li></ul></li><li><p>逍遥模拟器<br><img src="/text_image/%E9%80%8D%E9%81%A5%E6%B8%B8_cpu.png" alt="alt text"></p></li></ul></li><li><p><strong>结论</strong> </p><ul><li><em><strong>android</strong></em></li></ul><p><code>建议使用网易mumu模拟器，改模拟器支持我们app的所有版本，操作流程，资源消耗较少，稳定性较高；且一旦出现模拟器/app崩溃等异常现象时，只要电脑支持远程连接，恢复也较方便；</code></p><ul><li><em><strong>ios</strong></em></li></ul><p><code>国内付费的模拟器均不支持安装我们的app;</code></p></li></ul><p> 建议方案：ups+远控软件（tv）+网易模拟器（免费）<br> 成本：ups(200-300￥)+win自带的远程连接+mumu模拟器 </p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;各家模拟器对比分析&quot;&gt;&lt;a href=&quot;#各家模拟器对比分析&quot; class=&quot;headerlink&quot; title=&quot;各家模拟器对比分析&quot;&gt;&lt;/a&gt;各家模拟器对比分析&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;大纲&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;对比产品&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;包体大小&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;安兔兔评分&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;支持功能&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;资源消耗/操作体验&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="工具" scheme="https://fenqian.xyz/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="模拟器" scheme="https://fenqian.xyz/tags/%E6%A8%A1%E6%8B%9F%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>UI自动化框架说明</title>
    <link href="https://fenqian.xyz/posts/411091fa/"/>
    <id>https://fenqian.xyz/posts/411091fa/</id>
    <published>2021-09-09T07:34:58.000Z</published>
    <updated>2021-09-09T09:14:12.729Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UI自动化框架说明"><a href="#UI自动化框架说明" class="headerlink" title="UI自动化框架说明"></a>UI自动化框架说明</h1><pre><code>`本帖的ui自动化框架，取材于github上某个湖南老乡的框架；结构清晰，遵循PO模式，通过逻辑层-处理层-用例配置整个结构结构清晰明了；实现了处理逻辑和数据分离；有利于平台化`</code></pre><p>___ 大纲 ___</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">框架的整体结构</span><br><span class="line">代码模块的结构，文件说明</span><br><span class="line">框架的执行过程</span><br><span class="line">框架优化&#x2F;改动以适应我们产品</span><br></pre></td></tr></table></figure><p>___ 框架整体结构 ___<br><img src="/text_image/ui%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%B6%E6%9E%84.png" alt="alt_text"></p><p><code>框架整体构成由五部分构成；分别是runner(入口)/TestCase(控制层)/PageObject(逻辑层)/日志文件/yaml配置模块/报告模块 </code></p><p>___ runner(入口) ___</p><p><code>android入口程序文件：Runner/runner.py ios入口程序文件：Runner/runner.py </code><br>__ 入口程序代码review __</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">#ios环境需要手动杀掉adb，杀掉win和mac上的adb</span></span><br><span class="line">    kill_adb()</span><br><span class="line">    <span class="comment">#获取imei</span></span><br><span class="line">    devicess = AndroidDebugBridge().attached_devices()</span><br><span class="line">    <span class="keyword">if</span> len(devicess) &gt; 0:</span><br><span class="line">        <span class="comment">#创建log里面的文件，先删旧文件，然后将数据写入新文件</span></span><br><span class="line">        mk_file()</span><br><span class="line">        <span class="comment">#存多设备数据，每个设备为一个字典</span></span><br><span class="line">        l_devices = []</span><br><span class="line">        <span class="keyword">for</span> dev <span class="keyword">in</span> devicess:</span><br><span class="line">            <span class="comment">#设备数据，含imei,包名，端口，备用端口，系统端口</span></span><br><span class="line">            app = &#123;&#125;</span><br><span class="line">            app[<span class="string">&quot;devices&quot;</span>] = dev</span><br><span class="line">            <span class="comment">#初始化安装应用</span></span><br><span class="line">            init(dev)</span><br><span class="line">            app[<span class="string">&quot;port&quot;</span>] = str(random.randint(4700, 4900))</span><br><span class="line">            app[<span class="string">&quot;bport&quot;</span>] = str(random.randint(4700, 4900))</span><br><span class="line">            app[<span class="string">&quot;systemPort&quot;</span>] = str(random.randint(4700, 4900))</span><br><span class="line">            app[<span class="string">&quot;app&quot;</span>] = PATH(<span class="string">&quot;../app/com.ximalaya.ting.android.apk&quot;</span>) <span class="comment"># 测试的app路径,喜马拉雅app</span></span><br><span class="line">            <span class="comment">#构造数据</span></span><br><span class="line">            l_devices.append(app)</span><br><span class="line">        <span class="comment">#启动appium服务</span></span><br><span class="line">        appium_server = AppiumServer(l_devices)</span><br><span class="line">        appium_server.start_server()</span><br><span class="line">        <span class="comment">#执行操作</span></span><br><span class="line">        runnerPool(l_devices)</span><br><span class="line">        <span class="comment">#结果怎么单独写入excel</span></span><br><span class="line">        writeExcel()</span><br><span class="line">        appium_server.stop_server(l_devices)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有可用的安卓设备&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;UI自动化框架说明&quot;&gt;&lt;a href=&quot;#UI自动化框架说明&quot; class=&quot;headerlink&quot; title=&quot;UI自动化框架说明&quot;&gt;&lt;/a&gt;UI自动化框架说明&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;`本帖的ui自动化框架，取材于github上某个湖南老乡的框架；结构</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ANR治理</title>
    <link href="https://fenqian.xyz/posts/1ee32bf1/"/>
    <id>https://fenqian.xyz/posts/1ee32bf1/</id>
    <published>2021-09-06T08:22:00.000Z</published>
    <updated>2021-09-07T12:31:24.035Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ANR治理"><a href="#ANR治理" class="headerlink" title="ANR治理"></a>ANR治理</h1><ul><li><em><strong>大纲</strong></em></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">anr是什么？</span><br><span class="line">为什么会产生anr?</span><br><span class="line">anr是怎样产生的，哪些场景下会产生？</span><br><span class="line">anr如何治理？</span><br><span class="line">解决anr问题的价值？</span><br></pre></td></tr></table></figure><ul><li><strong>anr是什么？</strong><br>  <code>anr(Applicatipon No Response),即应用无响应；本质是一个性能问题；在用户和app进行交互时，常会遇到长时间无响应/卡顿的场景；为了改善性能，Android设计了anr的机制，即保证交互能在一定时间内完成，如果未完成，就抛出异常，也就是ANR;   </code></li><li><strong>anr设计机制：</strong><br>  <code>是系统通过与之交互的组件(Activity，Service，Receiver，Provider)以及用户交互(InputEvent)进行超时监控，以判断应用进程(主线程)是否存在卡死或响应过慢的问题，通俗来说就是很多系统中看门狗(watchdog)的设计思想。   </code><ul><li><strong>不同的组件，系统设置的超时时间是不同的，这个时间不同手机厂商的os可能也会做调整：</strong><br><img src="/text_image/anr_%E7%BB%84%E4%BB%B6_%E8%B6%85%E6%97%B6.png" alt="alt text"></li><li><strong>系统抛出anr的机制：</strong><br><code>在进行相关的操作前，系统会基于当前的时间戳和这个类型组件的超时时间设置，计算出超时时间戳；并将超时时间戳传递给anr触发函数，组件若未超时启动，则会在启动成功后，在传递一个参数给anr函数来阻止触发anr;若到超时时间，anr函数还未收到阻止信号，就会触发ANR(类似构建了个定时触发的任务)； </code></li><li><strong>超时触发流程如下：</strong><br><img src="/text_image/anr_%E7%BB%84%E4%BB%B6_%E8%B6%85%E6%97%B6.png" alt="alt text"></li></ul></li></ul><p><a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzI1MzYzMjE0MQ==&action=getalbum&album_id=1780091311874686979&scene=173&from_msgid=2247488558&from_itemidx=1&count=3&nolastread=1&uin=&key=&devicetype=Windows+10+x64&version=63030532&lang=zh_CN&ascene=0&fontgear=2">头条anr治理系列</a></p><p><a href="https://mp.weixin.qq.com/s/L30s7rOyn6NcPC2y9XNZIQ">百度anr治理</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ANR治理&quot;&gt;&lt;a href=&quot;#ANR治理&quot; class=&quot;headerlink&quot; title=&quot;ANR治理&quot;&gt;&lt;/a&gt;ANR治理&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;大纲&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure clas</summary>
      
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="anr" scheme="https://fenqian.xyz/tags/anr/"/>
    
  </entry>
  
  <entry>
    <title>类对象/实例对象/类方法/实例方法/静态方法</title>
    <link href="https://fenqian.xyz/posts/93899372/"/>
    <id>https://fenqian.xyz/posts/93899372/</id>
    <published>2021-09-02T06:53:00.000Z</published>
    <updated>2021-09-02T10:35:34.593Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong>类对象</strong></li></ul><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class A(object):</span><br><span class="line">    def m1(self, n):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;self:&quot;</span>, self)</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def m2(cls, n):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;cls:&quot;</span>, cls)</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def m3(n):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">a.m1(1) <span class="comment"># self: &lt;__main__.A object at 0x000001E596E41A90&gt;</span></span><br><span class="line">A.m2(1) <span class="comment"># cls: &lt;class &#x27;__main__.A&#x27;&gt;</span></span><br><span class="line">A.m3(1)</span><br><span class="line"></span><br><span class="line">按顺序执行时，执行class A（）创建了A这个类对象</span><br></pre></td></tr></table></figure><ul><li><strong>实例对象</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#接源码</span></span><br><span class="line">a = A()</span><br><span class="line">是对类对象A的实例化，创建了实例对象a,也可以说a绑定了实例对象</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>类方法</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#接源码</span></span><br><span class="line">@classmethod</span><br><span class="line">def m2(cls, n):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;cls:&quot;</span>, cls)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>类中@classmethod下方的是类方法，写法也是固定写法；其中cls必须要有，cls绑定了类对象A(),在类外部，需要这样引用A(类对象).类方法 ；因为类方法在类中能被直接引用，一般是这样引用self.类方法；这是由于self绑定的是实例对象，根据实例对象可以查找到类对象</code></p><ul><li><p>使用场景</p><p>  <code>  如果希望在方法裡面调用静态类，那么把方法定义成类方法是合适的，因为要是定义成静态方法，那么你就要显示地引用类A，这对继承来说可不是一件好事情。(为了方便调用，但又为了继承方便，因此不用静态方法，显示调用)  </code></p></li><li><p><strong>实例方法</strong></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def m1(self, n):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;self:&quot;</span>, self)</span><br></pre></td></tr></table></figure><p><code>实例方法，必须带self;其中self绑定的实例对象a;因此外部使用可以这样使用，a.m1()；在类的内部self绑定了实例对象，因此可以直接使用self.m1来调用</code></p><ul><li><p>使用场景</p><p>  <code>  需要将方法作为对象属性，进行调用，继承，传递的方法，大部分类方法都会定义成实例方法；  </code></p></li><li><p><strong>静态方法</strong></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@staticmethod</span><br><span class="line">def m3(n):</span><br><span class="line">pass</span><br><span class="line">        </span><br><span class="line">静态方法，就是普通函数；和类对象和实例对象均无绑定关系；</span><br><span class="line">即可被类调用，也可通过实例调用；</span><br><span class="line">A.m3()</span><br><span class="line">a.m3()</span><br><span class="line">self.m3</span><br></pre></td></tr></table></figure><ul><li><p>使用场景</p><p>  <code>  如果在方法中不需要访问任何实例方法和属性，纯粹地通过传入参数并返回数据的功能性方法，那么它就适合用静态方法来定义，它节省了实例化对象的开销成本，往往这种方法放在类外面的模块层作为一个函数存在也是没问题的，而放在类中，仅为这个类服务（定义了一个局部域函数仅为该类专门服务）。  </code></p></li><li><p><strong>装饰器</strong></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def A(FUN):</span><br><span class="line"><span class="built_in">return</span> FUN+1</span><br><span class="line">    </span><br><span class="line">@FUN</span><br><span class="line">def b():</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">在装饰器中@后跟的是父方法，注意类方法/静态方法/装饰器方法区别</span><br></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/28010894">参考</a></p>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;类对象&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="python" scheme="https://fenqian.xyz/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>混沌工程</title>
    <link href="https://fenqian.xyz/posts/7a6c2f74/"/>
    <id>https://fenqian.xyz/posts/7a6c2f74/</id>
    <published>2021-09-01T03:56:00.000Z</published>
    <updated>2021-09-01T09:00:32.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="混沌工程"><a href="#混沌工程" class="headerlink" title="混沌工程"></a>混沌工程</h1><ul><li><em><strong>介绍</strong></em></li></ul><p><code>混沌工程是提高分布式系统的稳定性，而进行的一种故障演练测试；具体的方式是向系统注入故障，对比系统稳定时和注入故障后的指标变化；进而评估系统的稳定性和容错能力；</code></p><ul><li><strong>目录</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">混沌工程是什么</span><br><span class="line">为什么要做混沌工程，应用场景</span><br><span class="line">怎么样进行混沌工程</span><br><span class="line">长期规划</span><br></pre></td></tr></table></figure><span id="more"></span><ul><li><p><strong>混沌工程是什么?</strong></p><p>  <code>混沌工程本质是一种故障演练，通过向系统注入故障的方式，来发现问题，从而提升系统的稳定性；  </code></p></li><li><p><strong>为什么要做混沌工程，混沌工程的价值？</strong></p><p>  <code>由于商业软件，基本都是分布式架构，随着用户的增加，架构的节点也越来越多，越来越复炸；复杂系统很容易由于系统中的一些故障，比如节点挂了，redis挂了，消息队列杜塞，硬盘满了，等问题导致系统能力下降；因此我们需要通过模拟故障的方式来碰撞系统，及早发现问题，减少线上风险；  </code></p></li><li><p><strong>怎么样进行混沌工程？</strong></p><ul><li><em><strong>分四步进行</strong></em></li></ul> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">先找到一个稳定状态，然后确定稳定态的指标</span><br><span class="line">确定需覆盖的异常场景，构造异常去碰撞系统</span><br><span class="line">记录系统被碰撞后，相应的指标</span><br><span class="line">将异常态指标和稳定态指标进行对比，分析系统能力是否下降，若下降则代表这个故障未做兼容，需要进行处理</span><br></pre></td></tr></table></figure></li><li><p><strong>如何确定稳定态，如何选取指标?</strong></p><p>  1、一般是参考线上的稳定状态，作为稳定态；稳定态时，需要选取业务指标和系统指标；具体指标的选取要    基于业务特征来进行，比如我们的产品是一款音乐app,用户使用最多的就是音乐播放，音乐下载；影响较大的      是新增用户量，用户活跃度；</p><p>  2、因此我们在选取业务指标时，考虑选取：故障态和稳定态下的，音乐播放数/音乐下载数/听歌人数/新增用      户数/用户留存率/用户的活跃度作为业务指标；</p><p>  3、在确定系统指标时，我们需要具体分析，碰撞的故障，可能影响系统的指标和相应的节点，来监控相应指    标的变化；同时需要分析这种变化对系统业务的影响；</p></li><li><p><strong>如何确定碰撞的异常场景，如何进行碰撞？</strong></p><ul><li><p>异常场景的确认一般是有两种途径；分析系统特征来提取可能的故障/利用线上历史的故障，常见故障有：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CPU 高负载</span><br><span class="line">磁盘高负载：频繁读写磁盘</span><br><span class="line">磁盘空间不足</span><br><span class="line">优雅的下线应用：使用应用的 stop 脚本平滑的停止应用</span><br><span class="line">通过 kill 进程直接停止应用，可能造成数据不一致</span><br><span class="line">网络恶化：随机改变一些包数据，使数据内容不正确</span><br><span class="line">网络延迟：将包延迟一个特定范围的时间</span><br><span class="line">网络丢包：构造一个 tcp 不会完全失败的丢包率</span><br><span class="line">网络黑洞：忽略来自某个 ip 的包</span><br><span class="line">外部服务不可达：将外部服务的域名指向本地环回地址或将访问外部服务的端口的 OUTPUT 数据包丢弃</span><br></pre></td></tr></table></figure></li><li><p>由于混沌工程是对系统健壮性进行的测试，因此需保证系统的真实性，最好利用线上的系统来进行</p><p>  <code>  1、利用线上系统进行混沌工程，需保证系统节点的容量可调度，可控；选取较小可控的节点来进行混沌            工程；   2、进行混沌工程需保证影响可控，可恢复；要保证对线上的业务无影响；  </code></p></li></ul></li><li><p><strong>进行混沌工程的主流工具</strong></p><p>  <code>     大厂基本都有自研的混沌工程的工具，现在国内开源的工具热度最高的是:  </code></p><p>  <a href="https://github.com/chaosblade-io/chaosblade/blob/master/README_CN.md">阿里的chaosblade</a></p><p>  <a href="https://github.com/chaos-mesh/chaos-mesh">云原生计算基金会托管的Chaos Mesh</a></p><p>  <a href="https://github.com/dastergon/awesome-chaos-engineering">混沌工程相关的资料–AWS</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;混沌工程&quot;&gt;&lt;a href=&quot;#混沌工程&quot; class=&quot;headerlink&quot; title=&quot;混沌工程&quot;&gt;&lt;/a&gt;混沌工程&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;介绍&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;混沌工程是提高分布式系统的稳定性，而进行的一种故障演练测试；具体的方式是向系统注入故障，对比系统稳定时和注入故障后的指标变化；进而评估系统的稳定性和容错能力；&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;目录&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;混沌工程是什么&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;为什么要做混沌工程，应用场景	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;怎么样进行混沌工程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;长期规划&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="混沌工程" scheme="https://fenqian.xyz/tags/%E6%B7%B7%E6%B2%8C%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>百度质量体系建设</title>
    <link href="https://fenqian.xyz/posts/bcd76c52/"/>
    <id>https://fenqian.xyz/posts/bcd76c52/</id>
    <published>2021-06-25T02:06:00.000Z</published>
    <updated>2021-09-01T03:55:56.482Z</updated>
    
    <content type="html"><![CDATA[<h1 id="百度质量体系建设"><a href="#百度质量体系建设" class="headerlink" title="百度质量体系建设"></a>百度质量体系建设</h1><ul><li><em><strong>介绍</strong></em></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本系列介绍百度质量体系建设的核心理念，体系建设过程，以及具体的实操方案</span><br></pre></td></tr></table></figure><ul><li><strong>目录</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">质量的评判标准</span><br><span class="line">质量体系建设</span><br><span class="line">质量贴合业务</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;百度质量体系建设&quot;&gt;&lt;a href=&quot;#百度质量体系建设&quot; class=&quot;headerlink&quot; title=&quot;百度质量体系建设&quot;&gt;&lt;/a&gt;百度质量体系建设&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;介绍&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>大数据BI报表架构调整</title>
    <link href="https://fenqian.xyz/posts/10f9513d/"/>
    <id>https://fenqian.xyz/posts/10f9513d/</id>
    <published>2021-05-11T03:19:22.000Z</published>
    <updated>2021-05-11T07:36:15.497Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大数据BI报表架构调整"><a href="#大数据BI报表架构调整" class="headerlink" title="大数据BI报表架构调整"></a>大数据BI报表架构调整</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><span id="more"></span><h2 id="架构说明"><a href="#架构说明" class="headerlink" title="架构说明"></a>架构说明</h2><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="覆盖范围"><a href="#覆盖范围" class="headerlink" title="覆盖范围"></a>覆盖范围</h3><p><em><strong>oms Category Analysis模块</strong></em></p><ul><li>覆盖前端交互</li><li>覆盖报表的数据</li><li>覆盖接口性能</li></ul><p><em><strong>Traffic Analysis</strong></em></p><ul><li>覆盖前端交互</li><li>覆盖报表的数据</li><li>覆盖接口性能</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;大数据BI报表架构调整&quot;&gt;&lt;a href=&quot;#大数据BI报表架构调整&quot; class=&quot;headerlink&quot; title=&quot;大数据BI报表架构调整&quot;&gt;&lt;/a&gt;大数据BI报表架构调整&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>搭建hexo博客</title>
    <link href="https://fenqian.xyz/posts/8e88d59c/"/>
    <id>https://fenqian.xyz/posts/8e88d59c/</id>
    <published>2021-05-07T09:18:05.330Z</published>
    <updated>2021-05-07T09:18:05.330Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><span id="more"></span><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1、建立github代码库</span><br><span class="line">2、下载hexo文件</span><br><span class="line">3、下载主题，更改配置使主题生效</span><br><span class="line">4、部署配置git</span><br><span class="line">5、下载git同步工具</span><br><span class="line">6、清洗旧数据，生成新的静态文件，同步静态文件至代码库（需更改hexo部署配置）</span><br><span class="line">7、域名解析，并给github代码库配置域名</span><br></pre></td></tr></table></figure><p>More info: <a href="https://zhuanlan.zhihu.com/p/26625249">参考</a></p><ul><li>related_posts: true</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://fenqian.xyz/posts/4a17b156/"/>
    <id>https://fenqian.xyz/posts/4a17b156/</id>
    <published>2021-05-07T09:18:05.329Z</published>
    <updated>2021-05-07T09:18:05.329Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><span id="more"></span><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p>#开启动画<br>canvas_nest: true </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>做点事</title>
    <link href="https://fenqian.xyz/posts/2837d102/"/>
    <id>https://fenqian.xyz/posts/2837d102/</id>
    <published>2021-04-29T08:08:00.000Z</published>
    <updated>2021-09-01T03:59:33.945Z</updated>
    
    <content type="html"><![CDATA[<h1 id="广告也是内容"><a href="#广告也是内容" class="headerlink" title="广告也是内容"></a>广告也是内容</h1><p><em><strong>广告内容加工</strong></em></p><span id="more"></span><ul><li><strong>优点</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、内容生产投入大，因此质地优良；</span><br><span class="line">2、由于是免费传播，无版权问题；</span><br><span class="line">3、广告天然是变现产品，变现能力强；</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>生产</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、youtube</span><br><span class="line">2、bilibili</span><br><span class="line">3、其他短视频</span><br><span class="line">4、电视节目</span><br></pre></td></tr></table></figure><ul><li><strong>痛点</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">怎么使得内容有消费潜力</span><br></pre></td></tr></table></figure><p><em><strong>聚合站</strong></em></p><ul><li><strong>介绍</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">聚合站指视频/pron/小说/新闻聚合站</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>优点</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、内容丰富，可消费性强</span><br><span class="line">2、可通过爬虫获取数据，成本较低</span><br><span class="line">3、变现方式多元，盈利能力强</span><br></pre></td></tr></table></figure><ul><li><strong>生产</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、从几大主站爬去内容</span><br><span class="line">2、从其他盗版站爬去内容</span><br><span class="line">3、从开源/商业的内容服务获取内容</span><br></pre></td></tr></table></figure><ul><li><strong>痛点</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、政策/法律风险</span><br><span class="line">2、国外投放，由于文化差异，内容偏好不同</span><br><span class="line">3、国外封网站较严重，如果规避被封</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;广告也是内容&quot;&gt;&lt;a href=&quot;#广告也是内容&quot; class=&quot;headerlink&quot; title=&quot;广告也是内容&quot;&gt;&lt;/a&gt;广告也是内容&lt;/h1&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;广告内容加工&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>装饰器详解</title>
    <link href="https://fenqian.xyz/posts/1d1282f5/"/>
    <id>https://fenqian.xyz/posts/1d1282f5/</id>
    <published>2021-04-29T07:14:00.000Z</published>
    <updated>2021-05-07T09:18:05.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="装饰器是什么"><a href="#装饰器是什么" class="headerlink" title="装饰器是什么"></a>装饰器是什么</h1><span id="more"></span><ul><li>装饰器本质上是一种函数构造方法，其构造的是一种可变函数；我们知道在python中一切皆对象，函数即对象，由于对象是灵活不受约束的，因此我们在构造函数时，可将函数对象作为参数传递或者返回，可将函数对象进行随意嵌套，基于这些特性，我们可在在不变更代码的情况下，灵活的扩展函数/模块的功能；</li></ul><h1 id="装饰器的作用"><a href="#装饰器的作用" class="headerlink" title="装饰器的作用"></a>装饰器的作用</h1><ul><li><em><strong>为已存在的对象添加额外功能</strong></em></li></ul><h1 id="装饰器的实现"><a href="#装饰器的实现" class="headerlink" title="装饰器的实现"></a>装饰器的实现</h1><ul><li><strong>原则:</strong> <ul><li>装饰器必须接受一个callable对象</li><li>其实它并不关心你返回什么，可以是另外一个callable对象（大部分情况），也可以是其他类对象，比如property</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#装饰器的基本语法如下</span></span><br><span class="line">def father(funs):</span><br><span class="line">def b(funs):</span><br><span class="line">    funs</span><br><span class="line">    pass</span><br><span class="line"><span class="built_in">return</span> b</span><br><span class="line"><span class="comment">#@这种称为语法糖，实际等同father(son)    </span></span><br><span class="line">@father()</span><br><span class="line">def son():</span><br><span class="line">pass</span><br><span class="line">    </span><br><span class="line"><span class="comment">#使用,执行子函数，基于结构，会将子函数作为参数传递给父函数，实际执行的是父函数</span></span><br><span class="line">son()</span><br></pre></td></tr></table></figure><ul><li>由上可知，将子函数作为参数传递给父函数，父函数，会谁传递的函数的对象的变化而执行不同的操作，从而实现可变函数的构造。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#上方的结构，不支持复合结构如下，这是由于执行son时已经是复合结构了，在复用一层，就会报错，但是python针对这种场景，也有处理的方法</span></span><br><span class="line">father(son())</span><br><span class="line"></span><br><span class="line"><span class="comment">#处理方法</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#装饰器的基本语法如下</span></span><br><span class="line">def father(funs):</span><br><span class="line">@wraps(funs)</span><br><span class="line">def b(funs):</span><br><span class="line">    funs</span><br><span class="line">    pass</span><br><span class="line"><span class="built_in">return</span> b</span><br><span class="line">    </span><br><span class="line">@father()</span><br><span class="line">def son():</span><br><span class="line">pass</span><br><span class="line"></span><br><span class="line"><span class="comment">#此时即可支持复合结构</span></span><br></pre></td></tr></table></figure></li><li><strong>除上诉以外，装饰器还能被进一步封装</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">def logged(level, name=None, message=None):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    Add logging to a function. level is the logging</span></span><br><span class="line"><span class="string">    level, name is the logger name, and message is the</span></span><br><span class="line"><span class="string">    log message. If name and message aren&#x27;t specified,</span></span><br><span class="line"><span class="string">    they default to the function&#x27;s module and name.</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    def decorate(func):</span><br><span class="line">        logname = name <span class="keyword">if</span> name <span class="keyword">else</span> func.__module__</span><br><span class="line">        <span class="built_in">log</span> = logging.getLogger(logname)</span><br><span class="line">        logmsg = message <span class="keyword">if</span> message <span class="keyword">else</span> func.__name__</span><br><span class="line"></span><br><span class="line">        @wraps(func)</span><br><span class="line">        def wrapper(*args, **kwargs):</span><br><span class="line">            log.log(level, logmsg)</span><br><span class="line">            <span class="built_in">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">return</span> wrapper</span><br><span class="line">    <span class="built_in">return</span> decorate</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example use</span></span><br><span class="line">@logged(logging.DEBUG)</span><br><span class="line">def add(x, y):</span><br><span class="line">    <span class="built_in">return</span> x + y</span><br><span class="line"></span><br><span class="line">@logged(logging.CRITICAL, <span class="string">&#x27;example&#x27;</span>)</span><br><span class="line">def spam():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Spam!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>同样一个函数，也可以有多个装饰器</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#a/b/c都是装饰器，执行的优先顺序是先内后外即a(son)&gt;b(son)&gt;c(son)</span></span><br><span class="line">@c</span><br><span class="line">@b</span><br><span class="line">@a</span><br><span class="line">def son():</span><br><span class="line">pass</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>装饰器不仅仅只能是函数，也可以是类，利用的是类的内置方法（__call__）</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class logging(object):</span><br><span class="line">    def __init__(self, level=<span class="string">&#x27;INFO&#x27;</span>):</span><br><span class="line">        self.level = level</span><br><span class="line">        </span><br><span class="line">    def __call__(self, func): <span class="comment"># 接受函数</span></span><br><span class="line">        def wrapper(*args, **kwargs):</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;[&#123;level&#125;]: enter function &#123;func&#125;()&quot;</span>.format(</span><br><span class="line">                level=self.level,</span><br><span class="line">                func=func.__name__)</span><br><span class="line">            func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">return</span> wrapper  <span class="comment">#返回函数</span></span><br><span class="line"></span><br><span class="line">@logging(level=<span class="string">&#x27;INFO&#x27;</span>)</span><br><span class="line">def say(something):</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;say &#123;&#125;!&quot;</span>.format(something)</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/cicaday/p/python-decorator.html#_caption_1"><em><strong>参考：装饰器详解</strong></em></a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;装饰器是什么&quot;&gt;&lt;a href=&quot;#装饰器是什么&quot; class=&quot;headerlink&quot; title=&quot;装饰器是什么&quot;&gt;&lt;/a&gt;装饰器是什么&lt;/h1&gt;</summary>
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="python" scheme="https://fenqian.xyz/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>好看的hexo博客</title>
    <link href="https://fenqian.xyz/posts/b6d42d86/"/>
    <id>https://fenqian.xyz/posts/b6d42d86/</id>
    <published>2021-04-29T06:30:00.000Z</published>
    <updated>2021-05-07T09:18:05.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如下"><a href="#如下" class="headerlink" title="如下"></a>如下</h1><ul><li><a href="https://blog.bill.moe/"><strong>竞赛</strong></a></li><li><a href="https://diygod.me/"><strong>b站开源大佬</strong></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;如下&quot;&gt;&lt;a href=&quot;#如下&quot; class=&quot;headerlink&quot; title=&quot;如下&quot;&gt;&lt;/a&gt;如下&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.bill.moe/&quot;&gt;&lt;strong&gt;竞赛&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    <category term="博客" scheme="https://fenqian.xyz/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="hexo" scheme="https://fenqian.xyz/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>编写博客--makedown语法说明</title>
    <link href="https://fenqian.xyz/posts/ed6b07f3/"/>
    <id>https://fenqian.xyz/posts/ed6b07f3/</id>
    <published>2021-04-26T05:41:45.000Z</published>
    <updated>2021-05-07T10:25:00.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="语法总览"><a href="#语法总览" class="headerlink" title="语法总览"></a>语法总览</h1><h2 id="正文语法"><a href="#正文语法" class="headerlink" title="正文语法"></a>正文语法</h2><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; 1.=== title ===最顶级标题</span><br><span class="line">&gt; 2.---  title --- 二级标题</span><br><span class="line">&gt; 3.<span class="comment"># title/## title/###### title一级/二级/六级标题</span></span><br><span class="line">&gt; * tab缩进语法</span><br><span class="line">&gt; + 字体加粗使用** text ** 或__text__</span><br><span class="line">&gt; - 排序列表，无序列表使用（+-*），有序列表使用（1.数字加点）</span><br><span class="line">&gt; - 换行，如果上下行无\n(换行操作)则不换行，如果有则换行</span><br><span class="line">&gt; - 空行，如果上下行之间有空行，则会进行换行</span><br></pre></td></tr></table></figure></code></pre><h2 id="资源语法"><a href="#资源语法" class="headerlink" title="资源语法"></a>资源语法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">链接：</span><br><span class="line"></span><br><span class="line">&gt; - [链接](baidu.com <span class="string">&quot;百度这可省略，添加的属性值&quot;</span>)</span><br><span class="line">&gt; + [链接2][1]...[链接3][id]</span><br><span class="line">[1]: baidu.com <span class="string">&quot;属性值1可省略&quot;</span></span><br><span class="line">[id]: zhihu.com <span class="string">&quot;属性值2可省略&quot;</span> </span><br><span class="line"></span><br><span class="line">图片：</span><br><span class="line"></span><br><span class="line">&gt; - ![alt text](/path/.jpg <span class="string">&quot;可省略，添加的属性值&quot;</span>)</span><br><span class="line">&gt; + ![alt text][1]...![alt text][id可任意和下文保持一致即可]</span><br><span class="line">[1]: /path/.jpg <span class="string">&quot;属性值1可省略&quot;</span></span><br><span class="line">[id]: /path/.jpg <span class="string">&quot;属性值2可省略&quot;</span> </span><br><span class="line"></span><br><span class="line">代码块：</span><br><span class="line"></span><br><span class="line">&gt; 1. `中间是代码块`</span><br><span class="line">&gt; 2. ```bash 中间是代码块 ```</span><br><span class="line">&gt; 3. 四个空格/一个tab操作后面的代码</span><br><span class="line">&gt; 4.&lt;!-- more --&gt; 缩写/不展示全文</span><br></pre></td></tr></table></figure><p><a href="https://www.appinn.com/markdown/basic.html">参考</a><br><a href="https://www.appinn.com/markdown/basic.html">参考2</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;语法总览&quot;&gt;&lt;a href=&quot;#语法总览&quot; class=&quot;headerlink&quot; title=&quot;语法总览&quot;&gt;&lt;/a&gt;语法总览&lt;/h1&gt;&lt;h2 id=&quot;正文语法&quot;&gt;&lt;a href=&quot;#正文语法&quot; class=&quot;headerlink&quot; title=&quot;正文语法&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Android资源采集</title>
    <link href="https://fenqian.xyz/posts/0/"/>
    <id>https://fenqian.xyz/posts/0/</id>
    <published>2021-04-01T09:31:00.000Z</published>
    <updated>2021-09-01T09:03:40.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><span id="more"></span><h3 id="命令："><a href="#命令：" class="headerlink" title="命令："></a>命令：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb -s 042461198L000964 shell dumpsys cpuinfo</span><br></pre></td></tr></table></figure><h3 id="结果解析："><a href="#结果解析：" class="headerlink" title="结果解析："></a>结果解析：</h3><p><img src="/text_image/cpu.png" alt="alt text"></p><h5 id="第一行"><a href="#第一行" class="headerlink" title="第一行"></a>第一行</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">其中第一行：Load: 10.1 / 2.49 / 0.83</span><br><span class="line">表示系统1min/5min/10min cpu负载平均值</span><br><span class="line">标准说明：1/0.7---理论上单核满载是1，但是在真实情况下，满载会存在性能问题，一般不超过70%；四核满载则是4.</span><br></pre></td></tr></table></figure><h5 id="第三行"><a href="#第三行" class="headerlink" title="第三行"></a>第三行</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">75% 593/system_server: 58% user + 16% kernel / faults: 33566 minor 473 major</span><br><span class="line">该行表示资源消耗情况；</span><br><span class="line">593/75%/58%/16%：pid/cpu负载/用户空间负载/内核空间负载</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="命令扩展"><a href="#命令扩展" class="headerlink" title="命令扩展"></a>命令扩展</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb -s 042461198L000964 shell dumpsys cpuinfo | grep -w com.afmobi.boomplayer:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/lipanpan1030/article/details/108118685">dumpsys工具cpu采集说明</a></p><h2 id="MEN"><a href="#MEN" class="headerlink" title="MEN"></a>MEN</h2><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb -s 042461198L000964 shell  dumpsys  meminfo com.afmobi.boomplayer</span><br></pre></td></tr></table></figure><h3 id="结果解析：-1"><a href="#结果解析：-1" class="headerlink" title="结果解析："></a>结果解析：</h3><p><img src="/text_image/men.png" alt="alt text"><br><strong>由图可知：</strong> 需要解析获取TOTAL之后的值，单位kb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#脚本如下</span></span><br><span class="line"><span class="comment"># 得到men的使用情况</span></span><br><span class="line">def get_men(devices, pkg_name):</span><br><span class="line">    cmd = <span class="string">&quot;adb -s &quot;</span>+devices+<span class="string">&quot; shell  dumpsys  meminfo %s&quot;</span>  %(pkg_name)</span><br><span class="line">    total = <span class="string">&quot;TOTAL&quot;</span></span><br><span class="line">    get_cmd = os.popen(cmd).readlines()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;men:&#x27;</span>,get_cmd)</span><br><span class="line">    <span class="keyword">for</span> info <span class="keyword">in</span> get_cmd:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;men_info:&#x27;</span>,info)</span><br><span class="line">        info_sp = info.strip().split()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;info_sp:&quot;</span>,info_sp)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> range(len(info_sp)):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;item:&quot;</span>,item)</span><br><span class="line">            <span class="keyword">if</span> info_sp[item] == total:</span><br><span class="line">                <span class="built_in">return</span> int(info_sp[item+1])</span><br><span class="line">    <span class="built_in">return</span> 0</span><br></pre></td></tr></table></figure><h2 id="FPS"><a href="#FPS" class="headerlink" title="FPS"></a>FPS</h2><p><strong>fps为帧率，表示单位时间1s内屏幕刷新的次数，Android6之前存在一个相对标准，帧率不能低于60，即单帧耗时不能大于16.67ms,否则会存在丢帧</strong></p><h3 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb -s 042461198L000964 shell dumpsys gfxinfo com.afmobi.boomplayer | grep -A 128 Execute | grep -v <span class="string">&#x27;[a-z]&#x27;</span> </span><br></pre></td></tr></table></figure><h3 id="结果解析：-2"><a href="#结果解析：-2" class="headerlink" title="结果解析："></a>结果解析：</h3><p><img src="/text_image/fps.png" alt="alt text"><br><strong>如上图 Draw/Prepare/Process/Execute表示一帧被绘制的四个阶段，四个值相加即为一帧的耗时(无数据则很可能是手机的“GPU呈现模式分析”未打开)</strong></p><p><a href="https://blog.csdn.net/weixin_43291944/article/details/98497689">fps说明</a></p><h2 id="FLOW"><a href="#FLOW" class="headerlink" title="FLOW"></a>FLOW</h2><p><strong>流量获取有多个路径，比如通过在tcp_snd文件获取tcp发送流量，在tcp_rcv文件中获取tcp接受流量，在/net/dev中获取总的发送/接受流量，同时也可以通过代理获取流量值</strong></p><h3 id="命令-2"><a href="#命令-2" class="headerlink" title="命令"></a>命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tcp_send_cmd=adb shell cat /proc/uid_stat/uid_cmd/tcp_snd</span><br><span class="line"></span><br><span class="line">tcp_recv_cmd=adb shell cat /proc/uid_stat/uid_cmd/tcp_rcv</span><br><span class="line"></span><br><span class="line">sum_send_cmd=adb shell cat /proc/pid_cmd/net/dev|grep <span class="string">&quot;wlan0&quot;</span>|awk <span class="string">&quot;&#123;print <span class="variable">$10</span>&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">sum_recv_cmd=adb shell cat /proc/pid_cmd/net/dev|grep <span class="string">&quot;wlan0&quot;</span>|awk <span class="string">&quot;&#123;print <span class="variable">$2</span>&#125;&quot;</span></span><br></pre></td></tr></table></figure><p><a href="https://testerhome.com/topics/14310">流量命令</a></p><h2 id="电量"><a href="#电量" class="headerlink" title="电量"></a>电量</h2><h3 id="命令-3"><a href="#命令-3" class="headerlink" title="命令"></a>命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys batterystats --charged com.afmobi.boomplayer</span><br></pre></td></tr></table></figure><p><strong>预计的电量值如下</strong><br><img src="/text_image/dian.png" alt="alt text"></p><p><a href="https://source.android.com/devices/tech/power/batterystats?hl=zh-cn">电量/流量说明</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;CPU&quot;&gt;&lt;a href=&quot;#CPU&quot; class=&quot;headerlink&quot; title=&quot;CPU&quot;&gt;&lt;/a&gt;CPU&lt;/h2&gt;</summary>
    
    
    
    <category term="技术" scheme="https://fenqian.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Android" scheme="https://fenqian.xyz/tags/Android/"/>
    
  </entry>
  
</feed>
